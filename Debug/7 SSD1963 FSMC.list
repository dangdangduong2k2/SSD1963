
7 SSD1963 FSMC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dd0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001b1e0  08006f60  08006f60  00016f60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022140  08022140  00040068  2**0
                  CONTENTS
  4 .ARM          00000008  08022140  08022140  00032140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022148  08022148  00040068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022148  08022148  00032148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802214c  0802214c  0003214c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08022150  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040068  2**0
                  CONTENTS
 10 .bss          000001c4  20000068  20000068  00040068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000022c  2000022c  00040068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00040098  2**0
                  CONTENTS, READONLY
 14 .debug_info   00007a01  00000000  00000000  000400db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001886  00000000  00000000  00047adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000758  00000000  00000000  00049368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000563  00000000  00000000  00049ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002192b  00000000  00000000  0004a023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000091b6  00000000  00000000  0006b94e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c6e1f  00000000  00000000  00074b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002acc  00000000  00000000  0013b924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  0013e3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006f48 	.word	0x08006f48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006f48 	.word	0x08006f48

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b970 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9e08      	ldr	r6, [sp, #32]
 8000bf2:	460d      	mov	r5, r1
 8000bf4:	4604      	mov	r4, r0
 8000bf6:	460f      	mov	r7, r1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d14a      	bne.n	8000c92 <__udivmoddi4+0xa6>
 8000bfc:	428a      	cmp	r2, r1
 8000bfe:	4694      	mov	ip, r2
 8000c00:	d965      	bls.n	8000cce <__udivmoddi4+0xe2>
 8000c02:	fab2 f382 	clz	r3, r2
 8000c06:	b143      	cbz	r3, 8000c1a <__udivmoddi4+0x2e>
 8000c08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c0c:	f1c3 0220 	rsb	r2, r3, #32
 8000c10:	409f      	lsls	r7, r3
 8000c12:	fa20 f202 	lsr.w	r2, r0, r2
 8000c16:	4317      	orrs	r7, r2
 8000c18:	409c      	lsls	r4, r3
 8000c1a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1e:	fa1f f58c 	uxth.w	r5, ip
 8000c22:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c26:	0c22      	lsrs	r2, r4, #16
 8000c28:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c2c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c30:	fb01 f005 	mul.w	r0, r1, r5
 8000c34:	4290      	cmp	r0, r2
 8000c36:	d90a      	bls.n	8000c4e <__udivmoddi4+0x62>
 8000c38:	eb1c 0202 	adds.w	r2, ip, r2
 8000c3c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c40:	f080 811c 	bcs.w	8000e7c <__udivmoddi4+0x290>
 8000c44:	4290      	cmp	r0, r2
 8000c46:	f240 8119 	bls.w	8000e7c <__udivmoddi4+0x290>
 8000c4a:	3902      	subs	r1, #2
 8000c4c:	4462      	add	r2, ip
 8000c4e:	1a12      	subs	r2, r2, r0
 8000c50:	b2a4      	uxth	r4, r4
 8000c52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5e:	fb00 f505 	mul.w	r5, r0, r5
 8000c62:	42a5      	cmp	r5, r4
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x90>
 8000c66:	eb1c 0404 	adds.w	r4, ip, r4
 8000c6a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6e:	f080 8107 	bcs.w	8000e80 <__udivmoddi4+0x294>
 8000c72:	42a5      	cmp	r5, r4
 8000c74:	f240 8104 	bls.w	8000e80 <__udivmoddi4+0x294>
 8000c78:	4464      	add	r4, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c80:	1b64      	subs	r4, r4, r5
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11e      	cbz	r6, 8000c8e <__udivmoddi4+0xa2>
 8000c86:	40dc      	lsrs	r4, r3
 8000c88:	2300      	movs	r3, #0
 8000c8a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d908      	bls.n	8000ca8 <__udivmoddi4+0xbc>
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	f000 80ed 	beq.w	8000e76 <__udivmoddi4+0x28a>
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e9c6 0500 	strd	r0, r5, [r6]
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca8:	fab3 f183 	clz	r1, r3
 8000cac:	2900      	cmp	r1, #0
 8000cae:	d149      	bne.n	8000d44 <__udivmoddi4+0x158>
 8000cb0:	42ab      	cmp	r3, r5
 8000cb2:	d302      	bcc.n	8000cba <__udivmoddi4+0xce>
 8000cb4:	4282      	cmp	r2, r0
 8000cb6:	f200 80f8 	bhi.w	8000eaa <__udivmoddi4+0x2be>
 8000cba:	1a84      	subs	r4, r0, r2
 8000cbc:	eb65 0203 	sbc.w	r2, r5, r3
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	4617      	mov	r7, r2
 8000cc4:	2e00      	cmp	r6, #0
 8000cc6:	d0e2      	beq.n	8000c8e <__udivmoddi4+0xa2>
 8000cc8:	e9c6 4700 	strd	r4, r7, [r6]
 8000ccc:	e7df      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xe6>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f382 	clz	r3, r2
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x210>
 8000cdc:	1a8a      	subs	r2, r1, r2
 8000cde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce2:	fa1f fe8c 	uxth.w	lr, ip
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cec:	fb07 2015 	mls	r0, r7, r5, r2
 8000cf0:	0c22      	lsrs	r2, r4, #16
 8000cf2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf6:	fb0e f005 	mul.w	r0, lr, r5
 8000cfa:	4290      	cmp	r0, r2
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x124>
 8000cfe:	eb1c 0202 	adds.w	r2, ip, r2
 8000d02:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x122>
 8000d08:	4290      	cmp	r0, r2
 8000d0a:	f200 80cb 	bhi.w	8000ea4 <__udivmoddi4+0x2b8>
 8000d0e:	4645      	mov	r5, r8
 8000d10:	1a12      	subs	r2, r2, r0
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d18:	fb07 2210 	mls	r2, r7, r0, r2
 8000d1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d20:	fb0e fe00 	mul.w	lr, lr, r0
 8000d24:	45a6      	cmp	lr, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x14e>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d30:	d202      	bcs.n	8000d38 <__udivmoddi4+0x14c>
 8000d32:	45a6      	cmp	lr, r4
 8000d34:	f200 80bb 	bhi.w	8000eae <__udivmoddi4+0x2c2>
 8000d38:	4610      	mov	r0, r2
 8000d3a:	eba4 040e 	sub.w	r4, r4, lr
 8000d3e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d42:	e79f      	b.n	8000c84 <__udivmoddi4+0x98>
 8000d44:	f1c1 0720 	rsb	r7, r1, #32
 8000d48:	408b      	lsls	r3, r1
 8000d4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d52:	fa05 f401 	lsl.w	r4, r5, r1
 8000d56:	fa20 f307 	lsr.w	r3, r0, r7
 8000d5a:	40fd      	lsrs	r5, r7
 8000d5c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d60:	4323      	orrs	r3, r4
 8000d62:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d66:	fa1f fe8c 	uxth.w	lr, ip
 8000d6a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6e:	0c1c      	lsrs	r4, r3, #16
 8000d70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d74:	fb08 f50e 	mul.w	r5, r8, lr
 8000d78:	42a5      	cmp	r5, r4
 8000d7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d82:	d90b      	bls.n	8000d9c <__udivmoddi4+0x1b0>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d8c:	f080 8088 	bcs.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d90:	42a5      	cmp	r5, r4
 8000d92:	f240 8085 	bls.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d96:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9a:	4464      	add	r4, ip
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	b29d      	uxth	r5, r3
 8000da0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da4:	fb09 4413 	mls	r4, r9, r3, r4
 8000da8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dac:	fb03 fe0e 	mul.w	lr, r3, lr
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1da>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dbc:	d26c      	bcs.n	8000e98 <__udivmoddi4+0x2ac>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	d96a      	bls.n	8000e98 <__udivmoddi4+0x2ac>
 8000dc2:	3b02      	subs	r3, #2
 8000dc4:	4464      	add	r4, ip
 8000dc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dca:	fba3 9502 	umull	r9, r5, r3, r2
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	42ac      	cmp	r4, r5
 8000dd4:	46c8      	mov	r8, r9
 8000dd6:	46ae      	mov	lr, r5
 8000dd8:	d356      	bcc.n	8000e88 <__udivmoddi4+0x29c>
 8000dda:	d053      	beq.n	8000e84 <__udivmoddi4+0x298>
 8000ddc:	b156      	cbz	r6, 8000df4 <__udivmoddi4+0x208>
 8000dde:	ebb0 0208 	subs.w	r2, r0, r8
 8000de2:	eb64 040e 	sbc.w	r4, r4, lr
 8000de6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dea:	40ca      	lsrs	r2, r1
 8000dec:	40cc      	lsrs	r4, r1
 8000dee:	4317      	orrs	r7, r2
 8000df0:	e9c6 7400 	strd	r7, r4, [r6]
 8000df4:	4618      	mov	r0, r3
 8000df6:	2100      	movs	r1, #0
 8000df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfc:	f1c3 0120 	rsb	r1, r3, #32
 8000e00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e04:	fa20 f201 	lsr.w	r2, r0, r1
 8000e08:	fa25 f101 	lsr.w	r1, r5, r1
 8000e0c:	409d      	lsls	r5, r3
 8000e0e:	432a      	orrs	r2, r5
 8000e10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e14:	fa1f fe8c 	uxth.w	lr, ip
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e20:	0c11      	lsrs	r1, r2, #16
 8000e22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e26:	fb00 f50e 	mul.w	r5, r0, lr
 8000e2a:	428d      	cmp	r5, r1
 8000e2c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x258>
 8000e32:	eb1c 0101 	adds.w	r1, ip, r1
 8000e36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3a:	d22f      	bcs.n	8000e9c <__udivmoddi4+0x2b0>
 8000e3c:	428d      	cmp	r5, r1
 8000e3e:	d92d      	bls.n	8000e9c <__udivmoddi4+0x2b0>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	1b49      	subs	r1, r1, r5
 8000e46:	b292      	uxth	r2, r2
 8000e48:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e4c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e54:	fb05 f10e 	mul.w	r1, r5, lr
 8000e58:	4291      	cmp	r1, r2
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x282>
 8000e5c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e60:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e64:	d216      	bcs.n	8000e94 <__udivmoddi4+0x2a8>
 8000e66:	4291      	cmp	r1, r2
 8000e68:	d914      	bls.n	8000e94 <__udivmoddi4+0x2a8>
 8000e6a:	3d02      	subs	r5, #2
 8000e6c:	4462      	add	r2, ip
 8000e6e:	1a52      	subs	r2, r2, r1
 8000e70:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e74:	e738      	b.n	8000ce8 <__udivmoddi4+0xfc>
 8000e76:	4631      	mov	r1, r6
 8000e78:	4630      	mov	r0, r6
 8000e7a:	e708      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000e7c:	4639      	mov	r1, r7
 8000e7e:	e6e6      	b.n	8000c4e <__udivmoddi4+0x62>
 8000e80:	4610      	mov	r0, r2
 8000e82:	e6fb      	b.n	8000c7c <__udivmoddi4+0x90>
 8000e84:	4548      	cmp	r0, r9
 8000e86:	d2a9      	bcs.n	8000ddc <__udivmoddi4+0x1f0>
 8000e88:	ebb9 0802 	subs.w	r8, r9, r2
 8000e8c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e90:	3b01      	subs	r3, #1
 8000e92:	e7a3      	b.n	8000ddc <__udivmoddi4+0x1f0>
 8000e94:	4645      	mov	r5, r8
 8000e96:	e7ea      	b.n	8000e6e <__udivmoddi4+0x282>
 8000e98:	462b      	mov	r3, r5
 8000e9a:	e794      	b.n	8000dc6 <__udivmoddi4+0x1da>
 8000e9c:	4640      	mov	r0, r8
 8000e9e:	e7d1      	b.n	8000e44 <__udivmoddi4+0x258>
 8000ea0:	46d0      	mov	r8, sl
 8000ea2:	e77b      	b.n	8000d9c <__udivmoddi4+0x1b0>
 8000ea4:	3d02      	subs	r5, #2
 8000ea6:	4462      	add	r2, ip
 8000ea8:	e732      	b.n	8000d10 <__udivmoddi4+0x124>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e70a      	b.n	8000cc4 <__udivmoddi4+0xd8>
 8000eae:	4464      	add	r4, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e742      	b.n	8000d3a <__udivmoddi4+0x14e>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <RGB>:
#include "main.h"
#include <stdlib.h>
#include <string.h>

uint16_t RGB(uint8_t r, uint8_t g, uint8_t b)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	71bb      	strb	r3, [r7, #6]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	717b      	strb	r3, [r7, #5]
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	021b      	lsls	r3, r3, #8
 8000ece:	b21b      	sxth	r3, r3
 8000ed0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000ed4:	f023 0307 	bic.w	r3, r3, #7
 8000ed8:	b21a      	sxth	r2, r3
 8000eda:	79bb      	ldrb	r3, [r7, #6]
 8000edc:	00db      	lsls	r3, r3, #3
 8000ede:	b21b      	sxth	r3, r3
 8000ee0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000ee4:	b21b      	sxth	r3, r3
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	b21a      	sxth	r2, r3
 8000eea:	797b      	ldrb	r3, [r7, #5]
 8000eec:	08db      	lsrs	r3, r3, #3
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	b21b      	sxth	r3, r3
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	b21b      	sxth	r3, r3
 8000ef6:	b29b      	uxth	r3, r3
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <Lcd_Write_Cmd>:

void Lcd_Write_Cmd(uint16_t Cmd)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	80fb      	strh	r3, [r7, #6]
   *(uint16_t *) (LCD_REG) = Cmd;
 8000f0e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000f12:	88fb      	ldrh	r3, [r7, #6]
 8000f14:	8013      	strh	r3, [r2, #0]
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
	...

08000f24 <Lcd_Write_Data>:
////////////////////////
void Lcd_Write_Data(uint16_t data)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	80fb      	strh	r3, [r7, #6]
   *(uint16_t *) (LCD_DATA)= data;
 8000f2e:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <Lcd_Write_Data+0x1c>)
 8000f30:	88fb      	ldrh	r3, [r7, #6]
 8000f32:	8013      	strh	r3, [r2, #0]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	60020000 	.word	0x60020000

08000f44 <LCD_Write_DATA>:


void LCD_Write_DATA(uint16_t data)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	80fb      	strh	r3, [r7, #6]
	 *(uint16_t *) (LCD_DATA)= data;
 8000f4e:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <LCD_Write_DATA+0x1c>)
 8000f50:	88fb      	ldrh	r3, [r7, #6]
 8000f52:	8013      	strh	r3, [r2, #0]

}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	60020000 	.word	0x60020000

08000f64 <LCD_Write_COM>:

void LCD_Write_COM(uint16_t data)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	80fb      	strh	r3, [r7, #6]
	*(uint16_t *) (LCD_REG) = data;
 8000f6e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000f72:	88fb      	ldrh	r3, [r7, #6]
 8000f74:	8013      	strh	r3, [r2, #0]
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <Lcd_SetArea>:
///////////////////
void Lcd_SetArea(uint16_t sx, uint16_t ex, uint16_t sy, uint16_t ey)
{
 8000f82:	b590      	push	{r4, r7, lr}
 8000f84:	b083      	sub	sp, #12
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	4604      	mov	r4, r0
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	461a      	mov	r2, r3
 8000f90:	4623      	mov	r3, r4
 8000f92:	80fb      	strh	r3, [r7, #6]
 8000f94:	4603      	mov	r3, r0
 8000f96:	80bb      	strh	r3, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	807b      	strh	r3, [r7, #2]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	803b      	strh	r3, [r7, #0]
Lcd_Write_Cmd(SSD1963_SET_COLUMN_ADDRESS);	
 8000fa0:	202a      	movs	r0, #42	; 0x2a
 8000fa2:	f7ff ffaf 	bl	8000f04 <Lcd_Write_Cmd>
Lcd_Write_Data((sx >> 8) & 0xFF);
 8000fa6:	88fb      	ldrh	r3, [r7, #6]
 8000fa8:	0a1b      	lsrs	r3, r3, #8
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ffb9 	bl	8000f24 <Lcd_Write_Data>
Lcd_Write_Data((sx >> 0) & 0xFF);
 8000fb2:	88fb      	ldrh	r3, [r7, #6]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ffb3 	bl	8000f24 <Lcd_Write_Data>
Lcd_Write_Data((ex >> 8) & 0xFF);
 8000fbe:	88bb      	ldrh	r3, [r7, #4]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ffad 	bl	8000f24 <Lcd_Write_Data>
Lcd_Write_Data((ex >> 0) & 0xFF);
 8000fca:	88bb      	ldrh	r3, [r7, #4]
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ffa7 	bl	8000f24 <Lcd_Write_Data>

Lcd_Write_Cmd(SSD1963_SET_PAGE_ADDRESS);	
 8000fd6:	202b      	movs	r0, #43	; 0x2b
 8000fd8:	f7ff ff94 	bl	8000f04 <Lcd_Write_Cmd>
Lcd_Write_Data((sy >> 8) & 0xFF);
 8000fdc:	887b      	ldrh	r3, [r7, #2]
 8000fde:	0a1b      	lsrs	r3, r3, #8
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ff9e 	bl	8000f24 <Lcd_Write_Data>
Lcd_Write_Data((sy >> 0) & 0xFF);
 8000fe8:	887b      	ldrh	r3, [r7, #2]
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ff98 	bl	8000f24 <Lcd_Write_Data>
Lcd_Write_Data((ey >> 8) & 0xFF);
 8000ff4:	883b      	ldrh	r3, [r7, #0]
 8000ff6:	0a1b      	lsrs	r3, r3, #8
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff ff92 	bl	8000f24 <Lcd_Write_Data>
Lcd_Write_Data((ey >> 0) & 0xFF);
 8001000:	883b      	ldrh	r3, [r7, #0]
 8001002:	b2db      	uxtb	r3, r3
 8001004:	b29b      	uxth	r3, r3
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff ff8c 	bl	8000f24 <Lcd_Write_Data>
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	bd90      	pop	{r4, r7, pc}

08001014 <Lcd_SetPixel>:
                }
	}
}

void Lcd_SetPixel(int16_t x, int16_t y, int16_t color)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	80fb      	strh	r3, [r7, #6]
 800101e:	460b      	mov	r3, r1
 8001020:	80bb      	strh	r3, [r7, #4]
 8001022:	4613      	mov	r3, r2
 8001024:	807b      	strh	r3, [r7, #2]
Lcd_SetArea(x, x, y, y);
 8001026:	88f8      	ldrh	r0, [r7, #6]
 8001028:	88f9      	ldrh	r1, [r7, #6]
 800102a:	88ba      	ldrh	r2, [r7, #4]
 800102c:	88bb      	ldrh	r3, [r7, #4]
 800102e:	f7ff ffa8 	bl	8000f82 <Lcd_SetArea>
Lcd_Write_Cmd(0x2c);
 8001032:	202c      	movs	r0, #44	; 0x2c
 8001034:	f7ff ff66 	bl	8000f04 <Lcd_Write_Cmd>
Lcd_Write_Data(color);
 8001038:	887b      	ldrh	r3, [r7, #2]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff ff72 	bl	8000f24 <Lcd_Write_Data>
Lcd_Write_Cmd(0x0);
 8001040:	2000      	movs	r0, #0
 8001042:	f7ff ff5f 	bl	8000f04 <Lcd_Write_Cmd>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <Init_SSD1963>:


void Init_SSD1963(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0

HAL_GPIO_WritePin(TFT_RESET_GPIO_Port, TFT_RESET_Pin, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	2104      	movs	r1, #4
 8001058:	4867      	ldr	r0, [pc, #412]	; (80011f8 <Init_SSD1963+0x1a8>)
 800105a:	f002 ff21 	bl	8003ea0 <HAL_GPIO_WritePin>
HAL_Delay (100);
 800105e:	2064      	movs	r0, #100	; 0x64
 8001060:	f002 fc78 	bl	8003954 <HAL_Delay>
HAL_GPIO_WritePin(TFT_RESET_GPIO_Port, TFT_RESET_Pin, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	2104      	movs	r1, #4
 8001068:	4863      	ldr	r0, [pc, #396]	; (80011f8 <Init_SSD1963+0x1a8>)
 800106a:	f002 ff19 	bl	8003ea0 <HAL_GPIO_WritePin>
HAL_Delay (100);
 800106e:	2064      	movs	r0, #100	; 0x64
 8001070:	f002 fc70 	bl	8003954 <HAL_Delay>
HAL_GPIO_WritePin(TFT_RESET_GPIO_Port, TFT_RESET_Pin, GPIO_PIN_SET);
 8001074:	2201      	movs	r2, #1
 8001076:	2104      	movs	r1, #4
 8001078:	485f      	ldr	r0, [pc, #380]	; (80011f8 <Init_SSD1963+0x1a8>)
 800107a:	f002 ff11 	bl	8003ea0 <HAL_GPIO_WritePin>
//
//Lcd_Write_Cmd(0x2c);



LCD_Write_COM(0xE2);		//PLL multiplier, set PLL clock to 120M
 800107e:	20e2      	movs	r0, #226	; 0xe2
 8001080:	f7ff ff70 	bl	8000f64 <LCD_Write_COM>
LCD_Write_DATA(0x23);	    //N=0x36 for 6.5M, 0x23 for 10M crystal
 8001084:	2023      	movs	r0, #35	; 0x23
 8001086:	f7ff ff5d 	bl	8000f44 <LCD_Write_DATA>
LCD_Write_DATA(0x02);
 800108a:	2002      	movs	r0, #2
 800108c:	f7ff ff5a 	bl	8000f44 <LCD_Write_DATA>
LCD_Write_DATA(0x04);
 8001090:	2004      	movs	r0, #4
 8001092:	f7ff ff57 	bl	8000f44 <LCD_Write_DATA>
LCD_Write_COM(0xE0);		// PLL enable
 8001096:	20e0      	movs	r0, #224	; 0xe0
 8001098:	f7ff ff64 	bl	8000f64 <LCD_Write_COM>
LCD_Write_DATA(0x01);
 800109c:	2001      	movs	r0, #1
 800109e:	f7ff ff51 	bl	8000f44 <LCD_Write_DATA>
HAL_Delay(10);
 80010a2:	200a      	movs	r0, #10
 80010a4:	f002 fc56 	bl	8003954 <HAL_Delay>
LCD_Write_COM(0xE0);
 80010a8:	20e0      	movs	r0, #224	; 0xe0
 80010aa:	f7ff ff5b 	bl	8000f64 <LCD_Write_COM>
LCD_Write_DATA(0x03);
 80010ae:	2003      	movs	r0, #3
 80010b0:	f7ff ff48 	bl	8000f44 <LCD_Write_DATA>
HAL_Delay(10);
 80010b4:	200a      	movs	r0, #10
 80010b6:	f002 fc4d 	bl	8003954 <HAL_Delay>
LCD_Write_COM(0x01);		// software reset
 80010ba:	2001      	movs	r0, #1
 80010bc:	f7ff ff52 	bl	8000f64 <LCD_Write_COM>
HAL_Delay(100);
 80010c0:	2064      	movs	r0, #100	; 0x64
 80010c2:	f002 fc47 	bl	8003954 <HAL_Delay>
LCD_Write_COM(0xE6);		//PLL setting for PCLK, depends on resolution
 80010c6:	20e6      	movs	r0, #230	; 0xe6
 80010c8:	f7ff ff4c 	bl	8000f64 <LCD_Write_COM>
LCD_Write_DATA(0x04);
 80010cc:	2004      	movs	r0, #4
 80010ce:	f7ff ff39 	bl	8000f44 <LCD_Write_DATA>
LCD_Write_DATA(0x93);
 80010d2:	2093      	movs	r0, #147	; 0x93
 80010d4:	f7ff ff36 	bl	8000f44 <LCD_Write_DATA>
LCD_Write_DATA(0xE0);
 80010d8:	20e0      	movs	r0, #224	; 0xe0
 80010da:	f7ff ff33 	bl	8000f44 <LCD_Write_DATA>

LCD_Write_COM(0xB0);		//LCD SPECIFICATION
 80010de:	20b0      	movs	r0, #176	; 0xb0
 80010e0:	f7ff ff40 	bl	8000f64 <LCD_Write_COM>
LCD_Write_DATA(0x00);	// 0x24
 80010e4:	2000      	movs	r0, #0
 80010e6:	f7ff ff2d 	bl	8000f44 <LCD_Write_DATA>
LCD_Write_DATA(0x00);
 80010ea:	2000      	movs	r0, #0
 80010ec:	f7ff ff2a 	bl	8000f44 <LCD_Write_DATA>
LCD_Write_DATA(0x03);		//Set HDP	799
 80010f0:	2003      	movs	r0, #3
 80010f2:	f7ff ff27 	bl	8000f44 <LCD_Write_DATA>
LCD_Write_DATA(0x1F);
 80010f6:	201f      	movs	r0, #31
 80010f8:	f7ff ff24 	bl	8000f44 <LCD_Write_DATA>
LCD_Write_DATA(0x01);		//Set VDP	479
 80010fc:	2001      	movs	r0, #1
 80010fe:	f7ff ff21 	bl	8000f44 <LCD_Write_DATA>
LCD_Write_DATA(0xDF);
 8001102:	20df      	movs	r0, #223	; 0xdf
 8001104:	f7ff ff1e 	bl	8000f44 <LCD_Write_DATA>
LCD_Write_DATA(0x00);
 8001108:	2000      	movs	r0, #0
 800110a:	f7ff ff1b 	bl	8000f44 <LCD_Write_DATA>

LCD_Write_COM(0xB4);		//HSYNC
 800110e:	20b4      	movs	r0, #180	; 0xb4
 8001110:	f7ff ff28 	bl	8000f64 <LCD_Write_COM>
LCD_Write_DATA(0x03);		//Set HT	928
 8001114:	2003      	movs	r0, #3
 8001116:	f7ff ff15 	bl	8000f44 <LCD_Write_DATA>
LCD_Write_DATA(0xA0);
 800111a:	20a0      	movs	r0, #160	; 0xa0
 800111c:	f7ff ff12 	bl	8000f44 <LCD_Write_DATA>
LCD_Write_DATA(0x00);		//Set HPS	46
 8001120:	2000      	movs	r0, #0
 8001122:	f7ff ff0f 	bl	8000f44 <LCD_Write_DATA>
LCD_Write_DATA(0x2E);
 8001126:	202e      	movs	r0, #46	; 0x2e
 8001128:	f7ff ff0c 	bl	8000f44 <LCD_Write_DATA>
LCD_Write_DATA(0x30);		//Set HPW	48
 800112c:	2030      	movs	r0, #48	; 0x30
 800112e:	f7ff ff09 	bl	8000f44 <LCD_Write_DATA>
LCD_Write_DATA(0x00);		//Set LPS	15
 8001132:	2000      	movs	r0, #0
 8001134:	f7ff ff06 	bl	8000f44 <LCD_Write_DATA>
LCD_Write_DATA(0x0F);
 8001138:	200f      	movs	r0, #15
 800113a:	f7ff ff03 	bl	8000f44 <LCD_Write_DATA>
LCD_Write_DATA(0x00);
 800113e:	2000      	movs	r0, #0
 8001140:	f7ff ff00 	bl	8000f44 <LCD_Write_DATA>

LCD_Write_COM(0xB6);		//VSYNC
 8001144:	20b6      	movs	r0, #182	; 0xb6
 8001146:	f7ff ff0d 	bl	8000f64 <LCD_Write_COM>
LCD_Write_DATA(0x02);		//Set VT	525
 800114a:	2002      	movs	r0, #2
 800114c:	f7ff fefa 	bl	8000f44 <LCD_Write_DATA>
LCD_Write_DATA(0x0D);
 8001150:	200d      	movs	r0, #13
 8001152:	f7ff fef7 	bl	8000f44 <LCD_Write_DATA>
LCD_Write_DATA(0x00);		//Set VPS	16
 8001156:	2000      	movs	r0, #0
 8001158:	f7ff fef4 	bl	8000f44 <LCD_Write_DATA>
LCD_Write_DATA(0x10);
 800115c:	2010      	movs	r0, #16
 800115e:	f7ff fef1 	bl	8000f44 <LCD_Write_DATA>
LCD_Write_DATA(0x10);		//Set VPW	16
 8001162:	2010      	movs	r0, #16
 8001164:	f7ff feee 	bl	8000f44 <LCD_Write_DATA>
LCD_Write_DATA(0x00);		//Set FPS	8
 8001168:	2000      	movs	r0, #0
 800116a:	f7ff feeb 	bl	8000f44 <LCD_Write_DATA>
LCD_Write_DATA(0x08);
 800116e:	2008      	movs	r0, #8
 8001170:	f7ff fee8 	bl	8000f44 <LCD_Write_DATA>

LCD_Write_COM(0xBA);
 8001174:	20ba      	movs	r0, #186	; 0xba
 8001176:	f7ff fef5 	bl	8000f64 <LCD_Write_COM>
LCD_Write_DATA(0x05);		//GPIO[3:0] out 1
 800117a:	2005      	movs	r0, #5
 800117c:	f7ff fee2 	bl	8000f44 <LCD_Write_DATA>

LCD_Write_COM(0xB8);
 8001180:	20b8      	movs	r0, #184	; 0xb8
 8001182:	f7ff feef 	bl	8000f64 <LCD_Write_COM>
LCD_Write_DATA(0x07);	    //GPIO3=input, GPIO[2:0]=output
 8001186:	2007      	movs	r0, #7
 8001188:	f7ff fedc 	bl	8000f44 <LCD_Write_DATA>
LCD_Write_DATA(0x01);		//GPIO0 normal
 800118c:	2001      	movs	r0, #1
 800118e:	f7ff fed9 	bl	8000f44 <LCD_Write_DATA>

//LCD_Write_COM(0x36);		//rotation
//LCD_Write_DATA(0x21);		// -- Set to 0x22 to rotate 180 degrees 0x21

LCD_Write_COM(0xba);		//rotation
 8001192:	20ba      	movs	r0, #186	; 0xba
 8001194:	f7ff fee6 	bl	8000f64 <LCD_Write_COM>
LCD_Write_DATA(0x01);		// -- Set to 0x22 to rotate 180 degrees 0x21
 8001198:	2001      	movs	r0, #1
 800119a:	f7ff fed3 	bl	8000f44 <LCD_Write_DATA>


LCD_Write_COM(0xF0);		//pixel data interface
 800119e:	20f0      	movs	r0, #240	; 0xf0
 80011a0:	f7ff fee0 	bl	8000f64 <LCD_Write_COM>
LCD_Write_DATA(0x03);
 80011a4:	2003      	movs	r0, #3
 80011a6:	f7ff fecd 	bl	8000f44 <LCD_Write_DATA>


HAL_Delay(10);
 80011aa:	200a      	movs	r0, #10
 80011ac:	f002 fbd2 	bl	8003954 <HAL_Delay>
//Lcd_Write_Data(0x00);//SET start page address=0
//Lcd_Write_Data(0x00);
//Lcd_Write_Data(0x01);//SET end page address=479
//Lcd_Write_Data(0xdf);  //1f

LCD_Write_COM(0x29);		//display on
 80011b0:	2029      	movs	r0, #41	; 0x29
 80011b2:	f7ff fed7 	bl	8000f64 <LCD_Write_COM>

LCD_Write_COM(0xBE);		//set PWM for B/L
 80011b6:	20be      	movs	r0, #190	; 0xbe
 80011b8:	f7ff fed4 	bl	8000f64 <LCD_Write_COM>
LCD_Write_DATA(0x06);
 80011bc:	2006      	movs	r0, #6
 80011be:	f7ff fec1 	bl	8000f44 <LCD_Write_DATA>
LCD_Write_DATA(0xF0);
 80011c2:	20f0      	movs	r0, #240	; 0xf0
 80011c4:	f7ff febe 	bl	8000f44 <LCD_Write_DATA>
LCD_Write_DATA(0x01);
 80011c8:	2001      	movs	r0, #1
 80011ca:	f7ff febb 	bl	8000f44 <LCD_Write_DATA>
LCD_Write_DATA(0xF0);
 80011ce:	20f0      	movs	r0, #240	; 0xf0
 80011d0:	f7ff feb8 	bl	8000f44 <LCD_Write_DATA>
LCD_Write_DATA(0x00);
 80011d4:	2000      	movs	r0, #0
 80011d6:	f7ff feb5 	bl	8000f44 <LCD_Write_DATA>
LCD_Write_DATA(0x00);
 80011da:	2000      	movs	r0, #0
 80011dc:	f7ff feb2 	bl	8000f44 <LCD_Write_DATA>

LCD_Write_COM(0xD0);
 80011e0:	20d0      	movs	r0, #208	; 0xd0
 80011e2:	f7ff febf 	bl	8000f64 <LCD_Write_COM>
LCD_Write_DATA(0x0D);
 80011e6:	200d      	movs	r0, #13
 80011e8:	f7ff feac 	bl	8000f44 <LCD_Write_DATA>

LCD_Write_COM(0x2C);
 80011ec:	202c      	movs	r0, #44	; 0x2c
 80011ee:	f7ff feb9 	bl	8000f64 <LCD_Write_COM>


}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40021000 	.word	0x40021000

080011fc <TFT_Send_Cmd>:
//===========================================================================
//===========================================================================
//�-��� ��� �������� ������
//static __inline  - not work before define of function 
void 	TFT_Send_Cmd(uint8_t index)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
	*(uint8_t *) (LCD_REG) = index;	  
 8001206:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	7013      	strb	r3, [r2, #0]
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <TFT_Write_Data>:

//�-��� ��� �������� ������
void TFT_Write_Data(uint16_t data)
{   
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	80fb      	strh	r3, [r7, #6]
    *(uint16_t *) (LCD_DATA) = data; 	
 8001226:	4a04      	ldr	r2, [pc, #16]	; (8001238 <TFT_Write_Data+0x1c>)
 8001228:	88fb      	ldrh	r3, [r7, #6]
 800122a:	8013      	strh	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	60020000 	.word	0x60020000

0800123c <TFT_Set_X>:
//�-��� ������������� ������� ������� �� X
void TFT_Set_X(uint16_t start_x,uint16_t end_x)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	460a      	mov	r2, r1
 8001246:	80fb      	strh	r3, [r7, #6]
 8001248:	4613      	mov	r3, r2
 800124a:	80bb      	strh	r3, [r7, #4]
	TFT_Send_Cmd(0x002A);
 800124c:	202a      	movs	r0, #42	; 0x2a
 800124e:	f7ff ffd5 	bl	80011fc <TFT_Send_Cmd>
	TFT_Write_Data(start_x>>8);
 8001252:	88fb      	ldrh	r3, [r7, #6]
 8001254:	0a1b      	lsrs	r3, r3, #8
 8001256:	b29b      	uxth	r3, r3
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ffdf 	bl	800121c <TFT_Write_Data>
	TFT_Write_Data(start_x&0x00ff);
 800125e:	88fb      	ldrh	r3, [r7, #6]
 8001260:	b2db      	uxtb	r3, r3
 8001262:	b29b      	uxth	r3, r3
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ffd9 	bl	800121c <TFT_Write_Data>
	
	TFT_Write_Data(end_x>>8);
 800126a:	88bb      	ldrh	r3, [r7, #4]
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	b29b      	uxth	r3, r3
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ffd3 	bl	800121c <TFT_Write_Data>
	TFT_Write_Data(end_x&0x00ff);
 8001276:	88bb      	ldrh	r3, [r7, #4]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	b29b      	uxth	r3, r3
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ffcd 	bl	800121c <TFT_Write_Data>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <TFT_Set_Y>:

//�-��� ������������� ������� ������� �� Y
void TFT_Set_Y(uint16_t start_y,uint16_t end_y)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	4603      	mov	r3, r0
 8001292:	460a      	mov	r2, r1
 8001294:	80fb      	strh	r3, [r7, #6]
 8001296:	4613      	mov	r3, r2
 8001298:	80bb      	strh	r3, [r7, #4]
	TFT_Send_Cmd(0x002B);
 800129a:	202b      	movs	r0, #43	; 0x2b
 800129c:	f7ff ffae 	bl	80011fc <TFT_Send_Cmd>
	TFT_Write_Data(start_y>>8);
 80012a0:	88fb      	ldrh	r3, [r7, #6]
 80012a2:	0a1b      	lsrs	r3, r3, #8
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ffb8 	bl	800121c <TFT_Write_Data>
	TFT_Write_Data(start_y&0x00ff);
 80012ac:	88fb      	ldrh	r3, [r7, #6]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff ffb2 	bl	800121c <TFT_Write_Data>
	
	TFT_Write_Data(end_y>>8);
 80012b8:	88bb      	ldrh	r3, [r7, #4]
 80012ba:	0a1b      	lsrs	r3, r3, #8
 80012bc:	b29b      	uxth	r3, r3
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff ffac 	bl	800121c <TFT_Write_Data>
	TFT_Write_Data(end_y&0x00ff);
 80012c4:	88bb      	ldrh	r3, [r7, #4]
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ffa6 	bl	800121c <TFT_Write_Data>
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <TFT_Set_Work_Area>:
}


//�-���  ������ ���������� ������� �������
void TFT_Set_Work_Area(uint16_t x, uint16_t y, uint16_t length, uint16_t width)
{
 80012d8:	b590      	push	{r4, r7, lr}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4604      	mov	r4, r0
 80012e0:	4608      	mov	r0, r1
 80012e2:	4611      	mov	r1, r2
 80012e4:	461a      	mov	r2, r3
 80012e6:	4623      	mov	r3, r4
 80012e8:	80fb      	strh	r3, [r7, #6]
 80012ea:	4603      	mov	r3, r0
 80012ec:	80bb      	strh	r3, [r7, #4]
 80012ee:	460b      	mov	r3, r1
 80012f0:	807b      	strh	r3, [r7, #2]
 80012f2:	4613      	mov	r3, r2
 80012f4:	803b      	strh	r3, [r7, #0]
	TFT_Set_X(x, x+length-1);
 80012f6:	88fa      	ldrh	r2, [r7, #6]
 80012f8:	887b      	ldrh	r3, [r7, #2]
 80012fa:	4413      	add	r3, r2
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	3b01      	subs	r3, #1
 8001300:	b29a      	uxth	r2, r3
 8001302:	88fb      	ldrh	r3, [r7, #6]
 8001304:	4611      	mov	r1, r2
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff ff98 	bl	800123c <TFT_Set_X>
	TFT_Set_Y(y, y+width-1);
 800130c:	88ba      	ldrh	r2, [r7, #4]
 800130e:	883b      	ldrh	r3, [r7, #0]
 8001310:	4413      	add	r3, r2
 8001312:	b29b      	uxth	r3, r3
 8001314:	3b01      	subs	r3, #1
 8001316:	b29a      	uxth	r2, r3
 8001318:	88bb      	ldrh	r3, [r7, #4]
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ffb4 	bl	800128a <TFT_Set_Y>
	TFT_Send_Cmd(0x2C);
 8001322:	202c      	movs	r0, #44	; 0x2c
 8001324:	f7ff ff6a 	bl	80011fc <TFT_Send_Cmd>
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	bd90      	pop	{r4, r7, pc}

08001330 <TFT_Clear_Screen>:

//�-��� ����������� ������� ��������� ������
void TFT_Clear_Screen(uint16_t color)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	80fb      	strh	r3, [r7, #6]
	uint32_t i=0;
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
	TFT_Set_Work_Area(0,0,800,480);
 800133e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001342:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001346:	2100      	movs	r1, #0
 8001348:	2000      	movs	r0, #0
 800134a:	f7ff ffc5 	bl	80012d8 <TFT_Set_Work_Area>
	for(i=0; i < 384000; i++)
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	e006      	b.n	8001362 <TFT_Clear_Screen+0x32>
	{
		TFT_Write_Data(color);	//������� ��������� �����
 8001354:	88fb      	ldrh	r3, [r7, #6]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff ff60 	bl	800121c <TFT_Write_Data>
	for(i=0; i < 384000; i++)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	3301      	adds	r3, #1
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4a03      	ldr	r2, [pc, #12]	; (8001374 <TFT_Clear_Screen+0x44>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d9f4      	bls.n	8001354 <TFT_Clear_Screen+0x24>
	}
}
 800136a:	bf00      	nop
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	0005dbff 	.word	0x0005dbff

08001378 <TFT_Draw_Line>:
	}
}

//�-��� ������ ����� ��������� ����� � �������
void TFT_Draw_Line (uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2, uint8_t size,uint16_t color)
{
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b08b      	sub	sp, #44	; 0x2c
 800137c:	af02      	add	r7, sp, #8
 800137e:	4604      	mov	r4, r0
 8001380:	4608      	mov	r0, r1
 8001382:	4611      	mov	r1, r2
 8001384:	461a      	mov	r2, r3
 8001386:	4623      	mov	r3, r4
 8001388:	80fb      	strh	r3, [r7, #6]
 800138a:	4603      	mov	r3, r0
 800138c:	80bb      	strh	r3, [r7, #4]
 800138e:	460b      	mov	r3, r1
 8001390:	807b      	strh	r3, [r7, #2]
 8001392:	4613      	mov	r3, r2
 8001394:	803b      	strh	r3, [r7, #0]
	int deltaX = abs(x2 - x1);
 8001396:	887a      	ldrh	r2, [r7, #2]
 8001398:	88fb      	ldrh	r3, [r7, #6]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b00      	cmp	r3, #0
 800139e:	bfb8      	it	lt
 80013a0:	425b      	neglt	r3, r3
 80013a2:	61bb      	str	r3, [r7, #24]
	int deltaY = abs(y2 - y1);
 80013a4:	883a      	ldrh	r2, [r7, #0]
 80013a6:	88bb      	ldrh	r3, [r7, #4]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	bfb8      	it	lt
 80013ae:	425b      	neglt	r3, r3
 80013b0:	617b      	str	r3, [r7, #20]
	int signX = x1 < x2 ? 1 : -1;
 80013b2:	88fa      	ldrh	r2, [r7, #6]
 80013b4:	887b      	ldrh	r3, [r7, #2]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d201      	bcs.n	80013be <TFT_Draw_Line+0x46>
 80013ba:	2301      	movs	r3, #1
 80013bc:	e001      	b.n	80013c2 <TFT_Draw_Line+0x4a>
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	613b      	str	r3, [r7, #16]
	int signY = y1 < y2 ? 1 : -1;
 80013c4:	88ba      	ldrh	r2, [r7, #4]
 80013c6:	883b      	ldrh	r3, [r7, #0]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d201      	bcs.n	80013d0 <TFT_Draw_Line+0x58>
 80013cc:	2301      	movs	r3, #1
 80013ce:	e001      	b.n	80013d4 <TFT_Draw_Line+0x5c>
 80013d0:	f04f 33ff 	mov.w	r3, #4294967295
 80013d4:	60fb      	str	r3, [r7, #12]
	int error = deltaX - deltaY;
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	61fb      	str	r3, [r7, #28]
	int error2 = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	60bb      	str	r3, [r7, #8]
	
	for (;;)
	{
		TFT_Draw_Fill_Rectangle(x1,y1,size,size,color);
 80013e2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80013ec:	b29c      	uxth	r4, r3
 80013ee:	88b9      	ldrh	r1, [r7, #4]
 80013f0:	88f8      	ldrh	r0, [r7, #6]
 80013f2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	4623      	mov	r3, r4
 80013f8:	f000 f8cb 	bl	8001592 <TFT_Draw_Fill_Rectangle>
		
		if(x1 == x2 && y1 == y2)
 80013fc:	88fa      	ldrh	r2, [r7, #6]
 80013fe:	887b      	ldrh	r3, [r7, #2]
 8001400:	429a      	cmp	r2, r3
 8001402:	d103      	bne.n	800140c <TFT_Draw_Line+0x94>
 8001404:	88ba      	ldrh	r2, [r7, #4]
 8001406:	883b      	ldrh	r3, [r7, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d01e      	beq.n	800144a <TFT_Draw_Line+0xd2>
		break;
		
		error2 = error * 2;
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	60bb      	str	r3, [r7, #8]
		
		if(error2 > -deltaY)
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	425b      	negs	r3, r3
 8001416:	68ba      	ldr	r2, [r7, #8]
 8001418:	429a      	cmp	r2, r3
 800141a:	dd08      	ble.n	800142e <TFT_Draw_Line+0xb6>
		{
			error -= deltaY;
 800141c:	69fa      	ldr	r2, [r7, #28]
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	61fb      	str	r3, [r7, #28]
			x1 += signX;
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	b29a      	uxth	r2, r3
 8001428:	88fb      	ldrh	r3, [r7, #6]
 800142a:	4413      	add	r3, r2
 800142c:	80fb      	strh	r3, [r7, #6]
		}
		
		if(error2 < deltaX)
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	429a      	cmp	r2, r3
 8001434:	dad5      	bge.n	80013e2 <TFT_Draw_Line+0x6a>
		{
			error += deltaX;
 8001436:	69fa      	ldr	r2, [r7, #28]
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	4413      	add	r3, r2
 800143c:	61fb      	str	r3, [r7, #28]
			y1 += signY;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	b29a      	uxth	r2, r3
 8001442:	88bb      	ldrh	r3, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	80bb      	strh	r3, [r7, #4]
		TFT_Draw_Fill_Rectangle(x1,y1,size,size,color);
 8001448:	e7cb      	b.n	80013e2 <TFT_Draw_Line+0x6a>
		break;
 800144a:	bf00      	nop
		}
	}
}
 800144c:	bf00      	nop
 800144e:	3724      	adds	r7, #36	; 0x24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd90      	pop	{r4, r7, pc}

08001454 <TFT_Draw_HLine>:

//�-��� ������ �������������� �����, ��������� �����, ������� � �����
void TFT_Draw_HLine(uint16_t x, uint16_t y, uint16_t length, uint16_t size, uint16_t color)
{
 8001454:	b590      	push	{r4, r7, lr}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	4604      	mov	r4, r0
 800145c:	4608      	mov	r0, r1
 800145e:	4611      	mov	r1, r2
 8001460:	461a      	mov	r2, r3
 8001462:	4623      	mov	r3, r4
 8001464:	80fb      	strh	r3, [r7, #6]
 8001466:	4603      	mov	r3, r0
 8001468:	80bb      	strh	r3, [r7, #4]
 800146a:	460b      	mov	r3, r1
 800146c:	807b      	strh	r3, [r7, #2]
 800146e:	4613      	mov	r3, r2
 8001470:	803b      	strh	r3, [r7, #0]
	uint16_t i=0;
 8001472:	2300      	movs	r3, #0
 8001474:	81fb      	strh	r3, [r7, #14]
	
	TFT_Set_Work_Area(x,y,length,size);
 8001476:	883b      	ldrh	r3, [r7, #0]
 8001478:	887a      	ldrh	r2, [r7, #2]
 800147a:	88b9      	ldrh	r1, [r7, #4]
 800147c:	88f8      	ldrh	r0, [r7, #6]
 800147e:	f7ff ff2b 	bl	80012d8 <TFT_Set_Work_Area>
	for(i=0; i<(length*size); i++)
 8001482:	2300      	movs	r3, #0
 8001484:	81fb      	strh	r3, [r7, #14]
 8001486:	e006      	b.n	8001496 <TFT_Draw_HLine+0x42>
	TFT_Write_Data(color);
 8001488:	8c3b      	ldrh	r3, [r7, #32]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fec6 	bl	800121c <TFT_Write_Data>
	for(i=0; i<(length*size); i++)
 8001490:	89fb      	ldrh	r3, [r7, #14]
 8001492:	3301      	adds	r3, #1
 8001494:	81fb      	strh	r3, [r7, #14]
 8001496:	89fa      	ldrh	r2, [r7, #14]
 8001498:	887b      	ldrh	r3, [r7, #2]
 800149a:	8839      	ldrh	r1, [r7, #0]
 800149c:	fb01 f303 	mul.w	r3, r1, r3
 80014a0:	429a      	cmp	r2, r3
 80014a2:	dbf1      	blt.n	8001488 <TFT_Draw_HLine+0x34>
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd90      	pop	{r4, r7, pc}

080014ae <TFT_Draw_VLine>:

//�-��� ������ ������������ �����, ��������� �����, ������� � �����
void TFT_Draw_VLine(uint16_t x, uint16_t y, uint16_t length, uint16_t size, uint16_t color)
{
 80014ae:	b590      	push	{r4, r7, lr}
 80014b0:	b085      	sub	sp, #20
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4604      	mov	r4, r0
 80014b6:	4608      	mov	r0, r1
 80014b8:	4611      	mov	r1, r2
 80014ba:	461a      	mov	r2, r3
 80014bc:	4623      	mov	r3, r4
 80014be:	80fb      	strh	r3, [r7, #6]
 80014c0:	4603      	mov	r3, r0
 80014c2:	80bb      	strh	r3, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	807b      	strh	r3, [r7, #2]
 80014c8:	4613      	mov	r3, r2
 80014ca:	803b      	strh	r3, [r7, #0]
	uint16_t i=0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	81fb      	strh	r3, [r7, #14]
	
	TFT_Set_Work_Area(x,y,size,length);
 80014d0:	887b      	ldrh	r3, [r7, #2]
 80014d2:	883a      	ldrh	r2, [r7, #0]
 80014d4:	88b9      	ldrh	r1, [r7, #4]
 80014d6:	88f8      	ldrh	r0, [r7, #6]
 80014d8:	f7ff fefe 	bl	80012d8 <TFT_Set_Work_Area>
	for(i=0; i<(length*size); i++)
 80014dc:	2300      	movs	r3, #0
 80014de:	81fb      	strh	r3, [r7, #14]
 80014e0:	e006      	b.n	80014f0 <TFT_Draw_VLine+0x42>
	TFT_Write_Data(color);
 80014e2:	8c3b      	ldrh	r3, [r7, #32]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fe99 	bl	800121c <TFT_Write_Data>
	for(i=0; i<(length*size); i++)
 80014ea:	89fb      	ldrh	r3, [r7, #14]
 80014ec:	3301      	adds	r3, #1
 80014ee:	81fb      	strh	r3, [r7, #14]
 80014f0:	89fa      	ldrh	r2, [r7, #14]
 80014f2:	887b      	ldrh	r3, [r7, #2]
 80014f4:	8839      	ldrh	r1, [r7, #0]
 80014f6:	fb01 f303 	mul.w	r3, r1, r3
 80014fa:	429a      	cmp	r2, r3
 80014fc:	dbf1      	blt.n	80014e2 <TFT_Draw_VLine+0x34>
}
 80014fe:	bf00      	nop
 8001500:	bf00      	nop
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	bd90      	pop	{r4, r7, pc}

08001508 <TFT_Draw_Rectangle>:

//�-��� ������ �������������, ��������� �����, ������, ������� ����� � �����
void TFT_Draw_Rectangle(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint8_t size, uint16_t color)
{
 8001508:	b590      	push	{r4, r7, lr}
 800150a:	b085      	sub	sp, #20
 800150c:	af02      	add	r7, sp, #8
 800150e:	4604      	mov	r4, r0
 8001510:	4608      	mov	r0, r1
 8001512:	4611      	mov	r1, r2
 8001514:	461a      	mov	r2, r3
 8001516:	4623      	mov	r3, r4
 8001518:	80fb      	strh	r3, [r7, #6]
 800151a:	4603      	mov	r3, r0
 800151c:	80bb      	strh	r3, [r7, #4]
 800151e:	460b      	mov	r3, r1
 8001520:	807b      	strh	r3, [r7, #2]
 8001522:	4613      	mov	r3, r2
 8001524:	803b      	strh	r3, [r7, #0]
	TFT_Draw_HLine(x, y, length, size, color);
 8001526:	7e3b      	ldrb	r3, [r7, #24]
 8001528:	b29c      	uxth	r4, r3
 800152a:	887a      	ldrh	r2, [r7, #2]
 800152c:	88b9      	ldrh	r1, [r7, #4]
 800152e:	88f8      	ldrh	r0, [r7, #6]
 8001530:	8bbb      	ldrh	r3, [r7, #28]
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	4623      	mov	r3, r4
 8001536:	f7ff ff8d 	bl	8001454 <TFT_Draw_HLine>
	TFT_Draw_HLine(x, y + width, length, size, color);
 800153a:	88ba      	ldrh	r2, [r7, #4]
 800153c:	883b      	ldrh	r3, [r7, #0]
 800153e:	4413      	add	r3, r2
 8001540:	b299      	uxth	r1, r3
 8001542:	7e3b      	ldrb	r3, [r7, #24]
 8001544:	b29c      	uxth	r4, r3
 8001546:	887a      	ldrh	r2, [r7, #2]
 8001548:	88f8      	ldrh	r0, [r7, #6]
 800154a:	8bbb      	ldrh	r3, [r7, #28]
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	4623      	mov	r3, r4
 8001550:	f7ff ff80 	bl	8001454 <TFT_Draw_HLine>
	TFT_Draw_VLine(x, y, width, size, color);
 8001554:	7e3b      	ldrb	r3, [r7, #24]
 8001556:	b29c      	uxth	r4, r3
 8001558:	883a      	ldrh	r2, [r7, #0]
 800155a:	88b9      	ldrh	r1, [r7, #4]
 800155c:	88f8      	ldrh	r0, [r7, #6]
 800155e:	8bbb      	ldrh	r3, [r7, #28]
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	4623      	mov	r3, r4
 8001564:	f7ff ffa3 	bl	80014ae <TFT_Draw_VLine>
	TFT_Draw_VLine(x + length - size, y, width, size, color);
 8001568:	88fa      	ldrh	r2, [r7, #6]
 800156a:	887b      	ldrh	r3, [r7, #2]
 800156c:	4413      	add	r3, r2
 800156e:	b29a      	uxth	r2, r3
 8001570:	7e3b      	ldrb	r3, [r7, #24]
 8001572:	b29b      	uxth	r3, r3
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	b298      	uxth	r0, r3
 8001578:	7e3b      	ldrb	r3, [r7, #24]
 800157a:	b29c      	uxth	r4, r3
 800157c:	883a      	ldrh	r2, [r7, #0]
 800157e:	88b9      	ldrh	r1, [r7, #4]
 8001580:	8bbb      	ldrh	r3, [r7, #28]
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	4623      	mov	r3, r4
 8001586:	f7ff ff92 	bl	80014ae <TFT_Draw_VLine>
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	bd90      	pop	{r4, r7, pc}

08001592 <TFT_Draw_Fill_Rectangle>:

//�-��� ������ ����������� �������������, ��������� �����, ������, �����
void TFT_Draw_Fill_Rectangle(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t color)
{
 8001592:	b590      	push	{r4, r7, lr}
 8001594:	b085      	sub	sp, #20
 8001596:	af00      	add	r7, sp, #0
 8001598:	4604      	mov	r4, r0
 800159a:	4608      	mov	r0, r1
 800159c:	4611      	mov	r1, r2
 800159e:	461a      	mov	r2, r3
 80015a0:	4623      	mov	r3, r4
 80015a2:	80fb      	strh	r3, [r7, #6]
 80015a4:	4603      	mov	r3, r0
 80015a6:	80bb      	strh	r3, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	807b      	strh	r3, [r7, #2]
 80015ac:	4613      	mov	r3, r2
 80015ae:	803b      	strh	r3, [r7, #0]
	uint32_t i=0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
	
	TFT_Set_Work_Area(x,y,length, width);
 80015b4:	883b      	ldrh	r3, [r7, #0]
 80015b6:	887a      	ldrh	r2, [r7, #2]
 80015b8:	88b9      	ldrh	r1, [r7, #4]
 80015ba:	88f8      	ldrh	r0, [r7, #6]
 80015bc:	f7ff fe8c 	bl	80012d8 <TFT_Set_Work_Area>
	for(i=0; i < length*width; i++)
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	e006      	b.n	80015d4 <TFT_Draw_Fill_Rectangle+0x42>
	{
		TFT_Write_Data(color);	//������� ��������� �����
 80015c6:	8c3b      	ldrh	r3, [r7, #32]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fe27 	bl	800121c <TFT_Write_Data>
	for(i=0; i < length*width; i++)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	3301      	adds	r3, #1
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	887b      	ldrh	r3, [r7, #2]
 80015d6:	883a      	ldrh	r2, [r7, #0]
 80015d8:	fb02 f303 	mul.w	r3, r2, r3
 80015dc:	461a      	mov	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d3f0      	bcc.n	80015c6 <TFT_Draw_Fill_Rectangle+0x34>
	}
}
 80015e4:	bf00      	nop
 80015e6:	bf00      	nop
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd90      	pop	{r4, r7, pc}

080015ee <TFT_Draw_Circle>:
}

//�-��� ������ ���������� ������� �������, ������ �������� ������� � ��������� ������, ����� �������� 
//������ ���������� ������ ������ ��� ����� ���������� �������� fill ������ �������, ����� ����
void TFT_Draw_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint16_t color)
{
 80015ee:	b590      	push	{r4, r7, lr}
 80015f0:	b089      	sub	sp, #36	; 0x24
 80015f2:	af02      	add	r7, sp, #8
 80015f4:	4604      	mov	r4, r0
 80015f6:	4608      	mov	r0, r1
 80015f8:	4611      	mov	r1, r2
 80015fa:	461a      	mov	r2, r3
 80015fc:	4623      	mov	r3, r4
 80015fe:	80fb      	strh	r3, [r7, #6]
 8001600:	4603      	mov	r3, r0
 8001602:	80bb      	strh	r3, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	70fb      	strb	r3, [r7, #3]
 8001608:	4613      	mov	r3, r2
 800160a:	70bb      	strb	r3, [r7, #2]
	int a_,b_,P;
	a_ = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
	b_ = radius;
 8001610:	78fb      	ldrb	r3, [r7, #3]
 8001612:	613b      	str	r3, [r7, #16]
	P = 1 - radius;
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	f1c3 0301 	rsb	r3, r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
	while (a_ <= b_)
 800161c:	e0fc      	b.n	8001818 <TFT_Draw_Circle+0x22a>
	{
		if(fill == 1)
 800161e:	78bb      	ldrb	r3, [r7, #2]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d136      	bne.n	8001692 <TFT_Draw_Circle+0xa4>
		{
			TFT_Draw_Fill_Rectangle(x-a_,y-b_,2*a_+1,2*b_+1,color);
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	b29b      	uxth	r3, r3
 8001628:	88fa      	ldrh	r2, [r7, #6]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	b298      	uxth	r0, r3
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	b29b      	uxth	r3, r3
 8001632:	88ba      	ldrh	r2, [r7, #4]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	b299      	uxth	r1, r3
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	b29b      	uxth	r3, r3
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	b29b      	uxth	r3, r3
 8001640:	3301      	adds	r3, #1
 8001642:	b29a      	uxth	r2, r3
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	b29b      	uxth	r3, r3
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	b29b      	uxth	r3, r3
 800164c:	3301      	adds	r3, #1
 800164e:	b29c      	uxth	r4, r3
 8001650:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	4623      	mov	r3, r4
 8001656:	f7ff ff9c 	bl	8001592 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(x-b_,y-a_,2*b_+1,2*a_+1,color);
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	b29b      	uxth	r3, r3
 800165e:	88fa      	ldrh	r2, [r7, #6]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	b298      	uxth	r0, r3
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	b29b      	uxth	r3, r3
 8001668:	88ba      	ldrh	r2, [r7, #4]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	b299      	uxth	r1, r3
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	b29b      	uxth	r3, r3
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	b29b      	uxth	r3, r3
 8001676:	3301      	adds	r3, #1
 8001678:	b29a      	uxth	r2, r3
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	b29b      	uxth	r3, r3
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	b29b      	uxth	r3, r3
 8001682:	3301      	adds	r3, #1
 8001684:	b29c      	uxth	r4, r3
 8001686:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	4623      	mov	r3, r4
 800168c:	f7ff ff81 	bl	8001592 <TFT_Draw_Fill_Rectangle>
 8001690:	e0a7      	b.n	80017e2 <TFT_Draw_Circle+0x1f4>
		}
		else
		{
			TFT_Draw_Fill_Rectangle(a_+x, b_+y, size, size, color);
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	b29a      	uxth	r2, r3
 8001696:	88fb      	ldrh	r3, [r7, #6]
 8001698:	4413      	add	r3, r2
 800169a:	b298      	uxth	r0, r3
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	b29a      	uxth	r2, r3
 80016a0:	88bb      	ldrh	r3, [r7, #4]
 80016a2:	4413      	add	r3, r2
 80016a4:	b299      	uxth	r1, r3
 80016a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80016b0:	b29c      	uxth	r4, r3
 80016b2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80016b4:	9300      	str	r3, [sp, #0]
 80016b6:	4623      	mov	r3, r4
 80016b8:	f7ff ff6b 	bl	8001592 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(b_+x, a_+y, size, size, color);
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	b29a      	uxth	r2, r3
 80016c0:	88fb      	ldrh	r3, [r7, #6]
 80016c2:	4413      	add	r3, r2
 80016c4:	b298      	uxth	r0, r3
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	88bb      	ldrh	r3, [r7, #4]
 80016cc:	4413      	add	r3, r2
 80016ce:	b299      	uxth	r1, r3
 80016d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80016da:	b29c      	uxth	r4, r3
 80016dc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	4623      	mov	r3, r4
 80016e2:	f7ff ff56 	bl	8001592 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(x-a_, b_+y, size, size, color);
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	88fa      	ldrh	r2, [r7, #6]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	b298      	uxth	r0, r3
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	88bb      	ldrh	r3, [r7, #4]
 80016f6:	4413      	add	r3, r2
 80016f8:	b299      	uxth	r1, r3
 80016fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80016fe:	b29a      	uxth	r2, r3
 8001700:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001704:	b29c      	uxth	r4, r3
 8001706:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	4623      	mov	r3, r4
 800170c:	f7ff ff41 	bl	8001592 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(x-b_, a_+y, size, size, color);
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	b29b      	uxth	r3, r3
 8001714:	88fa      	ldrh	r2, [r7, #6]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	b298      	uxth	r0, r3
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	b29a      	uxth	r2, r3
 800171e:	88bb      	ldrh	r3, [r7, #4]
 8001720:	4413      	add	r3, r2
 8001722:	b299      	uxth	r1, r3
 8001724:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001728:	b29a      	uxth	r2, r3
 800172a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800172e:	b29c      	uxth	r4, r3
 8001730:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	4623      	mov	r3, r4
 8001736:	f7ff ff2c 	bl	8001592 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(b_+x, y-a_, size, size, color);
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	b29a      	uxth	r2, r3
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	4413      	add	r3, r2
 8001742:	b298      	uxth	r0, r3
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	b29b      	uxth	r3, r3
 8001748:	88ba      	ldrh	r2, [r7, #4]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	b299      	uxth	r1, r3
 800174e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001752:	b29a      	uxth	r2, r3
 8001754:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001758:	b29c      	uxth	r4, r3
 800175a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	4623      	mov	r3, r4
 8001760:	f7ff ff17 	bl	8001592 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(a_+x, y-b_, size, size, color);
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	b29a      	uxth	r2, r3
 8001768:	88fb      	ldrh	r3, [r7, #6]
 800176a:	4413      	add	r3, r2
 800176c:	b298      	uxth	r0, r3
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	b29b      	uxth	r3, r3
 8001772:	88ba      	ldrh	r2, [r7, #4]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	b299      	uxth	r1, r3
 8001778:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800177c:	b29a      	uxth	r2, r3
 800177e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001782:	b29c      	uxth	r4, r3
 8001784:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	4623      	mov	r3, r4
 800178a:	f7ff ff02 	bl	8001592 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(x-a_, y-b_, size, size, color);
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	b29b      	uxth	r3, r3
 8001792:	88fa      	ldrh	r2, [r7, #6]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	b298      	uxth	r0, r3
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	b29b      	uxth	r3, r3
 800179c:	88ba      	ldrh	r2, [r7, #4]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	b299      	uxth	r1, r3
 80017a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80017ac:	b29c      	uxth	r4, r3
 80017ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	4623      	mov	r3, r4
 80017b4:	f7ff feed 	bl	8001592 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(x-b_, y-a_, size, size, color);
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	88fa      	ldrh	r2, [r7, #6]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	b298      	uxth	r0, r3
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	88ba      	ldrh	r2, [r7, #4]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	b299      	uxth	r1, r3
 80017cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80017d6:	b29c      	uxth	r4, r3
 80017d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	4623      	mov	r3, r4
 80017de:	f7ff fed8 	bl	8001592 <TFT_Draw_Fill_Rectangle>
		}
		if (P < 0 )
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	da09      	bge.n	80017fc <TFT_Draw_Circle+0x20e>
		{
			P = (P + 3) + (2* a_);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	1cda      	adds	r2, r3, #3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	4413      	add	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]
			a_ ++;
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	3301      	adds	r3, #1
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	e00d      	b.n	8001818 <TFT_Draw_Circle+0x22a>
		}
		else
		{
			P = (P + 5) + (2* (a_ - b_));
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	1d5a      	adds	r2, r3, #5
 8001800:	6979      	ldr	r1, [r7, #20]
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1acb      	subs	r3, r1, r3
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4413      	add	r3, r2
 800180a:	60fb      	str	r3, [r7, #12]
			a_ ++;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	3301      	adds	r3, #1
 8001810:	617b      	str	r3, [r7, #20]
			b_ --;
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	3b01      	subs	r3, #1
 8001816:	613b      	str	r3, [r7, #16]
	while (a_ <= b_)
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	429a      	cmp	r2, r3
 800181e:	f77f aefe 	ble.w	800161e <TFT_Draw_Circle+0x30>
		}
	}
}
 8001822:	bf00      	nop
 8001824:	bf00      	nop
 8001826:	371c      	adds	r7, #28
 8001828:	46bd      	mov	sp, r7
 800182a:	bd90      	pop	{r4, r7, pc}

0800182c <TFT_Draw_Circle_Helper>:

//��������������� �-��� ��� ����������� ���� ��������������
void TFT_Draw_Circle_Helper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint8_t size, uint16_t color)
{
 800182c:	b590      	push	{r4, r7, lr}
 800182e:	b089      	sub	sp, #36	; 0x24
 8001830:	af02      	add	r7, sp, #8
 8001832:	4604      	mov	r4, r0
 8001834:	4608      	mov	r0, r1
 8001836:	4611      	mov	r1, r2
 8001838:	461a      	mov	r2, r3
 800183a:	4623      	mov	r3, r4
 800183c:	80fb      	strh	r3, [r7, #6]
 800183e:	4603      	mov	r3, r0
 8001840:	80bb      	strh	r3, [r7, #4]
 8001842:	460b      	mov	r3, r1
 8001844:	807b      	strh	r3, [r7, #2]
 8001846:	4613      	mov	r3, r2
 8001848:	707b      	strb	r3, [r7, #1]
  int16_t f     = 1 - r;
 800184a:	887b      	ldrh	r3, [r7, #2]
 800184c:	f1c3 0301 	rsb	r3, r3, #1
 8001850:	b29b      	uxth	r3, r3
 8001852:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8001854:	2301      	movs	r3, #1
 8001856:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8001858:	887b      	ldrh	r3, [r7, #2]
 800185a:	461a      	mov	r2, r3
 800185c:	03d2      	lsls	r2, r2, #15
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	b29b      	uxth	r3, r3
 8001864:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 800186a:	887b      	ldrh	r3, [r7, #2]
 800186c:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 800186e:	e0cd      	b.n	8001a0c <TFT_Draw_Circle_Helper+0x1e0>
    if (f >= 0) {
 8001870:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001874:	2b00      	cmp	r3, #0
 8001876:	db0e      	blt.n	8001896 <TFT_Draw_Circle_Helper+0x6a>
      y--;
 8001878:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800187c:	b29b      	uxth	r3, r3
 800187e:	3b01      	subs	r3, #1
 8001880:	b29b      	uxth	r3, r3
 8001882:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8001884:	8a7b      	ldrh	r3, [r7, #18]
 8001886:	3302      	adds	r3, #2
 8001888:	b29b      	uxth	r3, r3
 800188a:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 800188c:	8afa      	ldrh	r2, [r7, #22]
 800188e:	8a7b      	ldrh	r3, [r7, #18]
 8001890:	4413      	add	r3, r2
 8001892:	b29b      	uxth	r3, r3
 8001894:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8001896:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800189a:	b29b      	uxth	r3, r3
 800189c:	3301      	adds	r3, #1
 800189e:	b29b      	uxth	r3, r3
 80018a0:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 80018a2:	8abb      	ldrh	r3, [r7, #20]
 80018a4:	3302      	adds	r3, #2
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 80018aa:	8afa      	ldrh	r2, [r7, #22]
 80018ac:	8abb      	ldrh	r3, [r7, #20]
 80018ae:	4413      	add	r3, r2
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	82fb      	strh	r3, [r7, #22]
    if (cornername & 0x4) {
 80018b4:	787b      	ldrb	r3, [r7, #1]
 80018b6:	f003 0304 	and.w	r3, r3, #4
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d025      	beq.n	800190a <TFT_Draw_Circle_Helper+0xde>
      TFT_Draw_Fill_Rectangle(x0 + x, y0 + y, size, size, color);
 80018be:	88fa      	ldrh	r2, [r7, #6]
 80018c0:	8a3b      	ldrh	r3, [r7, #16]
 80018c2:	4413      	add	r3, r2
 80018c4:	b298      	uxth	r0, r3
 80018c6:	88ba      	ldrh	r2, [r7, #4]
 80018c8:	89fb      	ldrh	r3, [r7, #14]
 80018ca:	4413      	add	r3, r2
 80018cc:	b299      	uxth	r1, r3
 80018ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80018d8:	b29c      	uxth	r4, r3
 80018da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	4623      	mov	r3, r4
 80018e0:	f7ff fe57 	bl	8001592 <TFT_Draw_Fill_Rectangle>
      TFT_Draw_Fill_Rectangle(x0 + y, y0 + x, size, size, color);
 80018e4:	88fa      	ldrh	r2, [r7, #6]
 80018e6:	89fb      	ldrh	r3, [r7, #14]
 80018e8:	4413      	add	r3, r2
 80018ea:	b298      	uxth	r0, r3
 80018ec:	88ba      	ldrh	r2, [r7, #4]
 80018ee:	8a3b      	ldrh	r3, [r7, #16]
 80018f0:	4413      	add	r3, r2
 80018f2:	b299      	uxth	r1, r3
 80018f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80018fe:	b29c      	uxth	r4, r3
 8001900:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	4623      	mov	r3, r4
 8001906:	f7ff fe44 	bl	8001592 <TFT_Draw_Fill_Rectangle>
    }
    if (cornername & 0x2) {
 800190a:	787b      	ldrb	r3, [r7, #1]
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d025      	beq.n	8001960 <TFT_Draw_Circle_Helper+0x134>
      TFT_Draw_Fill_Rectangle(x0 + x, y0 - y, size, size, color);
 8001914:	88fa      	ldrh	r2, [r7, #6]
 8001916:	8a3b      	ldrh	r3, [r7, #16]
 8001918:	4413      	add	r3, r2
 800191a:	b298      	uxth	r0, r3
 800191c:	88ba      	ldrh	r2, [r7, #4]
 800191e:	89fb      	ldrh	r3, [r7, #14]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	b299      	uxth	r1, r3
 8001924:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001928:	b29a      	uxth	r2, r3
 800192a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800192e:	b29c      	uxth	r4, r3
 8001930:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	4623      	mov	r3, r4
 8001936:	f7ff fe2c 	bl	8001592 <TFT_Draw_Fill_Rectangle>
      TFT_Draw_Fill_Rectangle(x0 + y, y0 - x, size, size, color);
 800193a:	88fa      	ldrh	r2, [r7, #6]
 800193c:	89fb      	ldrh	r3, [r7, #14]
 800193e:	4413      	add	r3, r2
 8001940:	b298      	uxth	r0, r3
 8001942:	88ba      	ldrh	r2, [r7, #4]
 8001944:	8a3b      	ldrh	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	b299      	uxth	r1, r3
 800194a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800194e:	b29a      	uxth	r2, r3
 8001950:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001954:	b29c      	uxth	r4, r3
 8001956:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	4623      	mov	r3, r4
 800195c:	f7ff fe19 	bl	8001592 <TFT_Draw_Fill_Rectangle>
    }
    if (cornername & 0x8) {
 8001960:	787b      	ldrb	r3, [r7, #1]
 8001962:	f003 0308 	and.w	r3, r3, #8
 8001966:	2b00      	cmp	r3, #0
 8001968:	d025      	beq.n	80019b6 <TFT_Draw_Circle_Helper+0x18a>
      TFT_Draw_Fill_Rectangle(x0 - y, y0 + x, size, size, color);
 800196a:	88fa      	ldrh	r2, [r7, #6]
 800196c:	89fb      	ldrh	r3, [r7, #14]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	b298      	uxth	r0, r3
 8001972:	88ba      	ldrh	r2, [r7, #4]
 8001974:	8a3b      	ldrh	r3, [r7, #16]
 8001976:	4413      	add	r3, r2
 8001978:	b299      	uxth	r1, r3
 800197a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800197e:	b29a      	uxth	r2, r3
 8001980:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001984:	b29c      	uxth	r4, r3
 8001986:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	4623      	mov	r3, r4
 800198c:	f7ff fe01 	bl	8001592 <TFT_Draw_Fill_Rectangle>
      TFT_Draw_Fill_Rectangle(x0 - x, y0 + y, size, size, color);
 8001990:	88fa      	ldrh	r2, [r7, #6]
 8001992:	8a3b      	ldrh	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	b298      	uxth	r0, r3
 8001998:	88ba      	ldrh	r2, [r7, #4]
 800199a:	89fb      	ldrh	r3, [r7, #14]
 800199c:	4413      	add	r3, r2
 800199e:	b299      	uxth	r1, r3
 80019a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80019aa:	b29c      	uxth	r4, r3
 80019ac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	4623      	mov	r3, r4
 80019b2:	f7ff fdee 	bl	8001592 <TFT_Draw_Fill_Rectangle>
    }
    if (cornername & 0x1) {
 80019b6:	787b      	ldrb	r3, [r7, #1]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d025      	beq.n	8001a0c <TFT_Draw_Circle_Helper+0x1e0>
      TFT_Draw_Fill_Rectangle(x0 - y, y0 - x, size, size, color);
 80019c0:	88fa      	ldrh	r2, [r7, #6]
 80019c2:	89fb      	ldrh	r3, [r7, #14]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	b298      	uxth	r0, r3
 80019c8:	88ba      	ldrh	r2, [r7, #4]
 80019ca:	8a3b      	ldrh	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	b299      	uxth	r1, r3
 80019d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80019da:	b29c      	uxth	r4, r3
 80019dc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	4623      	mov	r3, r4
 80019e2:	f7ff fdd6 	bl	8001592 <TFT_Draw_Fill_Rectangle>
      TFT_Draw_Fill_Rectangle(x0 - x, y0 - y, size, size, color);
 80019e6:	88fa      	ldrh	r2, [r7, #6]
 80019e8:	8a3b      	ldrh	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	b298      	uxth	r0, r3
 80019ee:	88ba      	ldrh	r2, [r7, #4]
 80019f0:	89fb      	ldrh	r3, [r7, #14]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	b299      	uxth	r1, r3
 80019f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a00:	b29c      	uxth	r4, r3
 8001a02:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001a04:	9300      	str	r3, [sp, #0]
 8001a06:	4623      	mov	r3, r4
 8001a08:	f7ff fdc3 	bl	8001592 <TFT_Draw_Fill_Rectangle>
  while (x<y) {
 8001a0c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001a10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	f6ff af2b 	blt.w	8001870 <TFT_Draw_Circle_Helper+0x44>
    }
  }
}
 8001a1a:	bf00      	nop
 8001a1c:	bf00      	nop
 8001a1e:	371c      	adds	r7, #28
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd90      	pop	{r4, r7, pc}

08001a24 <TFT_Draw_Round_Rect>:

//�-��� ������ ������������� �������� �����, ������, �������� ����������� ����, ������� ����� � ��������� ������
void TFT_Draw_Round_Rect(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint8_t size, uint16_t color)
{
 8001a24:	b590      	push	{r4, r7, lr}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af02      	add	r7, sp, #8
 8001a2a:	4604      	mov	r4, r0
 8001a2c:	4608      	mov	r0, r1
 8001a2e:	4611      	mov	r1, r2
 8001a30:	461a      	mov	r2, r3
 8001a32:	4623      	mov	r3, r4
 8001a34:	80fb      	strh	r3, [r7, #6]
 8001a36:	4603      	mov	r3, r0
 8001a38:	80bb      	strh	r3, [r7, #4]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	807b      	strh	r3, [r7, #2]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	803b      	strh	r3, [r7, #0]

  TFT_Draw_HLine(x+r  , y    , length-2*r, size, color); // Top
 8001a42:	88fa      	ldrh	r2, [r7, #6]
 8001a44:	8b3b      	ldrh	r3, [r7, #24]
 8001a46:	4413      	add	r3, r2
 8001a48:	b298      	uxth	r0, r3
 8001a4a:	8b3b      	ldrh	r3, [r7, #24]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	887a      	ldrh	r2, [r7, #2]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	7f3b      	ldrb	r3, [r7, #28]
 8001a58:	b29c      	uxth	r4, r3
 8001a5a:	88b9      	ldrh	r1, [r7, #4]
 8001a5c:	8c3b      	ldrh	r3, [r7, #32]
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	4623      	mov	r3, r4
 8001a62:	f7ff fcf7 	bl	8001454 <TFT_Draw_HLine>
  TFT_Draw_HLine(x+r  , y+width-1, length-2*r, size, color); // Bottom
 8001a66:	88fa      	ldrh	r2, [r7, #6]
 8001a68:	8b3b      	ldrh	r3, [r7, #24]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	b298      	uxth	r0, r3
 8001a6e:	88ba      	ldrh	r2, [r7, #4]
 8001a70:	883b      	ldrh	r3, [r7, #0]
 8001a72:	4413      	add	r3, r2
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	3b01      	subs	r3, #1
 8001a78:	b299      	uxth	r1, r3
 8001a7a:	8b3b      	ldrh	r3, [r7, #24]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	887a      	ldrh	r2, [r7, #2]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	7f3b      	ldrb	r3, [r7, #28]
 8001a88:	b29c      	uxth	r4, r3
 8001a8a:	8c3b      	ldrh	r3, [r7, #32]
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	4623      	mov	r3, r4
 8001a90:	f7ff fce0 	bl	8001454 <TFT_Draw_HLine>
  TFT_Draw_VLine(x    , y+r  , width-2*r, size, color); // Left
 8001a94:	88ba      	ldrh	r2, [r7, #4]
 8001a96:	8b3b      	ldrh	r3, [r7, #24]
 8001a98:	4413      	add	r3, r2
 8001a9a:	b299      	uxth	r1, r3
 8001a9c:	8b3b      	ldrh	r3, [r7, #24]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	883a      	ldrh	r2, [r7, #0]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	7f3b      	ldrb	r3, [r7, #28]
 8001aaa:	b29c      	uxth	r4, r3
 8001aac:	88f8      	ldrh	r0, [r7, #6]
 8001aae:	8c3b      	ldrh	r3, [r7, #32]
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	4623      	mov	r3, r4
 8001ab4:	f7ff fcfb 	bl	80014ae <TFT_Draw_VLine>
  TFT_Draw_VLine(x+length-1, y+r  , width-2*r, size, color); // Right
 8001ab8:	88fa      	ldrh	r2, [r7, #6]
 8001aba:	887b      	ldrh	r3, [r7, #2]
 8001abc:	4413      	add	r3, r2
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	b298      	uxth	r0, r3
 8001ac4:	88ba      	ldrh	r2, [r7, #4]
 8001ac6:	8b3b      	ldrh	r3, [r7, #24]
 8001ac8:	4413      	add	r3, r2
 8001aca:	b299      	uxth	r1, r3
 8001acc:	8b3b      	ldrh	r3, [r7, #24]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	883a      	ldrh	r2, [r7, #0]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	7f3b      	ldrb	r3, [r7, #28]
 8001ada:	b29c      	uxth	r4, r3
 8001adc:	8c3b      	ldrh	r3, [r7, #32]
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	4623      	mov	r3, r4
 8001ae2:	f7ff fce4 	bl	80014ae <TFT_Draw_VLine>

  TFT_Draw_Circle_Helper(x+r    , y+r    , r, 		 			1, size, color);
 8001ae6:	88fa      	ldrh	r2, [r7, #6]
 8001ae8:	8b3b      	ldrh	r3, [r7, #24]
 8001aea:	4413      	add	r3, r2
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	b218      	sxth	r0, r3
 8001af0:	88ba      	ldrh	r2, [r7, #4]
 8001af2:	8b3b      	ldrh	r3, [r7, #24]
 8001af4:	4413      	add	r3, r2
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	b219      	sxth	r1, r3
 8001afa:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001afe:	8c3b      	ldrh	r3, [r7, #32]
 8001b00:	9301      	str	r3, [sp, #4]
 8001b02:	7f3b      	ldrb	r3, [r7, #28]
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	2301      	movs	r3, #1
 8001b08:	f7ff fe90 	bl	800182c <TFT_Draw_Circle_Helper>
  TFT_Draw_Circle_Helper(x+length-r-1, y+r    , r, 			2, size, color);
 8001b0c:	88fa      	ldrh	r2, [r7, #6]
 8001b0e:	887b      	ldrh	r3, [r7, #2]
 8001b10:	4413      	add	r3, r2
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	8b3b      	ldrh	r3, [r7, #24]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	b218      	sxth	r0, r3
 8001b20:	88ba      	ldrh	r2, [r7, #4]
 8001b22:	8b3b      	ldrh	r3, [r7, #24]
 8001b24:	4413      	add	r3, r2
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	b219      	sxth	r1, r3
 8001b2a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001b2e:	8c3b      	ldrh	r3, [r7, #32]
 8001b30:	9301      	str	r3, [sp, #4]
 8001b32:	7f3b      	ldrb	r3, [r7, #28]
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	2302      	movs	r3, #2
 8001b38:	f7ff fe78 	bl	800182c <TFT_Draw_Circle_Helper>
  TFT_Draw_Circle_Helper(x+length-r-1, y+width-r-1, r,  4, size, color);
 8001b3c:	88fa      	ldrh	r2, [r7, #6]
 8001b3e:	887b      	ldrh	r3, [r7, #2]
 8001b40:	4413      	add	r3, r2
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	8b3b      	ldrh	r3, [r7, #24]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	b218      	sxth	r0, r3
 8001b50:	88ba      	ldrh	r2, [r7, #4]
 8001b52:	883b      	ldrh	r3, [r7, #0]
 8001b54:	4413      	add	r3, r2
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	8b3b      	ldrh	r3, [r7, #24]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	b219      	sxth	r1, r3
 8001b64:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001b68:	8c3b      	ldrh	r3, [r7, #32]
 8001b6a:	9301      	str	r3, [sp, #4]
 8001b6c:	7f3b      	ldrb	r3, [r7, #28]
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	2304      	movs	r3, #4
 8001b72:	f7ff fe5b 	bl	800182c <TFT_Draw_Circle_Helper>
  TFT_Draw_Circle_Helper(x+r    , y+width-r-1, r, 			8, size, color);
 8001b76:	88fa      	ldrh	r2, [r7, #6]
 8001b78:	8b3b      	ldrh	r3, [r7, #24]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	b218      	sxth	r0, r3
 8001b80:	88ba      	ldrh	r2, [r7, #4]
 8001b82:	883b      	ldrh	r3, [r7, #0]
 8001b84:	4413      	add	r3, r2
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	8b3b      	ldrh	r3, [r7, #24]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	b219      	sxth	r1, r3
 8001b94:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001b98:	8c3b      	ldrh	r3, [r7, #32]
 8001b9a:	9301      	str	r3, [sp, #4]
 8001b9c:	7f3b      	ldrb	r3, [r7, #28]
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2308      	movs	r3, #8
 8001ba2:	f7ff fe43 	bl	800182c <TFT_Draw_Circle_Helper>
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd90      	pop	{r4, r7, pc}

08001bae <TFT_Draw_Fill_Circle_Helper>:

//��������������� �-��� ��� ����������� ���� ������������ ��������������
void TFT_Draw_Fill_Circle_Helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color) 
{
 8001bae:	b590      	push	{r4, r7, lr}
 8001bb0:	b089      	sub	sp, #36	; 0x24
 8001bb2:	af02      	add	r7, sp, #8
 8001bb4:	4604      	mov	r4, r0
 8001bb6:	4608      	mov	r0, r1
 8001bb8:	4611      	mov	r1, r2
 8001bba:	461a      	mov	r2, r3
 8001bbc:	4623      	mov	r3, r4
 8001bbe:	80fb      	strh	r3, [r7, #6]
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	80bb      	strh	r3, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	807b      	strh	r3, [r7, #2]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	707b      	strb	r3, [r7, #1]

  int16_t f     = 1 - r;
 8001bcc:	887b      	ldrh	r3, [r7, #2]
 8001bce:	f1c3 0301 	rsb	r3, r3, #1
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8001bda:	887b      	ldrh	r3, [r7, #2]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	03d2      	lsls	r2, r2, #15
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 8001bec:	887b      	ldrh	r3, [r7, #2]
 8001bee:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 8001bf0:	e07f      	b.n	8001cf2 <TFT_Draw_Fill_Circle_Helper+0x144>
    if (f >= 0) {
 8001bf2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	db0e      	blt.n	8001c18 <TFT_Draw_Fill_Circle_Helper+0x6a>
      y--;
 8001bfa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8001c06:	8a7b      	ldrh	r3, [r7, #18]
 8001c08:	3302      	adds	r3, #2
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 8001c0e:	8afa      	ldrh	r2, [r7, #22]
 8001c10:	8a7b      	ldrh	r3, [r7, #18]
 8001c12:	4413      	add	r3, r2
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8001c18:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	3301      	adds	r3, #1
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8001c24:	8abb      	ldrh	r3, [r7, #20]
 8001c26:	3302      	adds	r3, #2
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 8001c2c:	8afa      	ldrh	r2, [r7, #22]
 8001c2e:	8abb      	ldrh	r3, [r7, #20]
 8001c30:	4413      	add	r3, r2
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	82fb      	strh	r3, [r7, #22]

    if (cornername & 0x1) {
 8001c36:	787b      	ldrb	r3, [r7, #1]
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d029      	beq.n	8001c94 <TFT_Draw_Fill_Circle_Helper+0xe6>
      TFT_Draw_VLine(x0+x, y0-y, 2*y+1+delta, 1, color);
 8001c40:	88fa      	ldrh	r2, [r7, #6]
 8001c42:	8a3b      	ldrh	r3, [r7, #16]
 8001c44:	4413      	add	r3, r2
 8001c46:	b298      	uxth	r0, r3
 8001c48:	88ba      	ldrh	r2, [r7, #4]
 8001c4a:	89fb      	ldrh	r3, [r7, #14]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	b299      	uxth	r1, r3
 8001c50:	89fb      	ldrh	r3, [r7, #14]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c58:	4413      	add	r3, r2
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	2301      	movs	r3, #1
 8001c66:	f7ff fc22 	bl	80014ae <TFT_Draw_VLine>
      TFT_Draw_VLine(x0+y, y0-x, 2*x+1+delta, 1, color);
 8001c6a:	88fa      	ldrh	r2, [r7, #6]
 8001c6c:	89fb      	ldrh	r3, [r7, #14]
 8001c6e:	4413      	add	r3, r2
 8001c70:	b298      	uxth	r0, r3
 8001c72:	88ba      	ldrh	r2, [r7, #4]
 8001c74:	8a3b      	ldrh	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	b299      	uxth	r1, r3
 8001c7a:	8a3b      	ldrh	r3, [r7, #16]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c82:	4413      	add	r3, r2
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	3301      	adds	r3, #1
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2301      	movs	r3, #1
 8001c90:	f7ff fc0d 	bl	80014ae <TFT_Draw_VLine>
    }
    if (cornername & 0x2) {
 8001c94:	787b      	ldrb	r3, [r7, #1]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d029      	beq.n	8001cf2 <TFT_Draw_Fill_Circle_Helper+0x144>
     TFT_Draw_VLine(x0-x, y0-y, 2*y+1+delta, 1, color);
 8001c9e:	88fa      	ldrh	r2, [r7, #6]
 8001ca0:	8a3b      	ldrh	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	b298      	uxth	r0, r3
 8001ca6:	88ba      	ldrh	r2, [r7, #4]
 8001ca8:	89fb      	ldrh	r3, [r7, #14]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	b299      	uxth	r1, r3
 8001cae:	89fb      	ldrh	r3, [r7, #14]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001cb6:	4413      	add	r3, r2
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	3301      	adds	r3, #1
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	f7ff fbf3 	bl	80014ae <TFT_Draw_VLine>
     TFT_Draw_VLine(x0-y, y0-x, 2*x+1+delta, 1, color);
 8001cc8:	88fa      	ldrh	r2, [r7, #6]
 8001cca:	89fb      	ldrh	r3, [r7, #14]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	b298      	uxth	r0, r3
 8001cd0:	88ba      	ldrh	r2, [r7, #4]
 8001cd2:	8a3b      	ldrh	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	b299      	uxth	r1, r3
 8001cd8:	8a3b      	ldrh	r3, [r7, #16]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ce0:	4413      	add	r3, r2
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	2301      	movs	r3, #1
 8001cee:	f7ff fbde 	bl	80014ae <TFT_Draw_VLine>
  while (x<y) {
 8001cf2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001cf6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	f6ff af79 	blt.w	8001bf2 <TFT_Draw_Fill_Circle_Helper+0x44>
    }
  }
}
 8001d00:	bf00      	nop
 8001d02:	bf00      	nop
 8001d04:	371c      	adds	r7, #28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd90      	pop	{r4, r7, pc}

08001d0a <TFT_Draw_Fill_Round_Rect>:

//�-��� ������ ����������� ������������� �������� �����, ������, �������� ����������� ����� � ��������� ������
void TFT_Draw_Fill_Round_Rect(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint16_t color)
{
 8001d0a:	b590      	push	{r4, r7, lr}
 8001d0c:	b085      	sub	sp, #20
 8001d0e:	af02      	add	r7, sp, #8
 8001d10:	4604      	mov	r4, r0
 8001d12:	4608      	mov	r0, r1
 8001d14:	4611      	mov	r1, r2
 8001d16:	461a      	mov	r2, r3
 8001d18:	4623      	mov	r3, r4
 8001d1a:	80fb      	strh	r3, [r7, #6]
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	80bb      	strh	r3, [r7, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	807b      	strh	r3, [r7, #2]
 8001d24:	4613      	mov	r3, r2
 8001d26:	803b      	strh	r3, [r7, #0]
  TFT_Draw_Fill_Rectangle(x+r, y, length-2*r, width, color);
 8001d28:	88fa      	ldrh	r2, [r7, #6]
 8001d2a:	8b3b      	ldrh	r3, [r7, #24]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	b298      	uxth	r0, r3
 8001d30:	8b3b      	ldrh	r3, [r7, #24]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	887a      	ldrh	r2, [r7, #2]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	883c      	ldrh	r4, [r7, #0]
 8001d3e:	88b9      	ldrh	r1, [r7, #4]
 8001d40:	8bbb      	ldrh	r3, [r7, #28]
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	4623      	mov	r3, r4
 8001d46:	f7ff fc24 	bl	8001592 <TFT_Draw_Fill_Rectangle>

  TFT_Draw_Fill_Circle_Helper(x+length-r-1, y+r, r, 1, width-2*r-1, color);
 8001d4a:	88fa      	ldrh	r2, [r7, #6]
 8001d4c:	887b      	ldrh	r3, [r7, #2]
 8001d4e:	4413      	add	r3, r2
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	8b3b      	ldrh	r3, [r7, #24]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	b218      	sxth	r0, r3
 8001d5e:	88ba      	ldrh	r2, [r7, #4]
 8001d60:	8b3b      	ldrh	r3, [r7, #24]
 8001d62:	4413      	add	r3, r2
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	b219      	sxth	r1, r3
 8001d68:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8001d6c:	8b3b      	ldrh	r3, [r7, #24]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	883a      	ldrh	r2, [r7, #0]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	b21b      	sxth	r3, r3
 8001d7e:	8bba      	ldrh	r2, [r7, #28]
 8001d80:	9201      	str	r2, [sp, #4]
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	2301      	movs	r3, #1
 8001d86:	4622      	mov	r2, r4
 8001d88:	f7ff ff11 	bl	8001bae <TFT_Draw_Fill_Circle_Helper>
  TFT_Draw_Fill_Circle_Helper(x+r    , y+r, r, 2, width-2*r-1, color);
 8001d8c:	88fa      	ldrh	r2, [r7, #6]
 8001d8e:	8b3b      	ldrh	r3, [r7, #24]
 8001d90:	4413      	add	r3, r2
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	b218      	sxth	r0, r3
 8001d96:	88ba      	ldrh	r2, [r7, #4]
 8001d98:	8b3b      	ldrh	r3, [r7, #24]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	b219      	sxth	r1, r3
 8001da0:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8001da4:	8b3b      	ldrh	r3, [r7, #24]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	883a      	ldrh	r2, [r7, #0]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	3b01      	subs	r3, #1
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	b21b      	sxth	r3, r3
 8001db6:	8bba      	ldrh	r2, [r7, #28]
 8001db8:	9201      	str	r2, [sp, #4]
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	4622      	mov	r2, r4
 8001dc0:	f7ff fef5 	bl	8001bae <TFT_Draw_Fill_Circle_Helper>
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd90      	pop	{r4, r7, pc}

08001dcc <LCD_Char>:



static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
{
 8001dcc:	b590      	push	{r4, r7, lr}
 8001dce:	b08b      	sub	sp, #44	; 0x2c
 8001dd0:	af02      	add	r7, sp, #8
 8001dd2:	60ba      	str	r2, [r7, #8]
 8001dd4:	607b      	str	r3, [r7, #4]
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	81fb      	strh	r3, [r7, #14]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	81bb      	strh	r3, [r7, #12]
	uint8_t  *bitmap = font -> bitmap;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph -> bitmapOffset;
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	777b      	strb	r3, [r7, #29]
 8001dee:	2300      	movs	r3, #0
 8001df0:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	837b      	strh	r3, [r7, #26]
	uint8_t  cur_x, cur_y;
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8001df6:	2300      	movs	r3, #0
 8001df8:	763b      	strb	r3, [r7, #24]
 8001dfa:	e095      	b.n	8001f28 <LCD_Char+0x15c>
	{
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	767b      	strb	r3, [r7, #25]
 8001e00:	e053      	b.n	8001eaa <LCD_Char+0xde>
		{
			if(bit == 0)
 8001e02:	7f3b      	ldrb	r3, [r7, #28]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d109      	bne.n	8001e1c <LCD_Char+0x50>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8001e08:	8bfb      	ldrh	r3, [r7, #30]
 8001e0a:	1c5a      	adds	r2, r3, #1
 8001e0c:	83fa      	strh	r2, [r7, #30]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	4413      	add	r3, r2
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	777b      	strb	r3, [r7, #29]
				bit  = 0x80;
 8001e18:	2380      	movs	r3, #128	; 0x80
 8001e1a:	773b      	strb	r3, [r7, #28]
			}
			if(bits & bit)
 8001e1c:	7f7a      	ldrb	r2, [r7, #29]
 8001e1e:	7f3b      	ldrb	r3, [r7, #28]
 8001e20:	4013      	ands	r3, r2
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <LCD_Char+0x64>
			{
				set_pixels++;
 8001e28:	8b7b      	ldrh	r3, [r7, #26]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	837b      	strh	r3, [r7, #26]
 8001e2e:	e036      	b.n	8001e9e <LCD_Char+0xd2>
			}
			else if (set_pixels > 0)
 8001e30:	8b7b      	ldrh	r3, [r7, #26]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d033      	beq.n	8001e9e <LCD_Char+0xd2>
			{
				TFT_Draw_Fill_Rectangle(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	7e7b      	ldrb	r3, [r7, #25]
 8001e40:	441a      	add	r2, r3
 8001e42:	8b7b      	ldrh	r3, [r7, #26]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	fb12 f303 	smulbb	r3, r2, r3
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	89fb      	ldrh	r3, [r7, #14]
 8001e56:	4413      	add	r3, r2
 8001e58:	b298      	uxth	r0, r3
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001e60:	461a      	mov	r2, r3
 8001e62:	7e3b      	ldrb	r3, [r7, #24]
 8001e64:	4413      	add	r3, r2
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	fb12 f303 	smulbb	r3, r2, r3
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	89bb      	ldrh	r3, [r7, #12]
 8001e76:	4413      	add	r3, r2
 8001e78:	b299      	uxth	r1, r3
 8001e7a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	8b7a      	ldrh	r2, [r7, #26]
 8001e82:	fb12 f303 	smulbb	r3, r2, r3
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001e8c:	b29c      	uxth	r4, r3
 8001e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	4623      	mov	r3, r4
 8001e96:	f7ff fb7c 	bl	8001592 <TFT_Draw_Fill_Rectangle>
				set_pixels = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 8001e9e:	7f3b      	ldrb	r3, [r7, #28]
 8001ea0:	085b      	lsrs	r3, r3, #1
 8001ea2:	773b      	strb	r3, [r7, #28]
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8001ea4:	7e7b      	ldrb	r3, [r7, #25]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	767b      	strb	r3, [r7, #25]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	789b      	ldrb	r3, [r3, #2]
 8001eae:	7e7a      	ldrb	r2, [r7, #25]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d3a6      	bcc.n	8001e02 <LCD_Char+0x36>
		}
		if (set_pixels > 0)
 8001eb4:	8b7b      	ldrh	r3, [r7, #26]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d033      	beq.n	8001f22 <LCD_Char+0x156>
		{
			TFT_Draw_Fill_Rectangle(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	7e7b      	ldrb	r3, [r7, #25]
 8001ec4:	441a      	add	r2, r3
 8001ec6:	8b7b      	ldrh	r3, [r7, #26]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	fb12 f303 	smulbb	r3, r2, r3
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	89fb      	ldrh	r3, [r7, #14]
 8001eda:	4413      	add	r3, r2
 8001edc:	b298      	uxth	r0, r3
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	7e3b      	ldrb	r3, [r7, #24]
 8001ee8:	4413      	add	r3, r2
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	fb12 f303 	smulbb	r3, r2, r3
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	89bb      	ldrh	r3, [r7, #12]
 8001efa:	4413      	add	r3, r2
 8001efc:	b299      	uxth	r1, r3
 8001efe:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	8b7a      	ldrh	r2, [r7, #26]
 8001f06:	fb12 f303 	smulbb	r3, r2, r3
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001f10:	b29c      	uxth	r4, r3
 8001f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	4623      	mov	r3, r4
 8001f1a:	f7ff fb3a 	bl	8001592 <TFT_Draw_Fill_Rectangle>
			set_pixels = 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	837b      	strh	r3, [r7, #26]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8001f22:	7e3b      	ldrb	r3, [r7, #24]
 8001f24:	3301      	adds	r3, #1
 8001f26:	763b      	strb	r3, [r7, #24]
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	78db      	ldrb	r3, [r3, #3]
 8001f2c:	7e3a      	ldrb	r2, [r7, #24]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	f4ff af64 	bcc.w	8001dfc <LCD_Char+0x30>
		}
	}
}
 8001f34:	bf00      	nop
 8001f36:	bf00      	nop
 8001f38:	3724      	adds	r7, #36	; 0x24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd90      	pop	{r4, r7, pc}

08001f3e <LCD_Font>:
void LCD_Font(uint16_t x, uint16_t y, char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 8001f3e:	b590      	push	{r4, r7, lr}
 8001f40:	b08f      	sub	sp, #60	; 0x3c
 8001f42:	af02      	add	r7, sp, #8
 8001f44:	60ba      	str	r2, [r7, #8]
 8001f46:	607b      	str	r3, [r7, #4]
 8001f48:	4603      	mov	r3, r0
 8001f4a:	81fb      	strh	r3, [r7, #14]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	81bb      	strh	r3, [r7, #12]
	int16_t cursor_x = x;
 8001f50:	89fb      	ldrh	r3, [r7, #14]
 8001f52:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int16_t cursor_y = y;
 8001f54:	89bb      	ldrh	r3, [r7, #12]
 8001f56:	85bb      	strh	r3, [r7, #44]	; 0x2c
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8001f58:	f107 031c 	add.w	r3, r7, #28
 8001f5c:	220c      	movs	r2, #12
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f002 fee7 	bl	8004d34 <memcpy>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8001f66:	2300      	movs	r3, #0
 8001f68:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001f6a:	e056      	b.n	800201a <LCD_Font+0xdc>
	{
		char c = text[text_pos];
 8001f6c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	4413      	add	r3, r2
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if(c == '\n')
 8001f78:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001f7c:	2b0a      	cmp	r3, #10
 8001f7e:	d10f      	bne.n	8001fa0 <LCD_Font+0x62>
		{
			cursor_x = x;
 8001f80:	89fb      	ldrh	r3, [r7, #14]
 8001f82:	85fb      	strh	r3, [r7, #46]	; 0x2e
			cursor_y += font.yAdvance * size;
 8001f84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	fb12 f303 	smulbb	r3, r2, r3
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001f98:	4413      	add	r3, r2
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001f9e:	e039      	b.n	8002014 <LCD_Font+0xd6>
		}
		else if(c >= font.first && c <= font.last && c != '\r')
 8001fa0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001fa4:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d333      	bcc.n	8002014 <LCD_Font+0xd6>
 8001fac:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001fb0:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d82d      	bhi.n	8002014 <LCD_Font+0xd6>
 8001fb8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001fbc:	2b0d      	cmp	r3, #13
 8001fbe:	d029      	beq.n	8002014 <LCD_Font+0xd6>
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8001fc0:	6a3a      	ldr	r2, [r7, #32]
 8001fc2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001fc6:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001fca:	1a5b      	subs	r3, r3, r1
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	18d1      	adds	r1, r2, r3
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	2208      	movs	r2, #8
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f002 feac 	bl	8004d34 <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8001fdc:	f107 041c 	add.w	r4, r7, #28
 8001fe0:	f107 0214 	add.w	r2, r7, #20
 8001fe4:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8001fe8:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8001fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fee:	9301      	str	r3, [sp, #4]
 8001ff0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	4623      	mov	r3, r4
 8001ff8:	f7ff fee8 	bl	8001dcc <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 8001ffc:	7e3b      	ldrb	r3, [r7, #24]
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002004:	b29b      	uxth	r3, r3
 8002006:	fb12 f303 	smulbb	r3, r2, r3
 800200a:	b29a      	uxth	r2, r3
 800200c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800200e:	4413      	add	r3, r2
 8002010:	b29b      	uxth	r3, r3
 8002012:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8002014:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002016:	3301      	adds	r3, #1
 8002018:	857b      	strh	r3, [r7, #42]	; 0x2a
 800201a:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 800201c:	68b8      	ldr	r0, [r7, #8]
 800201e:	f7fe f8d7 	bl	80001d0 <strlen>
 8002022:	4603      	mov	r3, r0
 8002024:	429c      	cmp	r4, r3
 8002026:	d3a1      	bcc.n	8001f6c <LCD_Font+0x2e>
		}
	}
}
 8002028:	bf00      	nop
 800202a:	bf00      	nop
 800202c:	3734      	adds	r7, #52	; 0x34
 800202e:	46bd      	mov	sp, r7
 8002030:	bd90      	pop	{r4, r7, pc}
 8002032:	0000      	movs	r0, r0
 8002034:	0000      	movs	r0, r0
	...

08002038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002038:	b5b0      	push	{r4, r5, r7, lr}
 800203a:	f6ad 4de8 	subw	sp, sp, #3304	; 0xce8
 800203e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002040:	f001 fc16 	bl	8003870 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002044:	f001 f94a 	bl	80032dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002048:	f001 f9b2 	bl	80033b0 <MX_GPIO_Init>
  MX_FSMC_Init();
 800204c:	f001 fa00 	bl	8003450 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  Init_SSD1963();
 8002050:	f7fe fffe 	bl	8001050 <Init_SSD1963>
  LCD_Font(0, 200, "12:55:55", _Open_Sans_Bold_112, 1, BLUE);
 8002054:	231f      	movs	r3, #31
 8002056:	9301      	str	r3, [sp, #4]
 8002058:	2301      	movs	r3, #1
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	4bd0      	ldr	r3, [pc, #832]	; (80023a0 <main+0x368>)
 800205e:	4ad1      	ldr	r2, [pc, #836]	; (80023a4 <main+0x36c>)
 8002060:	21c8      	movs	r1, #200	; 0xc8
 8002062:	2000      	movs	r0, #0
 8002064:	f7ff ff6b 	bl	8001f3e <LCD_Font>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  TFT_Clear_Screen(YELLOW);
 8002068:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800206c:	f7ff f960 	bl	8001330 <TFT_Clear_Screen>
	  TFT_Clear_Screen(RED);
 8002070:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002074:	f7ff f95c 	bl	8001330 <TFT_Clear_Screen>
	  TFT_Clear_Screen(GREEN);
 8002078:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800207c:	f7ff f958 	bl	8001330 <TFT_Clear_Screen>
	  TFT_Clear_Screen(BLUE);
 8002080:	201f      	movs	r0, #31
 8002082:	f7ff f955 	bl	8001330 <TFT_Clear_Screen>
	  TFT_Clear_Screen(WHITE);
 8002086:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800208a:	f7ff f951 	bl	8001330 <TFT_Clear_Screen>

	  TFT_Clear_Screen(YELLOW);LCD_Font(0, 200, "12:55:55", _Open_Sans_Bold_128, 1, BLACK);HAL_Delay(1000);
 800208e:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002092:	f7ff f94d 	bl	8001330 <TFT_Clear_Screen>
 8002096:	2300      	movs	r3, #0
 8002098:	9301      	str	r3, [sp, #4]
 800209a:	2301      	movs	r3, #1
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	4bc2      	ldr	r3, [pc, #776]	; (80023a8 <main+0x370>)
 80020a0:	4ac0      	ldr	r2, [pc, #768]	; (80023a4 <main+0x36c>)
 80020a2:	21c8      	movs	r1, #200	; 0xc8
 80020a4:	2000      	movs	r0, #0
 80020a6:	f7ff ff4a 	bl	8001f3e <LCD_Font>
 80020aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020ae:	f001 fc51 	bl	8003954 <HAL_Delay>
	  TFT_Clear_Screen(RED);LCD_Font(0, 200, "12:55:55", _Open_Sans_Bold_128, 1, WHITE);HAL_Delay(1000);
 80020b2:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80020b6:	f7ff f93b 	bl	8001330 <TFT_Clear_Screen>
 80020ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020be:	9301      	str	r3, [sp, #4]
 80020c0:	2301      	movs	r3, #1
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	4bb8      	ldr	r3, [pc, #736]	; (80023a8 <main+0x370>)
 80020c6:	4ab7      	ldr	r2, [pc, #732]	; (80023a4 <main+0x36c>)
 80020c8:	21c8      	movs	r1, #200	; 0xc8
 80020ca:	2000      	movs	r0, #0
 80020cc:	f7ff ff37 	bl	8001f3e <LCD_Font>
 80020d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020d4:	f001 fc3e 	bl	8003954 <HAL_Delay>
	  TFT_Clear_Screen(GREEN);LCD_Font(0, 200, "12:55:55", _Open_Sans_Bold_128, 1, WHITE);HAL_Delay(1000);
 80020d8:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80020dc:	f7ff f928 	bl	8001330 <TFT_Clear_Screen>
 80020e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020e4:	9301      	str	r3, [sp, #4]
 80020e6:	2301      	movs	r3, #1
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	4baf      	ldr	r3, [pc, #700]	; (80023a8 <main+0x370>)
 80020ec:	4aad      	ldr	r2, [pc, #692]	; (80023a4 <main+0x36c>)
 80020ee:	21c8      	movs	r1, #200	; 0xc8
 80020f0:	2000      	movs	r0, #0
 80020f2:	f7ff ff24 	bl	8001f3e <LCD_Font>
 80020f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020fa:	f001 fc2b 	bl	8003954 <HAL_Delay>
	  TFT_Clear_Screen(BLUE);LCD_Font(0, 200, "12:55:55", _Open_Sans_Bold_128, 1, WHITE);HAL_Delay(1000);
 80020fe:	201f      	movs	r0, #31
 8002100:	f7ff f916 	bl	8001330 <TFT_Clear_Screen>
 8002104:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002108:	9301      	str	r3, [sp, #4]
 800210a:	2301      	movs	r3, #1
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	4ba6      	ldr	r3, [pc, #664]	; (80023a8 <main+0x370>)
 8002110:	4aa4      	ldr	r2, [pc, #656]	; (80023a4 <main+0x36c>)
 8002112:	21c8      	movs	r1, #200	; 0xc8
 8002114:	2000      	movs	r0, #0
 8002116:	f7ff ff12 	bl	8001f3e <LCD_Font>
 800211a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800211e:	f001 fc19 	bl	8003954 <HAL_Delay>
	  TFT_Clear_Screen(WHITE);LCD_Font(0, 200, "12:55:55", _Open_Sans_Bold_128, 1, BLACK);HAL_Delay(1000);
 8002122:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002126:	f7ff f903 	bl	8001330 <TFT_Clear_Screen>
 800212a:	2300      	movs	r3, #0
 800212c:	9301      	str	r3, [sp, #4]
 800212e:	2301      	movs	r3, #1
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	4b9d      	ldr	r3, [pc, #628]	; (80023a8 <main+0x370>)
 8002134:	4a9b      	ldr	r2, [pc, #620]	; (80023a4 <main+0x36c>)
 8002136:	21c8      	movs	r1, #200	; 0xc8
 8002138:	2000      	movs	r0, #0
 800213a:	f7ff ff00 	bl	8001f3e <LCD_Font>
 800213e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002142:	f001 fc07 	bl	8003954 <HAL_Delay>
	  uint16_t ismail;

	// Clear the screen and draw the frame


	  TFT_Clear_Screen(RGB(255, 0, 0));
 8002146:	2200      	movs	r2, #0
 8002148:	2100      	movs	r1, #0
 800214a:	20ff      	movs	r0, #255	; 0xff
 800214c:	f7fe feb4 	bl	8000eb8 <RGB>
 8002150:	4603      	mov	r3, r0
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff f8ec 	bl	8001330 <TFT_Clear_Screen>
	  TFT_Draw_Fill_Rectangle(0, 0, 799, 13,RGB(255, 0, 0));
 8002158:	2200      	movs	r2, #0
 800215a:	2100      	movs	r1, #0
 800215c:	20ff      	movs	r0, #255	; 0xff
 800215e:	f7fe feab 	bl	8000eb8 <RGB>
 8002162:	4603      	mov	r3, r0
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	230d      	movs	r3, #13
 8002168:	f240 321f 	movw	r2, #799	; 0x31f
 800216c:	2100      	movs	r1, #0
 800216e:	2000      	movs	r0, #0
 8002170:	f7ff fa0f 	bl	8001592 <TFT_Draw_Fill_Rectangle>

	  TFT_Draw_Fill_Rectangle(0, 466, 799, 479,RGB(66, 66, 66));
 8002174:	2242      	movs	r2, #66	; 0x42
 8002176:	2142      	movs	r1, #66	; 0x42
 8002178:	2042      	movs	r0, #66	; 0x42
 800217a:	f7fe fe9d 	bl	8000eb8 <RGB>
 800217e:	4603      	mov	r3, r0
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	f240 13df 	movw	r3, #479	; 0x1df
 8002186:	f240 321f 	movw	r2, #799	; 0x31f
 800218a:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 800218e:	2000      	movs	r0, #0
 8002190:	f7ff f9ff 	bl	8001592 <TFT_Draw_Fill_Rectangle>

	  TFT_Draw_Rectangle(0, 14, 799, 465,1,RGB(0, 0, 255));
 8002194:	22ff      	movs	r2, #255	; 0xff
 8002196:	2100      	movs	r1, #0
 8002198:	2000      	movs	r0, #0
 800219a:	f7fe fe8d 	bl	8000eb8 <RGB>
 800219e:	4603      	mov	r3, r0
 80021a0:	9301      	str	r3, [sp, #4]
 80021a2:	2301      	movs	r3, #1
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	f240 13d1 	movw	r3, #465	; 0x1d1
 80021aa:	f240 321f 	movw	r2, #799	; 0x31f
 80021ae:	210e      	movs	r1, #14
 80021b0:	2000      	movs	r0, #0
 80021b2:	f7ff f9a9 	bl	8001508 <TFT_Draw_Rectangle>

	// Draw crosshairs
//	  myGLCD.setColor(0, 0, 255);

	  TFT_Clear_Screen(RGB(0, 0, 0));
 80021b6:	2200      	movs	r2, #0
 80021b8:	2100      	movs	r1, #0
 80021ba:	2000      	movs	r0, #0
 80021bc:	f7fe fe7c 	bl	8000eb8 <RGB>
 80021c0:	4603      	mov	r3, r0
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff f8b4 	bl	8001330 <TFT_Clear_Screen>
	  TFT_Draw_Line(399, 15, 399, 464,1,RGB(0, 0, 255));
 80021c8:	22ff      	movs	r2, #255	; 0xff
 80021ca:	2100      	movs	r1, #0
 80021cc:	2000      	movs	r0, #0
 80021ce:	f7fe fe73 	bl	8000eb8 <RGB>
 80021d2:	4603      	mov	r3, r0
 80021d4:	9301      	str	r3, [sp, #4]
 80021d6:	2301      	movs	r3, #1
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 80021de:	f240 128f 	movw	r2, #399	; 0x18f
 80021e2:	210f      	movs	r1, #15
 80021e4:	f240 108f 	movw	r0, #399	; 0x18f
 80021e8:	f7ff f8c6 	bl	8001378 <TFT_Draw_Line>
	  TFT_Draw_Line(1, 239, 798, 239,1,RGB(0, 0, 255));
 80021ec:	22ff      	movs	r2, #255	; 0xff
 80021ee:	2100      	movs	r1, #0
 80021f0:	2000      	movs	r0, #0
 80021f2:	f7fe fe61 	bl	8000eb8 <RGB>
 80021f6:	4603      	mov	r3, r0
 80021f8:	9301      	str	r3, [sp, #4]
 80021fa:	2301      	movs	r3, #1
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	23ef      	movs	r3, #239	; 0xef
 8002200:	f240 321e 	movw	r2, #798	; 0x31e
 8002204:	21ef      	movs	r1, #239	; 0xef
 8002206:	2001      	movs	r0, #1
 8002208:	f7ff f8b6 	bl	8001378 <TFT_Draw_Line>
	  for (int i=9; i<790; i+=10)
 800220c:	2309      	movs	r3, #9
 800220e:	f8c7 3ccc 	str.w	r3, [r7, #3276]	; 0xccc
 8002212:	e019      	b.n	8002248 <main+0x210>
		  TFT_Draw_Line(i, 237, i, 242,1,RGB(0, 0, 255));
 8002214:	f8d7 3ccc 	ldr.w	r3, [r7, #3276]	; 0xccc
 8002218:	b29c      	uxth	r4, r3
 800221a:	f8d7 3ccc 	ldr.w	r3, [r7, #3276]	; 0xccc
 800221e:	b29d      	uxth	r5, r3
 8002220:	22ff      	movs	r2, #255	; 0xff
 8002222:	2100      	movs	r1, #0
 8002224:	2000      	movs	r0, #0
 8002226:	f7fe fe47 	bl	8000eb8 <RGB>
 800222a:	4603      	mov	r3, r0
 800222c:	9301      	str	r3, [sp, #4]
 800222e:	2301      	movs	r3, #1
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	23f2      	movs	r3, #242	; 0xf2
 8002234:	462a      	mov	r2, r5
 8002236:	21ed      	movs	r1, #237	; 0xed
 8002238:	4620      	mov	r0, r4
 800223a:	f7ff f89d 	bl	8001378 <TFT_Draw_Line>
	  for (int i=9; i<790; i+=10)
 800223e:	f8d7 3ccc 	ldr.w	r3, [r7, #3276]	; 0xccc
 8002242:	330a      	adds	r3, #10
 8002244:	f8c7 3ccc 	str.w	r3, [r7, #3276]	; 0xccc
 8002248:	f8d7 3ccc 	ldr.w	r3, [r7, #3276]	; 0xccc
 800224c:	f240 3215 	movw	r2, #789	; 0x315
 8002250:	4293      	cmp	r3, r2
 8002252:	dddf      	ble.n	8002214 <main+0x1dc>
	  for (int i=19; i<470; i+=10)
 8002254:	2313      	movs	r3, #19
 8002256:	f8c7 3cc8 	str.w	r3, [r7, #3272]	; 0xcc8
 800225a:	e01b      	b.n	8002294 <main+0x25c>
		  TFT_Draw_Line(397, i, 402, i,1,RGB(0, 0, 255));
 800225c:	f8d7 3cc8 	ldr.w	r3, [r7, #3272]	; 0xcc8
 8002260:	b29c      	uxth	r4, r3
 8002262:	f8d7 3cc8 	ldr.w	r3, [r7, #3272]	; 0xcc8
 8002266:	b29d      	uxth	r5, r3
 8002268:	22ff      	movs	r2, #255	; 0xff
 800226a:	2100      	movs	r1, #0
 800226c:	2000      	movs	r0, #0
 800226e:	f7fe fe23 	bl	8000eb8 <RGB>
 8002272:	4603      	mov	r3, r0
 8002274:	9301      	str	r3, [sp, #4]
 8002276:	2301      	movs	r3, #1
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	462b      	mov	r3, r5
 800227c:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8002280:	4621      	mov	r1, r4
 8002282:	f240 108d 	movw	r0, #397	; 0x18d
 8002286:	f7ff f877 	bl	8001378 <TFT_Draw_Line>
	  for (int i=19; i<470; i+=10)
 800228a:	f8d7 3cc8 	ldr.w	r3, [r7, #3272]	; 0xcc8
 800228e:	330a      	adds	r3, #10
 8002290:	f8c7 3cc8 	str.w	r3, [r7, #3272]	; 0xcc8
 8002294:	f8d7 3cc8 	ldr.w	r3, [r7, #3272]	; 0xcc8
 8002298:	f5b3 7feb 	cmp.w	r3, #470	; 0x1d6
 800229c:	dbde      	blt.n	800225c <main+0x224>

	// Draw sin-, cos- and tan-lines
//	  myGLCD.setColor(0,255,255);
//	  myGLCD.print("Sin", 5, 15);
	  LCD_Font(5, 100, "Sin", _Open_Sans_Bold_128, 1, GREEN);
 800229e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80022a2:	9301      	str	r3, [sp, #4]
 80022a4:	2301      	movs	r3, #1
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	4b3f      	ldr	r3, [pc, #252]	; (80023a8 <main+0x370>)
 80022aa:	4a40      	ldr	r2, [pc, #256]	; (80023ac <main+0x374>)
 80022ac:	2164      	movs	r1, #100	; 0x64
 80022ae:	2005      	movs	r0, #5
 80022b0:	f7ff fe45 	bl	8001f3e <LCD_Font>
	  for (int i=1; i<798; i++)
 80022b4:	2301      	movs	r3, #1
 80022b6:	f8c7 3cc4 	str.w	r3, [r7, #3268]	; 0xcc4
 80022ba:	e050      	b.n	800235e <main+0x326>
	  {
		  Lcd_SetPixel(i,239+(sin(((i*1.13)*3.14)/180)*200),RGB(0, 225, 255));
 80022bc:	f8d7 3cc4 	ldr.w	r3, [r7, #3268]	; 0xcc4
 80022c0:	b21c      	sxth	r4, r3
 80022c2:	f8d7 0cc4 	ldr.w	r0, [r7, #3268]	; 0xcc4
 80022c6:	f7fe f92d 	bl	8000524 <__aeabi_i2d>
 80022ca:	a32f      	add	r3, pc, #188	; (adr r3, 8002388 <main+0x350>)
 80022cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d0:	f7fe f992 	bl	80005f8 <__aeabi_dmul>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4610      	mov	r0, r2
 80022da:	4619      	mov	r1, r3
 80022dc:	a32c      	add	r3, pc, #176	; (adr r3, 8002390 <main+0x358>)
 80022de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e2:	f7fe f989 	bl	80005f8 <__aeabi_dmul>
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	4610      	mov	r0, r2
 80022ec:	4619      	mov	r1, r3
 80022ee:	f04f 0200 	mov.w	r2, #0
 80022f2:	4b2f      	ldr	r3, [pc, #188]	; (80023b0 <main+0x378>)
 80022f4:	f7fe faaa 	bl	800084c <__aeabi_ddiv>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	ec43 2b17 	vmov	d7, r2, r3
 8002300:	eeb0 0a47 	vmov.f32	s0, s14
 8002304:	eef0 0a67 	vmov.f32	s1, s15
 8002308:	f003 fb9e 	bl	8005a48 <sin>
 800230c:	ec51 0b10 	vmov	r0, r1, d0
 8002310:	f04f 0200 	mov.w	r2, #0
 8002314:	4b27      	ldr	r3, [pc, #156]	; (80023b4 <main+0x37c>)
 8002316:	f7fe f96f 	bl	80005f8 <__aeabi_dmul>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	4610      	mov	r0, r2
 8002320:	4619      	mov	r1, r3
 8002322:	a31d      	add	r3, pc, #116	; (adr r3, 8002398 <main+0x360>)
 8002324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002328:	f7fd ffb0 	bl	800028c <__adddf3>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	4610      	mov	r0, r2
 8002332:	4619      	mov	r1, r3
 8002334:	f7fe fbfa 	bl	8000b2c <__aeabi_d2iz>
 8002338:	4603      	mov	r3, r0
 800233a:	b21d      	sxth	r5, r3
 800233c:	22ff      	movs	r2, #255	; 0xff
 800233e:	21e1      	movs	r1, #225	; 0xe1
 8002340:	2000      	movs	r0, #0
 8002342:	f7fe fdb9 	bl	8000eb8 <RGB>
 8002346:	4603      	mov	r3, r0
 8002348:	b21b      	sxth	r3, r3
 800234a:	461a      	mov	r2, r3
 800234c:	4629      	mov	r1, r5
 800234e:	4620      	mov	r0, r4
 8002350:	f7fe fe60 	bl	8001014 <Lcd_SetPixel>
	  for (int i=1; i<798; i++)
 8002354:	f8d7 3cc4 	ldr.w	r3, [r7, #3268]	; 0xcc4
 8002358:	3301      	adds	r3, #1
 800235a:	f8c7 3cc4 	str.w	r3, [r7, #3268]	; 0xcc4
 800235e:	f8d7 3cc4 	ldr.w	r3, [r7, #3268]	; 0xcc4
 8002362:	f240 321d 	movw	r2, #797	; 0x31d
 8002366:	4293      	cmp	r3, r2
 8002368:	dda8      	ble.n	80022bc <main+0x284>
	  }

//	  myGLCD.setColor(255,0,0);
	  LCD_Font(250, 100, "Cos", _Open_Sans_Bold_128, 1, GREEN);
 800236a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800236e:	9301      	str	r3, [sp, #4]
 8002370:	2301      	movs	r3, #1
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <main+0x370>)
 8002376:	4a10      	ldr	r2, [pc, #64]	; (80023b8 <main+0x380>)
 8002378:	2164      	movs	r1, #100	; 0x64
 800237a:	20fa      	movs	r0, #250	; 0xfa
 800237c:	f7ff fddf 	bl	8001f3e <LCD_Font>

	  for (int i=1; i<798; i++)
 8002380:	2301      	movs	r3, #1
 8002382:	f8c7 3cc0 	str.w	r3, [r7, #3264]	; 0xcc0
 8002386:	e06a      	b.n	800245e <main+0x426>
 8002388:	e147ae14 	.word	0xe147ae14
 800238c:	3ff2147a 	.word	0x3ff2147a
 8002390:	51eb851f 	.word	0x51eb851f
 8002394:	40091eb8 	.word	0x40091eb8
 8002398:	00000000 	.word	0x00000000
 800239c:	406de000 	.word	0x406de000
 80023a0:	08012b20 	.word	0x08012b20
 80023a4:	08006f60 	.word	0x08006f60
 80023a8:	08021e68 	.word	0x08021e68
 80023ac:	08006f6c 	.word	0x08006f6c
 80023b0:	40668000 	.word	0x40668000
 80023b4:	40690000 	.word	0x40690000
 80023b8:	08006f70 	.word	0x08006f70
	  {
		  Lcd_SetPixel(i,239+(cos(((i*1.13)*3.14)/180)*200), RGB(255, 0, 0));
 80023bc:	f8d7 3cc0 	ldr.w	r3, [r7, #3264]	; 0xcc0
 80023c0:	b21c      	sxth	r4, r3
 80023c2:	f8d7 0cc0 	ldr.w	r0, [r7, #3264]	; 0xcc0
 80023c6:	f7fe f8ad 	bl	8000524 <__aeabi_i2d>
 80023ca:	a3f4      	add	r3, pc, #976	; (adr r3, 800279c <main+0x764>)
 80023cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d0:	f7fe f912 	bl	80005f8 <__aeabi_dmul>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4610      	mov	r0, r2
 80023da:	4619      	mov	r1, r3
 80023dc:	a3e6      	add	r3, pc, #920	; (adr r3, 8002778 <main+0x740>)
 80023de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e2:	f7fe f909 	bl	80005f8 <__aeabi_dmul>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	4610      	mov	r0, r2
 80023ec:	4619      	mov	r1, r3
 80023ee:	f04f 0200 	mov.w	r2, #0
 80023f2:	4be5      	ldr	r3, [pc, #916]	; (8002788 <main+0x750>)
 80023f4:	f7fe fa2a 	bl	800084c <__aeabi_ddiv>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	ec43 2b17 	vmov	d7, r2, r3
 8002400:	eeb0 0a47 	vmov.f32	s0, s14
 8002404:	eef0 0a67 	vmov.f32	s1, s15
 8002408:	f003 faca 	bl	80059a0 <cos>
 800240c:	ec51 0b10 	vmov	r0, r1, d0
 8002410:	f04f 0200 	mov.w	r2, #0
 8002414:	4bdd      	ldr	r3, [pc, #884]	; (800278c <main+0x754>)
 8002416:	f7fe f8ef 	bl	80005f8 <__aeabi_dmul>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4610      	mov	r0, r2
 8002420:	4619      	mov	r1, r3
 8002422:	a3d1      	add	r3, pc, #836	; (adr r3, 8002768 <main+0x730>)
 8002424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002428:	f7fd ff30 	bl	800028c <__adddf3>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4610      	mov	r0, r2
 8002432:	4619      	mov	r1, r3
 8002434:	f7fe fb7a 	bl	8000b2c <__aeabi_d2iz>
 8002438:	4603      	mov	r3, r0
 800243a:	b21d      	sxth	r5, r3
 800243c:	2200      	movs	r2, #0
 800243e:	2100      	movs	r1, #0
 8002440:	20ff      	movs	r0, #255	; 0xff
 8002442:	f7fe fd39 	bl	8000eb8 <RGB>
 8002446:	4603      	mov	r3, r0
 8002448:	b21b      	sxth	r3, r3
 800244a:	461a      	mov	r2, r3
 800244c:	4629      	mov	r1, r5
 800244e:	4620      	mov	r0, r4
 8002450:	f7fe fde0 	bl	8001014 <Lcd_SetPixel>
	  for (int i=1; i<798; i++)
 8002454:	f8d7 3cc0 	ldr.w	r3, [r7, #3264]	; 0xcc0
 8002458:	3301      	adds	r3, #1
 800245a:	f8c7 3cc0 	str.w	r3, [r7, #3264]	; 0xcc0
 800245e:	f8d7 3cc0 	ldr.w	r3, [r7, #3264]	; 0xcc0
 8002462:	f240 321d 	movw	r2, #797	; 0x31d
 8002466:	4293      	cmp	r3, r2
 8002468:	dda8      	ble.n	80023bc <main+0x384>
	  }

//	  myGLCD.setColor(255,255,0);
//	  myGLCD.print("Tan", 5, 39);
	  LCD_Font(500, 100, "Tan", _Open_Sans_Bold_128, 1, GREEN);
 800246a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800246e:	9301      	str	r3, [sp, #4]
 8002470:	2301      	movs	r3, #1
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	4bc6      	ldr	r3, [pc, #792]	; (8002790 <main+0x758>)
 8002476:	4ac7      	ldr	r2, [pc, #796]	; (8002794 <main+0x75c>)
 8002478:	2164      	movs	r1, #100	; 0x64
 800247a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800247e:	f7ff fd5e 	bl	8001f3e <LCD_Font>
	  for (int i=1; i<798; i++)
 8002482:	2301      	movs	r3, #1
 8002484:	f8c7 3cbc 	str.w	r3, [r7, #3260]	; 0xcbc
 8002488:	e047      	b.n	800251a <main+0x4e2>
	  {
		  Lcd_SetPixel(i,239+(tan(((i*0.9)*3.14)/180)), RGB(255, 255, 0));
 800248a:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 800248e:	b21c      	sxth	r4, r3
 8002490:	f8d7 0cbc 	ldr.w	r0, [r7, #3260]	; 0xcbc
 8002494:	f7fe f846 	bl	8000524 <__aeabi_i2d>
 8002498:	a3b5      	add	r3, pc, #724	; (adr r3, 8002770 <main+0x738>)
 800249a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249e:	f7fe f8ab 	bl	80005f8 <__aeabi_dmul>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	4610      	mov	r0, r2
 80024a8:	4619      	mov	r1, r3
 80024aa:	a3b3      	add	r3, pc, #716	; (adr r3, 8002778 <main+0x740>)
 80024ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b0:	f7fe f8a2 	bl	80005f8 <__aeabi_dmul>
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	4610      	mov	r0, r2
 80024ba:	4619      	mov	r1, r3
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	4bb1      	ldr	r3, [pc, #708]	; (8002788 <main+0x750>)
 80024c2:	f7fe f9c3 	bl	800084c <__aeabi_ddiv>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	ec43 2b17 	vmov	d7, r2, r3
 80024ce:	eeb0 0a47 	vmov.f32	s0, s14
 80024d2:	eef0 0a67 	vmov.f32	s1, s15
 80024d6:	f003 fb0f 	bl	8005af8 <tan>
 80024da:	ec51 0b10 	vmov	r0, r1, d0
 80024de:	a3a2      	add	r3, pc, #648	; (adr r3, 8002768 <main+0x730>)
 80024e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e4:	f7fd fed2 	bl	800028c <__adddf3>
 80024e8:	4602      	mov	r2, r0
 80024ea:	460b      	mov	r3, r1
 80024ec:	4610      	mov	r0, r2
 80024ee:	4619      	mov	r1, r3
 80024f0:	f7fe fb1c 	bl	8000b2c <__aeabi_d2iz>
 80024f4:	4603      	mov	r3, r0
 80024f6:	b21d      	sxth	r5, r3
 80024f8:	2200      	movs	r2, #0
 80024fa:	21ff      	movs	r1, #255	; 0xff
 80024fc:	20ff      	movs	r0, #255	; 0xff
 80024fe:	f7fe fcdb 	bl	8000eb8 <RGB>
 8002502:	4603      	mov	r3, r0
 8002504:	b21b      	sxth	r3, r3
 8002506:	461a      	mov	r2, r3
 8002508:	4629      	mov	r1, r5
 800250a:	4620      	mov	r0, r4
 800250c:	f7fe fd82 	bl	8001014 <Lcd_SetPixel>
	  for (int i=1; i<798; i++)
 8002510:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 8002514:	3301      	adds	r3, #1
 8002516:	f8c7 3cbc 	str.w	r3, [r7, #3260]	; 0xcbc
 800251a:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 800251e:	f240 321d 	movw	r2, #797	; 0x31d
 8002522:	4293      	cmp	r3, r2
 8002524:	ddb1      	ble.n	800248a <main+0x452>
	  }

	  HAL_Delay(4000);
 8002526:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800252a:	f001 fa13 	bl	8003954 <HAL_Delay>

//	  myGLCD.setColor(0,0,0);
	  TFT_Draw_Rectangle(1,15,798,464,1, RGB(0, 0, 0));
 800252e:	2200      	movs	r2, #0
 8002530:	2100      	movs	r1, #0
 8002532:	2000      	movs	r0, #0
 8002534:	f7fe fcc0 	bl	8000eb8 <RGB>
 8002538:	4603      	mov	r3, r0
 800253a:	9301      	str	r3, [sp, #4]
 800253c:	2301      	movs	r3, #1
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 8002544:	f240 321e 	movw	r2, #798	; 0x31e
 8002548:	210f      	movs	r1, #15
 800254a:	2001      	movs	r0, #1
 800254c:	f7fe ffdc 	bl	8001508 <TFT_Draw_Rectangle>
//	  myGLCD.setColor(0, 0, 255);
//	  myGLCD.setBackColor(0, 0, 0);
	  TFT_Clear_Screen(RGB(0, 0, 0));
 8002550:	2200      	movs	r2, #0
 8002552:	2100      	movs	r1, #0
 8002554:	2000      	movs	r0, #0
 8002556:	f7fe fcaf 	bl	8000eb8 <RGB>
 800255a:	4603      	mov	r3, r0
 800255c:	4618      	mov	r0, r3
 800255e:	f7fe fee7 	bl	8001330 <TFT_Clear_Screen>
	  TFT_Draw_Line(399, 15, 399, 464,1, RGB(0, 0, 255));
 8002562:	22ff      	movs	r2, #255	; 0xff
 8002564:	2100      	movs	r1, #0
 8002566:	2000      	movs	r0, #0
 8002568:	f7fe fca6 	bl	8000eb8 <RGB>
 800256c:	4603      	mov	r3, r0
 800256e:	9301      	str	r3, [sp, #4]
 8002570:	2301      	movs	r3, #1
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 8002578:	f240 128f 	movw	r2, #399	; 0x18f
 800257c:	210f      	movs	r1, #15
 800257e:	f240 108f 	movw	r0, #399	; 0x18f
 8002582:	f7fe fef9 	bl	8001378 <TFT_Draw_Line>

	  TFT_Draw_Line(1, 239, 798, 239,1, RGB(0, 0, 255));
 8002586:	22ff      	movs	r2, #255	; 0xff
 8002588:	2100      	movs	r1, #0
 800258a:	2000      	movs	r0, #0
 800258c:	f7fe fc94 	bl	8000eb8 <RGB>
 8002590:	4603      	mov	r3, r0
 8002592:	9301      	str	r3, [sp, #4]
 8002594:	2301      	movs	r3, #1
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	23ef      	movs	r3, #239	; 0xef
 800259a:	f240 321e 	movw	r2, #798	; 0x31e
 800259e:	21ef      	movs	r1, #239	; 0xef
 80025a0:	2001      	movs	r0, #1
 80025a2:	f7fe fee9 	bl	8001378 <TFT_Draw_Line>

	// Draw a moving sinewave
	  x=1;
 80025a6:	2301      	movs	r3, #1
 80025a8:	f8c7 3cd4 	str.w	r3, [r7, #3284]	; 0xcd4
	  for (int i=1; i<(798*20); i++)
 80025ac:	2301      	movs	r3, #1
 80025ae:	f8c7 3cb8 	str.w	r3, [r7, #3256]	; 0xcb8
 80025b2:	e0b4      	b.n	800271e <main+0x6e6>
	  {
	    x++;
 80025b4:	f8d7 3cd4 	ldr.w	r3, [r7, #3284]	; 0xcd4
 80025b8:	3301      	adds	r3, #1
 80025ba:	f8c7 3cd4 	str.w	r3, [r7, #3284]	; 0xcd4
	    if (x==799)
 80025be:	f8d7 3cd4 	ldr.w	r3, [r7, #3284]	; 0xcd4
 80025c2:	f240 321f 	movw	r2, #799	; 0x31f
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d102      	bne.n	80025d0 <main+0x598>
	      x=1;
 80025ca:	2301      	movs	r3, #1
 80025cc:	f8c7 3cd4 	str.w	r3, [r7, #3284]	; 0xcd4
	    if (i>799)
 80025d0:	f8d7 3cb8 	ldr.w	r3, [r7, #3256]	; 0xcb8
 80025d4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80025d8:	db33      	blt.n	8002642 <main+0x60a>
	    {
	      if ((x==399)||(buf[x-1]==239))
 80025da:	f8d7 3cd4 	ldr.w	r3, [r7, #3284]	; 0xcd4
 80025de:	f240 128f 	movw	r2, #399	; 0x18f
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d00a      	beq.n	80025fc <main+0x5c4>
 80025e6:	f8d7 3cd4 	ldr.w	r3, [r7, #3284]	; 0xcd4
 80025ea:	1e5a      	subs	r2, r3, #1
 80025ec:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 80025f0:	f6a3 43d8 	subw	r3, r3, #3288	; 0xcd8
 80025f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f8:	2bef      	cmp	r3, #239	; 0xef
 80025fa:	d108      	bne.n	800260e <main+0x5d6>
//	        myGLCD.setColor(0,0,255);
	      ismail=RGB(0, 0, 255);
 80025fc:	22ff      	movs	r2, #255	; 0xff
 80025fe:	2100      	movs	r1, #0
 8002600:	2000      	movs	r0, #0
 8002602:	f7fe fc59 	bl	8000eb8 <RGB>
 8002606:	4603      	mov	r3, r0
 8002608:	f8a7 3cd2 	strh.w	r3, [r7, #3282]	; 0xcd2
 800260c:	e007      	b.n	800261e <main+0x5e6>
	      else
//	        myGLCD.setColor(0,0,0);
	      ismail=RGB(0, 0, 0);
 800260e:	2200      	movs	r2, #0
 8002610:	2100      	movs	r1, #0
 8002612:	2000      	movs	r0, #0
 8002614:	f7fe fc50 	bl	8000eb8 <RGB>
 8002618:	4603      	mov	r3, r0
 800261a:	f8a7 3cd2 	strh.w	r3, [r7, #3282]	; 0xcd2
	      Lcd_SetPixel(x,buf[x-1],ismail);
 800261e:	f8d7 3cd4 	ldr.w	r3, [r7, #3284]	; 0xcd4
 8002622:	b218      	sxth	r0, r3
 8002624:	f8d7 3cd4 	ldr.w	r3, [r7, #3284]	; 0xcd4
 8002628:	1e5a      	subs	r2, r3, #1
 800262a:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 800262e:	f6a3 43d8 	subw	r3, r3, #3288	; 0xcd8
 8002632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002636:	b21b      	sxth	r3, r3
 8002638:	f9b7 2cd2 	ldrsh.w	r2, [r7, #3282]	; 0xcd2
 800263c:	4619      	mov	r1, r3
 800263e:	f7fe fce9 	bl	8001014 <Lcd_SetPixel>
	    }
//	    myGLCD.setColor(0,255,255);
	    ismail=RGB(0, 255, 255);
 8002642:	22ff      	movs	r2, #255	; 0xff
 8002644:	21ff      	movs	r1, #255	; 0xff
 8002646:	2000      	movs	r0, #0
 8002648:	f7fe fc36 	bl	8000eb8 <RGB>
 800264c:	4603      	mov	r3, r0
 800264e:	f8a7 3cd2 	strh.w	r3, [r7, #3282]	; 0xcd2
	    y=239+(sin(((i*1.65)*3.14)/180)*(200-(i / 100)));
 8002652:	f8d7 0cb8 	ldr.w	r0, [r7, #3256]	; 0xcb8
 8002656:	f7fd ff65 	bl	8000524 <__aeabi_i2d>
 800265a:	a349      	add	r3, pc, #292	; (adr r3, 8002780 <main+0x748>)
 800265c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002660:	f7fd ffca 	bl	80005f8 <__aeabi_dmul>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4610      	mov	r0, r2
 800266a:	4619      	mov	r1, r3
 800266c:	a342      	add	r3, pc, #264	; (adr r3, 8002778 <main+0x740>)
 800266e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002672:	f7fd ffc1 	bl	80005f8 <__aeabi_dmul>
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	4610      	mov	r0, r2
 800267c:	4619      	mov	r1, r3
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	4b41      	ldr	r3, [pc, #260]	; (8002788 <main+0x750>)
 8002684:	f7fe f8e2 	bl	800084c <__aeabi_ddiv>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	ec43 2b17 	vmov	d7, r2, r3
 8002690:	eeb0 0a47 	vmov.f32	s0, s14
 8002694:	eef0 0a67 	vmov.f32	s1, s15
 8002698:	f003 f9d6 	bl	8005a48 <sin>
 800269c:	ec55 4b10 	vmov	r4, r5, d0
 80026a0:	f8d7 3cb8 	ldr.w	r3, [r7, #3256]	; 0xcb8
 80026a4:	4a3c      	ldr	r2, [pc, #240]	; (8002798 <main+0x760>)
 80026a6:	fb82 1203 	smull	r1, r2, r2, r3
 80026aa:	1152      	asrs	r2, r2, #5
 80026ac:	17db      	asrs	r3, r3, #31
 80026ae:	1a9b      	subs	r3, r3, r2
 80026b0:	33c8      	adds	r3, #200	; 0xc8
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fd ff36 	bl	8000524 <__aeabi_i2d>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	4620      	mov	r0, r4
 80026be:	4629      	mov	r1, r5
 80026c0:	f7fd ff9a 	bl	80005f8 <__aeabi_dmul>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	4610      	mov	r0, r2
 80026ca:	4619      	mov	r1, r3
 80026cc:	a326      	add	r3, pc, #152	; (adr r3, 8002768 <main+0x730>)
 80026ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d2:	f7fd fddb 	bl	800028c <__adddf3>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	4610      	mov	r0, r2
 80026dc:	4619      	mov	r1, r3
 80026de:	f7fe fa25 	bl	8000b2c <__aeabi_d2iz>
 80026e2:	4603      	mov	r3, r0
 80026e4:	f8c7 3c84 	str.w	r3, [r7, #3204]	; 0xc84
	    Lcd_SetPixel(x,y,ismail);
 80026e8:	f8d7 3cd4 	ldr.w	r3, [r7, #3284]	; 0xcd4
 80026ec:	b21b      	sxth	r3, r3
 80026ee:	f8d7 2c84 	ldr.w	r2, [r7, #3204]	; 0xc84
 80026f2:	b211      	sxth	r1, r2
 80026f4:	f9b7 2cd2 	ldrsh.w	r2, [r7, #3282]	; 0xcd2
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fe fc8b 	bl	8001014 <Lcd_SetPixel>
	    buf[x-1]=y;
 80026fe:	f8d7 3cd4 	ldr.w	r3, [r7, #3284]	; 0xcd4
 8002702:	1e5a      	subs	r2, r3, #1
 8002704:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 8002708:	f6a3 43d8 	subw	r3, r3, #3288	; 0xcd8
 800270c:	f8d7 1c84 	ldr.w	r1, [r7, #3204]	; 0xc84
 8002710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  for (int i=1; i<(798*20); i++)
 8002714:	f8d7 3cb8 	ldr.w	r3, [r7, #3256]	; 0xcb8
 8002718:	3301      	adds	r3, #1
 800271a:	f8c7 3cb8 	str.w	r3, [r7, #3256]	; 0xcb8
 800271e:	f8d7 3cb8 	ldr.w	r3, [r7, #3256]	; 0xcb8
 8002722:	f643 6257 	movw	r2, #15959	; 0x3e57
 8002726:	4293      	cmp	r3, r2
 8002728:	f77f af44 	ble.w	80025b4 <main+0x57c>
	  }

	  HAL_Delay(2000);
 800272c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002730:	f001 f910 	bl	8003954 <HAL_Delay>

	  ismail=RGB(0, 0, 0);
 8002734:	2200      	movs	r2, #0
 8002736:	2100      	movs	r1, #0
 8002738:	2000      	movs	r0, #0
 800273a:	f7fe fbbd 	bl	8000eb8 <RGB>
 800273e:	4603      	mov	r3, r0
 8002740:	f8a7 3cd2 	strh.w	r3, [r7, #3282]	; 0xcd2
	  TFT_Draw_Fill_Rectangle(1,15,798,464,ismail);
 8002744:	f8b7 3cd2 	ldrh.w	r3, [r7, #3282]	; 0xcd2
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 800274e:	f240 321e 	movw	r2, #798	; 0x31e
 8002752:	210f      	movs	r1, #15
 8002754:	2001      	movs	r0, #1
 8002756:	f7fe ff1c 	bl	8001592 <TFT_Draw_Fill_Rectangle>

	// Draw some random filled rectangles
	  for (int i=0; i<50; i++)
 800275a:	2300      	movs	r3, #0
 800275c:	f8c7 3cb4 	str.w	r3, [r7, #3252]	; 0xcb4
 8002760:	e0b3      	b.n	80028ca <main+0x892>
 8002762:	bf00      	nop
 8002764:	f3af 8000 	nop.w
 8002768:	00000000 	.word	0x00000000
 800276c:	406de000 	.word	0x406de000
 8002770:	cccccccd 	.word	0xcccccccd
 8002774:	3feccccc 	.word	0x3feccccc
 8002778:	51eb851f 	.word	0x51eb851f
 800277c:	40091eb8 	.word	0x40091eb8
 8002780:	66666666 	.word	0x66666666
 8002784:	3ffa6666 	.word	0x3ffa6666
 8002788:	40668000 	.word	0x40668000
 800278c:	40690000 	.word	0x40690000
 8002790:	08021e68 	.word	0x08021e68
 8002794:	08006f74 	.word	0x08006f74
 8002798:	51eb851f 	.word	0x51eb851f
 800279c:	e147ae14 	.word	0xe147ae14
 80027a0:	3ff2147a 	.word	0x3ff2147a
	  {
		  r = ((rand() % 256));
 80027a4:	f002 f91a 	bl	80049dc <rand>
 80027a8:	4603      	mov	r3, r0
 80027aa:	425a      	negs	r2, r3
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	bf58      	it	pl
 80027b2:	4253      	negpl	r3, r2
 80027b4:	f8c7 3c78 	str.w	r3, [r7, #3192]	; 0xc78
		  r = ((rand() % 256));
 80027b8:	f002 f910 	bl	80049dc <rand>
 80027bc:	4603      	mov	r3, r0
 80027be:	425a      	negs	r2, r3
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	bf58      	it	pl
 80027c6:	4253      	negpl	r3, r2
 80027c8:	f8c7 3c78 	str.w	r3, [r7, #3192]	; 0xc78
		  r = ((rand() % 256));
 80027cc:	f002 f906 	bl	80049dc <rand>
 80027d0:	4603      	mov	r3, r0
 80027d2:	425a      	negs	r2, r3
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	bf58      	it	pl
 80027da:	4253      	negpl	r3, r2
 80027dc:	f8c7 3c78 	str.w	r3, [r7, #3192]	; 0xc78

		  ismail=RGB((rand() % 256), (rand() % 256), (rand() % 256));
 80027e0:	f002 f8fc 	bl	80049dc <rand>
 80027e4:	4603      	mov	r3, r0
 80027e6:	425a      	negs	r2, r3
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	bf58      	it	pl
 80027ee:	4253      	negpl	r3, r2
 80027f0:	b2dc      	uxtb	r4, r3
 80027f2:	f002 f8f3 	bl	80049dc <rand>
 80027f6:	4603      	mov	r3, r0
 80027f8:	425a      	negs	r2, r3
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	bf58      	it	pl
 8002800:	4253      	negpl	r3, r2
 8002802:	b2dd      	uxtb	r5, r3
 8002804:	f002 f8ea 	bl	80049dc <rand>
 8002808:	4603      	mov	r3, r0
 800280a:	425a      	negs	r2, r3
 800280c:	b2db      	uxtb	r3, r3
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	bf58      	it	pl
 8002812:	4253      	negpl	r3, r2
 8002814:	b2db      	uxtb	r3, r3
 8002816:	461a      	mov	r2, r3
 8002818:	4629      	mov	r1, r5
 800281a:	4620      	mov	r0, r4
 800281c:	f7fe fb4c 	bl	8000eb8 <RGB>
 8002820:	4603      	mov	r3, r0
 8002822:	f8a7 3cd2 	strh.w	r3, [r7, #3282]	; 0xcd2
	    x=2+((rand() % 747));
 8002826:	f002 f8d9 	bl	80049dc <rand>
 800282a:	4603      	mov	r3, r0
 800282c:	4abc      	ldr	r2, [pc, #752]	; (8002b20 <main+0xae8>)
 800282e:	fb82 1203 	smull	r1, r2, r2, r3
 8002832:	441a      	add	r2, r3
 8002834:	1251      	asrs	r1, r2, #9
 8002836:	17da      	asrs	r2, r3, #31
 8002838:	1a8a      	subs	r2, r1, r2
 800283a:	f240 21eb 	movw	r1, #747	; 0x2eb
 800283e:	fb01 f202 	mul.w	r2, r1, r2
 8002842:	1a9a      	subs	r2, r3, r2
 8002844:	1c93      	adds	r3, r2, #2
 8002846:	f8c7 3cd4 	str.w	r3, [r7, #3284]	; 0xcd4
	    y=16+((rand() % 398));
 800284a:	f002 f8c7 	bl	80049dc <rand>
 800284e:	4602      	mov	r2, r0
 8002850:	4bb4      	ldr	r3, [pc, #720]	; (8002b24 <main+0xaec>)
 8002852:	fb83 1302 	smull	r1, r3, r3, r2
 8002856:	11d9      	asrs	r1, r3, #7
 8002858:	17d3      	asrs	r3, r2, #31
 800285a:	1acb      	subs	r3, r1, r3
 800285c:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8002860:	fb01 f303 	mul.w	r3, r1, r3
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	3310      	adds	r3, #16
 8002868:	f8c7 3c84 	str.w	r3, [r7, #3204]	; 0xc84
	    x2=x/7+50;
 800286c:	f8d7 3cd4 	ldr.w	r3, [r7, #3284]	; 0xcd4
 8002870:	4aad      	ldr	r2, [pc, #692]	; (8002b28 <main+0xaf0>)
 8002872:	fb82 1203 	smull	r1, r2, r2, r3
 8002876:	441a      	add	r2, r3
 8002878:	1092      	asrs	r2, r2, #2
 800287a:	17db      	asrs	r3, r3, #31
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	3332      	adds	r3, #50	; 0x32
 8002880:	f8c7 3c80 	str.w	r3, [r7, #3200]	; 0xc80
	    y2=y/7+50;
 8002884:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8002888:	4aa7      	ldr	r2, [pc, #668]	; (8002b28 <main+0xaf0>)
 800288a:	fb82 1203 	smull	r1, r2, r2, r3
 800288e:	441a      	add	r2, r3
 8002890:	1092      	asrs	r2, r2, #2
 8002892:	17db      	asrs	r3, r3, #31
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	3332      	adds	r3, #50	; 0x32
 8002898:	f8c7 3c7c 	str.w	r3, [r7, #3196]	; 0xc7c
	    TFT_Draw_Fill_Rectangle(x, y, x2, y2,ismail);
 800289c:	f8d7 3cd4 	ldr.w	r3, [r7, #3284]	; 0xcd4
 80028a0:	b298      	uxth	r0, r3
 80028a2:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 80028a6:	b299      	uxth	r1, r3
 80028a8:	f8d7 3c80 	ldr.w	r3, [r7, #3200]	; 0xc80
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	f8d7 3c7c 	ldr.w	r3, [r7, #3196]	; 0xc7c
 80028b2:	b29c      	uxth	r4, r3
 80028b4:	f8b7 3cd2 	ldrh.w	r3, [r7, #3282]	; 0xcd2
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	4623      	mov	r3, r4
 80028bc:	f7fe fe69 	bl	8001592 <TFT_Draw_Fill_Rectangle>
	  for (int i=0; i<50; i++)
 80028c0:	f8d7 3cb4 	ldr.w	r3, [r7, #3252]	; 0xcb4
 80028c4:	3301      	adds	r3, #1
 80028c6:	f8c7 3cb4 	str.w	r3, [r7, #3252]	; 0xcb4
 80028ca:	f8d7 3cb4 	ldr.w	r3, [r7, #3252]	; 0xcb4
 80028ce:	2b31      	cmp	r3, #49	; 0x31
 80028d0:	f77f af68 	ble.w	80027a4 <main+0x76c>
	  }

	  HAL_Delay(2000);
 80028d4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80028d8:	f001 f83c 	bl	8003954 <HAL_Delay>

//	  myGLCD.setColor(0,0,0);
	  TFT_Draw_Fill_Rectangle(1,15,798,464,RGB(0, 0, 0));
 80028dc:	2200      	movs	r2, #0
 80028de:	2100      	movs	r1, #0
 80028e0:	2000      	movs	r0, #0
 80028e2:	f7fe fae9 	bl	8000eb8 <RGB>
 80028e6:	4603      	mov	r3, r0
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 80028ee:	f240 321e 	movw	r2, #798	; 0x31e
 80028f2:	210f      	movs	r1, #15
 80028f4:	2001      	movs	r0, #1
 80028f6:	f7fe fe4c 	bl	8001592 <TFT_Draw_Fill_Rectangle>

	// Draw some random filled, rounded rectangles
	  for (int i=0; i<50; i++)
 80028fa:	2300      	movs	r3, #0
 80028fc:	f8c7 3cb0 	str.w	r3, [r7, #3248]	; 0xcb0
 8002900:	e076      	b.n	80029f0 <main+0x9b8>
	  {
		  ismail=RGB((rand() % 256), (rand() % 256), (rand() % 256));
 8002902:	f002 f86b 	bl	80049dc <rand>
 8002906:	4603      	mov	r3, r0
 8002908:	425a      	negs	r2, r3
 800290a:	b2db      	uxtb	r3, r3
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	bf58      	it	pl
 8002910:	4253      	negpl	r3, r2
 8002912:	b2dc      	uxtb	r4, r3
 8002914:	f002 f862 	bl	80049dc <rand>
 8002918:	4603      	mov	r3, r0
 800291a:	425a      	negs	r2, r3
 800291c:	b2db      	uxtb	r3, r3
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	bf58      	it	pl
 8002922:	4253      	negpl	r3, r2
 8002924:	b2dd      	uxtb	r5, r3
 8002926:	f002 f859 	bl	80049dc <rand>
 800292a:	4603      	mov	r3, r0
 800292c:	425a      	negs	r2, r3
 800292e:	b2db      	uxtb	r3, r3
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	bf58      	it	pl
 8002934:	4253      	negpl	r3, r2
 8002936:	b2db      	uxtb	r3, r3
 8002938:	461a      	mov	r2, r3
 800293a:	4629      	mov	r1, r5
 800293c:	4620      	mov	r0, r4
 800293e:	f7fe fabb 	bl	8000eb8 <RGB>
 8002942:	4603      	mov	r3, r0
 8002944:	f8a7 3cd2 	strh.w	r3, [r7, #3282]	; 0xcd2
		    x=2+((rand() % 747));
 8002948:	f002 f848 	bl	80049dc <rand>
 800294c:	4603      	mov	r3, r0
 800294e:	4a74      	ldr	r2, [pc, #464]	; (8002b20 <main+0xae8>)
 8002950:	fb82 1203 	smull	r1, r2, r2, r3
 8002954:	441a      	add	r2, r3
 8002956:	1251      	asrs	r1, r2, #9
 8002958:	17da      	asrs	r2, r3, #31
 800295a:	1a8a      	subs	r2, r1, r2
 800295c:	f240 21eb 	movw	r1, #747	; 0x2eb
 8002960:	fb01 f202 	mul.w	r2, r1, r2
 8002964:	1a9a      	subs	r2, r3, r2
 8002966:	1c93      	adds	r3, r2, #2
 8002968:	f8c7 3cd4 	str.w	r3, [r7, #3284]	; 0xcd4
		    y=16+((rand() % 398));
 800296c:	f002 f836 	bl	80049dc <rand>
 8002970:	4602      	mov	r2, r0
 8002972:	4b6c      	ldr	r3, [pc, #432]	; (8002b24 <main+0xaec>)
 8002974:	fb83 1302 	smull	r1, r3, r3, r2
 8002978:	11d9      	asrs	r1, r3, #7
 800297a:	17d3      	asrs	r3, r2, #31
 800297c:	1acb      	subs	r3, r1, r3
 800297e:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8002982:	fb01 f303 	mul.w	r3, r1, r3
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	3310      	adds	r3, #16
 800298a:	f8c7 3c84 	str.w	r3, [r7, #3204]	; 0xc84
	    x2=x/7+50;
 800298e:	f8d7 3cd4 	ldr.w	r3, [r7, #3284]	; 0xcd4
 8002992:	4a65      	ldr	r2, [pc, #404]	; (8002b28 <main+0xaf0>)
 8002994:	fb82 1203 	smull	r1, r2, r2, r3
 8002998:	441a      	add	r2, r3
 800299a:	1092      	asrs	r2, r2, #2
 800299c:	17db      	asrs	r3, r3, #31
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	3332      	adds	r3, #50	; 0x32
 80029a2:	f8c7 3c80 	str.w	r3, [r7, #3200]	; 0xc80
	    y2=y/7+50;
 80029a6:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 80029aa:	4a5f      	ldr	r2, [pc, #380]	; (8002b28 <main+0xaf0>)
 80029ac:	fb82 1203 	smull	r1, r2, r2, r3
 80029b0:	441a      	add	r2, r3
 80029b2:	1092      	asrs	r2, r2, #2
 80029b4:	17db      	asrs	r3, r3, #31
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	3332      	adds	r3, #50	; 0x32
 80029ba:	f8c7 3c7c 	str.w	r3, [r7, #3196]	; 0xc7c
//	    myGLCD.fillRoundRect(x, y, x2, y2);
	    TFT_Draw_Fill_Round_Rect(x, y, x2, y2,5,ismail);
 80029be:	f8d7 3cd4 	ldr.w	r3, [r7, #3284]	; 0xcd4
 80029c2:	b298      	uxth	r0, r3
 80029c4:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 80029c8:	b299      	uxth	r1, r3
 80029ca:	f8d7 3c80 	ldr.w	r3, [r7, #3200]	; 0xc80
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	f8d7 3c7c 	ldr.w	r3, [r7, #3196]	; 0xc7c
 80029d4:	b29c      	uxth	r4, r3
 80029d6:	f8b7 3cd2 	ldrh.w	r3, [r7, #3282]	; 0xcd2
 80029da:	9301      	str	r3, [sp, #4]
 80029dc:	2305      	movs	r3, #5
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	4623      	mov	r3, r4
 80029e2:	f7ff f992 	bl	8001d0a <TFT_Draw_Fill_Round_Rect>
	  for (int i=0; i<50; i++)
 80029e6:	f8d7 3cb0 	ldr.w	r3, [r7, #3248]	; 0xcb0
 80029ea:	3301      	adds	r3, #1
 80029ec:	f8c7 3cb0 	str.w	r3, [r7, #3248]	; 0xcb0
 80029f0:	f8d7 3cb0 	ldr.w	r3, [r7, #3248]	; 0xcb0
 80029f4:	2b31      	cmp	r3, #49	; 0x31
 80029f6:	dd84      	ble.n	8002902 <main+0x8ca>
	  }

	  HAL_Delay(2000);
 80029f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80029fc:	f000 ffaa 	bl	8003954 <HAL_Delay>

//	  myGLCD.setColor(0,0,0);
	  TFT_Draw_Fill_Rectangle(1,15,798,464,RGB(0, 0, 0));
 8002a00:	2200      	movs	r2, #0
 8002a02:	2100      	movs	r1, #0
 8002a04:	2000      	movs	r0, #0
 8002a06:	f7fe fa57 	bl	8000eb8 <RGB>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 8002a12:	f240 321e 	movw	r2, #798	; 0x31e
 8002a16:	210f      	movs	r1, #15
 8002a18:	2001      	movs	r0, #1
 8002a1a:	f7fe fdba 	bl	8001592 <TFT_Draw_Fill_Rectangle>

	// Draw some random filled circles
	  for (int i=0; i<50; i++)
 8002a1e:	2300      	movs	r3, #0
 8002a20:	f8c7 3cac 	str.w	r3, [r7, #3244]	; 0xcac
 8002a24:	e059      	b.n	8002ada <main+0xaa2>
	  {
		  ismail=RGB((rand() % 256), (rand() % 256), (rand() % 256));
 8002a26:	f001 ffd9 	bl	80049dc <rand>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	425a      	negs	r2, r3
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	bf58      	it	pl
 8002a34:	4253      	negpl	r3, r2
 8002a36:	b2dc      	uxtb	r4, r3
 8002a38:	f001 ffd0 	bl	80049dc <rand>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	425a      	negs	r2, r3
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	bf58      	it	pl
 8002a46:	4253      	negpl	r3, r2
 8002a48:	b2dd      	uxtb	r5, r3
 8002a4a:	f001 ffc7 	bl	80049dc <rand>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	425a      	negs	r2, r3
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	bf58      	it	pl
 8002a58:	4253      	negpl	r3, r2
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	4629      	mov	r1, r5
 8002a60:	4620      	mov	r0, r4
 8002a62:	f7fe fa29 	bl	8000eb8 <RGB>
 8002a66:	4603      	mov	r3, r0
 8002a68:	f8a7 3cd2 	strh.w	r3, [r7, #3282]	; 0xcd2
		    x=2+((rand() % 747));
 8002a6c:	f001 ffb6 	bl	80049dc <rand>
 8002a70:	4603      	mov	r3, r0
 8002a72:	4a2b      	ldr	r2, [pc, #172]	; (8002b20 <main+0xae8>)
 8002a74:	fb82 1203 	smull	r1, r2, r2, r3
 8002a78:	441a      	add	r2, r3
 8002a7a:	1251      	asrs	r1, r2, #9
 8002a7c:	17da      	asrs	r2, r3, #31
 8002a7e:	1a8a      	subs	r2, r1, r2
 8002a80:	f240 21eb 	movw	r1, #747	; 0x2eb
 8002a84:	fb01 f202 	mul.w	r2, r1, r2
 8002a88:	1a9a      	subs	r2, r3, r2
 8002a8a:	1c93      	adds	r3, r2, #2
 8002a8c:	f8c7 3cd4 	str.w	r3, [r7, #3284]	; 0xcd4
		    y=16+((rand() % 398));
 8002a90:	f001 ffa4 	bl	80049dc <rand>
 8002a94:	4602      	mov	r2, r0
 8002a96:	4b23      	ldr	r3, [pc, #140]	; (8002b24 <main+0xaec>)
 8002a98:	fb83 1302 	smull	r1, r3, r3, r2
 8002a9c:	11d9      	asrs	r1, r3, #7
 8002a9e:	17d3      	asrs	r3, r2, #31
 8002aa0:	1acb      	subs	r3, r1, r3
 8002aa2:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8002aa6:	fb01 f303 	mul.w	r3, r1, r3
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	3310      	adds	r3, #16
 8002aae:	f8c7 3c84 	str.w	r3, [r7, #3204]	; 0xc84
		    TFT_Draw_Fill_Circle_Helper(x, y, 25,2,1,ismail);
 8002ab2:	f8d7 3cd4 	ldr.w	r3, [r7, #3284]	; 0xcd4
 8002ab6:	b218      	sxth	r0, r3
 8002ab8:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8002abc:	b219      	sxth	r1, r3
 8002abe:	f8b7 3cd2 	ldrh.w	r3, [r7, #3282]	; 0xcd2
 8002ac2:	9301      	str	r3, [sp, #4]
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	2302      	movs	r3, #2
 8002aca:	2219      	movs	r2, #25
 8002acc:	f7ff f86f 	bl	8001bae <TFT_Draw_Fill_Circle_Helper>
	  for (int i=0; i<50; i++)
 8002ad0:	f8d7 3cac 	ldr.w	r3, [r7, #3244]	; 0xcac
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	f8c7 3cac 	str.w	r3, [r7, #3244]	; 0xcac
 8002ada:	f8d7 3cac 	ldr.w	r3, [r7, #3244]	; 0xcac
 8002ade:	2b31      	cmp	r3, #49	; 0x31
 8002ae0:	dda1      	ble.n	8002a26 <main+0x9ee>
	  }

	  HAL_Delay(2000);
 8002ae2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002ae6:	f000 ff35 	bl	8003954 <HAL_Delay>

//	  myGLCD.setColor(0,0,0);
	  TFT_Draw_Fill_Rectangle(1,15,798,464,RGB(0, 0, 0));
 8002aea:	2200      	movs	r2, #0
 8002aec:	2100      	movs	r1, #0
 8002aee:	2000      	movs	r0, #0
 8002af0:	f7fe f9e2 	bl	8000eb8 <RGB>
 8002af4:	4603      	mov	r3, r0
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 8002afc:	f240 321e 	movw	r2, #798	; 0x31e
 8002b00:	210f      	movs	r1, #15
 8002b02:	2001      	movs	r0, #1
 8002b04:	f7fe fd45 	bl	8001592 <TFT_Draw_Fill_Rectangle>

	// Draw some lines in a pattern
//	  myGLCD.setColor (255,0,0);
	  ismail=RGB(255, 0, 0);
 8002b08:	2200      	movs	r2, #0
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	20ff      	movs	r0, #255	; 0xff
 8002b0e:	f7fe f9d3 	bl	8000eb8 <RGB>
 8002b12:	4603      	mov	r3, r0
 8002b14:	f8a7 3cd2 	strh.w	r3, [r7, #3282]	; 0xcd2
	  for (int i=15; i<463; i+=5)
 8002b18:	230f      	movs	r3, #15
 8002b1a:	f8c7 3ca8 	str.w	r3, [r7, #3240]	; 0xca8
 8002b1e:	e032      	b.n	8002b86 <main+0xb4e>
 8002b20:	af76eb19 	.word	0xaf76eb19
 8002b24:	5254e78f 	.word	0x5254e78f
 8002b28:	92492493 	.word	0x92492493
	  {
		  TFT_Draw_Line(1, i, (i*1.66)-10, 463,1,ismail);
 8002b2c:	f8d7 3ca8 	ldr.w	r3, [r7, #3240]	; 0xca8
 8002b30:	b29c      	uxth	r4, r3
 8002b32:	f8d7 0ca8 	ldr.w	r0, [r7, #3240]	; 0xca8
 8002b36:	f7fd fcf5 	bl	8000524 <__aeabi_i2d>
 8002b3a:	a3bf      	add	r3, pc, #764	; (adr r3, 8002e38 <main+0xe00>)
 8002b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b40:	f7fd fd5a 	bl	80005f8 <__aeabi_dmul>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	4610      	mov	r0, r2
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	4bbb      	ldr	r3, [pc, #748]	; (8002e40 <main+0xe08>)
 8002b52:	f7fd fb99 	bl	8000288 <__aeabi_dsub>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4610      	mov	r0, r2
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	f7fe f80d 	bl	8000b7c <__aeabi_d2uiz>
 8002b62:	4603      	mov	r3, r0
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	f8b7 3cd2 	ldrh.w	r3, [r7, #3282]	; 0xcd2
 8002b6a:	9301      	str	r3, [sp, #4]
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002b74:	4621      	mov	r1, r4
 8002b76:	2001      	movs	r0, #1
 8002b78:	f7fe fbfe 	bl	8001378 <TFT_Draw_Line>
	  for (int i=15; i<463; i+=5)
 8002b7c:	f8d7 3ca8 	ldr.w	r3, [r7, #3240]	; 0xca8
 8002b80:	3305      	adds	r3, #5
 8002b82:	f8c7 3ca8 	str.w	r3, [r7, #3240]	; 0xca8
 8002b86:	f8d7 3ca8 	ldr.w	r3, [r7, #3240]	; 0xca8
 8002b8a:	f5b3 7fe7 	cmp.w	r3, #462	; 0x1ce
 8002b8e:	ddcd      	ble.n	8002b2c <main+0xaf4>
	  }
//	  myGLCD.setColor (255,0,0);
	  ismail=RGB(255, 0, 0);
 8002b90:	2200      	movs	r2, #0
 8002b92:	2100      	movs	r1, #0
 8002b94:	20ff      	movs	r0, #255	; 0xff
 8002b96:	f7fe f98f 	bl	8000eb8 <RGB>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	f8a7 3cd2 	strh.w	r3, [r7, #3282]	; 0xcd2
	  for (int i=463; i>15; i-=5)
 8002ba0:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002ba4:	f8c7 3ca4 	str.w	r3, [r7, #3236]	; 0xca4
 8002ba8:	e02c      	b.n	8002c04 <main+0xbcc>
	  {
		  TFT_Draw_Line(798, i, (i*1.66)+30, 15,1,ismail);
 8002baa:	f8d7 3ca4 	ldr.w	r3, [r7, #3236]	; 0xca4
 8002bae:	b29c      	uxth	r4, r3
 8002bb0:	f8d7 0ca4 	ldr.w	r0, [r7, #3236]	; 0xca4
 8002bb4:	f7fd fcb6 	bl	8000524 <__aeabi_i2d>
 8002bb8:	a39f      	add	r3, pc, #636	; (adr r3, 8002e38 <main+0xe00>)
 8002bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bbe:	f7fd fd1b 	bl	80005f8 <__aeabi_dmul>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	4610      	mov	r0, r2
 8002bc8:	4619      	mov	r1, r3
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	4b9d      	ldr	r3, [pc, #628]	; (8002e44 <main+0xe0c>)
 8002bd0:	f7fd fb5c 	bl	800028c <__adddf3>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4610      	mov	r0, r2
 8002bda:	4619      	mov	r1, r3
 8002bdc:	f7fd ffce 	bl	8000b7c <__aeabi_d2uiz>
 8002be0:	4603      	mov	r3, r0
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	f8b7 3cd2 	ldrh.w	r3, [r7, #3282]	; 0xcd2
 8002be8:	9301      	str	r3, [sp, #4]
 8002bea:	2301      	movs	r3, #1
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	230f      	movs	r3, #15
 8002bf0:	4621      	mov	r1, r4
 8002bf2:	f240 301e 	movw	r0, #798	; 0x31e
 8002bf6:	f7fe fbbf 	bl	8001378 <TFT_Draw_Line>
	  for (int i=463; i>15; i-=5)
 8002bfa:	f8d7 3ca4 	ldr.w	r3, [r7, #3236]	; 0xca4
 8002bfe:	3b05      	subs	r3, #5
 8002c00:	f8c7 3ca4 	str.w	r3, [r7, #3236]	; 0xca4
 8002c04:	f8d7 3ca4 	ldr.w	r3, [r7, #3236]	; 0xca4
 8002c08:	2b0f      	cmp	r3, #15
 8002c0a:	dcce      	bgt.n	8002baa <main+0xb72>
	  }
//	  myGLCD.setColor (0,255,255);
	  ismail=RGB(0, 255, 255);
 8002c0c:	22ff      	movs	r2, #255	; 0xff
 8002c0e:	21ff      	movs	r1, #255	; 0xff
 8002c10:	2000      	movs	r0, #0
 8002c12:	f7fe f951 	bl	8000eb8 <RGB>
 8002c16:	4603      	mov	r3, r0
 8002c18:	f8a7 3cd2 	strh.w	r3, [r7, #3282]	; 0xcd2
	  for (int i=463; i>15; i-=5)
 8002c1c:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002c20:	f8c7 3ca0 	str.w	r3, [r7, #3232]	; 0xca0
 8002c24:	e029      	b.n	8002c7a <main+0xc42>
	  {
		  TFT_Draw_Line(1, i, 770-(i*1.66), 15,1,ismail);
 8002c26:	f8d7 3ca0 	ldr.w	r3, [r7, #3232]	; 0xca0
 8002c2a:	b29c      	uxth	r4, r3
 8002c2c:	f8d7 0ca0 	ldr.w	r0, [r7, #3232]	; 0xca0
 8002c30:	f7fd fc78 	bl	8000524 <__aeabi_i2d>
 8002c34:	a380      	add	r3, pc, #512	; (adr r3, 8002e38 <main+0xe00>)
 8002c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3a:	f7fd fcdd 	bl	80005f8 <__aeabi_dmul>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	460b      	mov	r3, r1
 8002c42:	f04f 0000 	mov.w	r0, #0
 8002c46:	4980      	ldr	r1, [pc, #512]	; (8002e48 <main+0xe10>)
 8002c48:	f7fd fb1e 	bl	8000288 <__aeabi_dsub>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
 8002c50:	4610      	mov	r0, r2
 8002c52:	4619      	mov	r1, r3
 8002c54:	f7fd ff92 	bl	8000b7c <__aeabi_d2uiz>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	f8b7 3cd2 	ldrh.w	r3, [r7, #3282]	; 0xcd2
 8002c60:	9301      	str	r3, [sp, #4]
 8002c62:	2301      	movs	r3, #1
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	230f      	movs	r3, #15
 8002c68:	4621      	mov	r1, r4
 8002c6a:	2001      	movs	r0, #1
 8002c6c:	f7fe fb84 	bl	8001378 <TFT_Draw_Line>
	  for (int i=463; i>15; i-=5)
 8002c70:	f8d7 3ca0 	ldr.w	r3, [r7, #3232]	; 0xca0
 8002c74:	3b05      	subs	r3, #5
 8002c76:	f8c7 3ca0 	str.w	r3, [r7, #3232]	; 0xca0
 8002c7a:	f8d7 3ca0 	ldr.w	r3, [r7, #3232]	; 0xca0
 8002c7e:	2b0f      	cmp	r3, #15
 8002c80:	dcd1      	bgt.n	8002c26 <main+0xbee>
	  }
//	  myGLCD.setColor (0,255,255);
	  ismail=RGB(0, 255, 255);
 8002c82:	22ff      	movs	r2, #255	; 0xff
 8002c84:	21ff      	movs	r1, #255	; 0xff
 8002c86:	2000      	movs	r0, #0
 8002c88:	f7fe f916 	bl	8000eb8 <RGB>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	f8a7 3cd2 	strh.w	r3, [r7, #3282]	; 0xcd2
	  for (int i=15; i<463; i+=5)
 8002c92:	230f      	movs	r3, #15
 8002c94:	f8c7 3c9c 	str.w	r3, [r7, #3228]	; 0xc9c
 8002c98:	e02b      	b.n	8002cf2 <main+0xcba>
	  {
		  TFT_Draw_Line(798, i, 810-(i*1.66), 463,1,ismail);
 8002c9a:	f8d7 3c9c 	ldr.w	r3, [r7, #3228]	; 0xc9c
 8002c9e:	b29c      	uxth	r4, r3
 8002ca0:	f8d7 0c9c 	ldr.w	r0, [r7, #3228]	; 0xc9c
 8002ca4:	f7fd fc3e 	bl	8000524 <__aeabi_i2d>
 8002ca8:	a363      	add	r3, pc, #396	; (adr r3, 8002e38 <main+0xe00>)
 8002caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cae:	f7fd fca3 	bl	80005f8 <__aeabi_dmul>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	f04f 0000 	mov.w	r0, #0
 8002cba:	4964      	ldr	r1, [pc, #400]	; (8002e4c <main+0xe14>)
 8002cbc:	f7fd fae4 	bl	8000288 <__aeabi_dsub>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	f7fd ff58 	bl	8000b7c <__aeabi_d2uiz>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	f8b7 3cd2 	ldrh.w	r3, [r7, #3282]	; 0xcd2
 8002cd4:	9301      	str	r3, [sp, #4]
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002cde:	4621      	mov	r1, r4
 8002ce0:	f240 301e 	movw	r0, #798	; 0x31e
 8002ce4:	f7fe fb48 	bl	8001378 <TFT_Draw_Line>
	  for (int i=15; i<463; i+=5)
 8002ce8:	f8d7 3c9c 	ldr.w	r3, [r7, #3228]	; 0xc9c
 8002cec:	3305      	adds	r3, #5
 8002cee:	f8c7 3c9c 	str.w	r3, [r7, #3228]	; 0xc9c
 8002cf2:	f8d7 3c9c 	ldr.w	r3, [r7, #3228]	; 0xc9c
 8002cf6:	f5b3 7fe7 	cmp.w	r3, #462	; 0x1ce
 8002cfa:	ddce      	ble.n	8002c9a <main+0xc62>
	  }

	  HAL_Delay(2000);
 8002cfc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002d00:	f000 fe28 	bl	8003954 <HAL_Delay>

//	  myGLCD.setColor(0,0,0);
	  TFT_Draw_Fill_Rectangle(1,15,798,464,RGB(0, 0, 0));
 8002d04:	2200      	movs	r2, #0
 8002d06:	2100      	movs	r1, #0
 8002d08:	2000      	movs	r0, #0
 8002d0a:	f7fe f8d5 	bl	8000eb8 <RGB>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 8002d16:	f240 321e 	movw	r2, #798	; 0x31e
 8002d1a:	210f      	movs	r1, #15
 8002d1c:	2001      	movs	r0, #1
 8002d1e:	f7fe fc38 	bl	8001592 <TFT_Draw_Fill_Rectangle>

	// Draw some random circles
	  for (int i=0; i<250; i++)
 8002d22:	2300      	movs	r3, #0
 8002d24:	f8c7 3c98 	str.w	r3, [r7, #3224]	; 0xc98
 8002d28:	e06a      	b.n	8002e00 <main+0xdc8>
	  {
		  ismail=RGB((rand() % 256), (rand() % 256), (rand() % 256));
 8002d2a:	f001 fe57 	bl	80049dc <rand>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	425a      	negs	r2, r3
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	bf58      	it	pl
 8002d38:	4253      	negpl	r3, r2
 8002d3a:	b2dc      	uxtb	r4, r3
 8002d3c:	f001 fe4e 	bl	80049dc <rand>
 8002d40:	4603      	mov	r3, r0
 8002d42:	425a      	negs	r2, r3
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	b2d2      	uxtb	r2, r2
 8002d48:	bf58      	it	pl
 8002d4a:	4253      	negpl	r3, r2
 8002d4c:	b2dd      	uxtb	r5, r3
 8002d4e:	f001 fe45 	bl	80049dc <rand>
 8002d52:	4603      	mov	r3, r0
 8002d54:	425a      	negs	r2, r3
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	b2d2      	uxtb	r2, r2
 8002d5a:	bf58      	it	pl
 8002d5c:	4253      	negpl	r3, r2
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	461a      	mov	r2, r3
 8002d62:	4629      	mov	r1, r5
 8002d64:	4620      	mov	r0, r4
 8002d66:	f7fe f8a7 	bl	8000eb8 <RGB>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	f8a7 3cd2 	strh.w	r3, [r7, #3282]	; 0xcd2
//	    x=32+random(736);
//	    y=45+random(386);
	    x=32+((rand() % 737));
 8002d70:	f001 fe34 	bl	80049dc <rand>
 8002d74:	4602      	mov	r2, r0
 8002d76:	4b36      	ldr	r3, [pc, #216]	; (8002e50 <main+0xe18>)
 8002d78:	fb83 1302 	smull	r1, r3, r3, r2
 8002d7c:	1219      	asrs	r1, r3, #8
 8002d7e:	17d3      	asrs	r3, r2, #31
 8002d80:	1acb      	subs	r3, r1, r3
 8002d82:	f240 21e1 	movw	r1, #737	; 0x2e1
 8002d86:	fb01 f303 	mul.w	r3, r1, r3
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	3320      	adds	r3, #32
 8002d8e:	f8c7 3cd4 	str.w	r3, [r7, #3284]	; 0xcd4
	    y=45+((rand() % 386));
 8002d92:	f001 fe23 	bl	80049dc <rand>
 8002d96:	4602      	mov	r2, r0
 8002d98:	4b2e      	ldr	r3, [pc, #184]	; (8002e54 <main+0xe1c>)
 8002d9a:	fb83 1302 	smull	r1, r3, r3, r2
 8002d9e:	1159      	asrs	r1, r3, #5
 8002da0:	17d3      	asrs	r3, r2, #31
 8002da2:	1acb      	subs	r3, r1, r3
 8002da4:	f44f 71c1 	mov.w	r1, #386	; 0x182
 8002da8:	fb01 f303 	mul.w	r3, r1, r3
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	332d      	adds	r3, #45	; 0x2d
 8002db0:	f8c7 3c84 	str.w	r3, [r7, #3204]	; 0xc84
	    r=((rand() % 31));
 8002db4:	f001 fe12 	bl	80049dc <rand>
 8002db8:	4602      	mov	r2, r0
 8002dba:	4b27      	ldr	r3, [pc, #156]	; (8002e58 <main+0xe20>)
 8002dbc:	fb83 1302 	smull	r1, r3, r3, r2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	1119      	asrs	r1, r3, #4
 8002dc4:	17d3      	asrs	r3, r2, #31
 8002dc6:	1ac9      	subs	r1, r1, r3
 8002dc8:	460b      	mov	r3, r1
 8002dca:	015b      	lsls	r3, r3, #5
 8002dcc:	1a5b      	subs	r3, r3, r1
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	f8c7 3c78 	str.w	r3, [r7, #3192]	; 0xc78
	    TFT_Draw_Circle(x, y, r,0,1,ismail);
 8002dd4:	f8d7 3cd4 	ldr.w	r3, [r7, #3284]	; 0xcd4
 8002dd8:	b298      	uxth	r0, r3
 8002dda:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8002dde:	b299      	uxth	r1, r3
 8002de0:	f8d7 3c78 	ldr.w	r3, [r7, #3192]	; 0xc78
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	f8b7 3cd2 	ldrh.w	r3, [r7, #3282]	; 0xcd2
 8002dea:	9301      	str	r3, [sp, #4]
 8002dec:	2301      	movs	r3, #1
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	2300      	movs	r3, #0
 8002df2:	f7fe fbfc 	bl	80015ee <TFT_Draw_Circle>
	  for (int i=0; i<250; i++)
 8002df6:	f8d7 3c98 	ldr.w	r3, [r7, #3224]	; 0xc98
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	f8c7 3c98 	str.w	r3, [r7, #3224]	; 0xc98
 8002e00:	f8d7 3c98 	ldr.w	r3, [r7, #3224]	; 0xc98
 8002e04:	2bf9      	cmp	r3, #249	; 0xf9
 8002e06:	dd90      	ble.n	8002d2a <main+0xcf2>
	  }

	  HAL_Delay(2000);
 8002e08:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002e0c:	f000 fda2 	bl	8003954 <HAL_Delay>

//	  myGLCD.setColor(0,0,0);
	  TFT_Draw_Fill_Rectangle(1,15,798,464,RGB(0, 0, 0));
 8002e10:	2200      	movs	r2, #0
 8002e12:	2100      	movs	r1, #0
 8002e14:	2000      	movs	r0, #0
 8002e16:	f7fe f84f 	bl	8000eb8 <RGB>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 8002e22:	f240 321e 	movw	r2, #798	; 0x31e
 8002e26:	210f      	movs	r1, #15
 8002e28:	2001      	movs	r0, #1
 8002e2a:	f7fe fbb2 	bl	8001592 <TFT_Draw_Fill_Rectangle>

	// Draw some random rectangles
	  for (int i=0; i<250; i++)
 8002e2e:	2300      	movs	r3, #0
 8002e30:	f8c7 3c94 	str.w	r3, [r7, #3220]	; 0xc94
 8002e34:	e092      	b.n	8002f5c <main+0xf24>
 8002e36:	bf00      	nop
 8002e38:	28f5c28f 	.word	0x28f5c28f
 8002e3c:	3ffa8f5c 	.word	0x3ffa8f5c
 8002e40:	40240000 	.word	0x40240000
 8002e44:	403e0000 	.word	0x403e0000
 8002e48:	40881000 	.word	0x40881000
 8002e4c:	40895000 	.word	0x40895000
 8002e50:	58ec3369 	.word	0x58ec3369
 8002e54:	15390949 	.word	0x15390949
 8002e58:	84210843 	.word	0x84210843
	  {
		  ismail=RGB((rand() % 256), (rand() % 256), (rand() % 256));
 8002e5c:	f001 fdbe 	bl	80049dc <rand>
 8002e60:	4603      	mov	r3, r0
 8002e62:	425a      	negs	r2, r3
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	bf58      	it	pl
 8002e6a:	4253      	negpl	r3, r2
 8002e6c:	b2dc      	uxtb	r4, r3
 8002e6e:	f001 fdb5 	bl	80049dc <rand>
 8002e72:	4603      	mov	r3, r0
 8002e74:	425a      	negs	r2, r3
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	bf58      	it	pl
 8002e7c:	4253      	negpl	r3, r2
 8002e7e:	b2dd      	uxtb	r5, r3
 8002e80:	f001 fdac 	bl	80049dc <rand>
 8002e84:	4603      	mov	r3, r0
 8002e86:	425a      	negs	r2, r3
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	bf58      	it	pl
 8002e8e:	4253      	negpl	r3, r2
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	461a      	mov	r2, r3
 8002e94:	4629      	mov	r1, r5
 8002e96:	4620      	mov	r0, r4
 8002e98:	f7fe f80e 	bl	8000eb8 <RGB>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	f8a7 3cd2 	strh.w	r3, [r7, #3282]	; 0xcd2
	    x=2+((rand() % 797));
 8002ea2:	f001 fd9b 	bl	80049dc <rand>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	4bd7      	ldr	r3, [pc, #860]	; (8003208 <main+0x11d0>)
 8002eaa:	fb83 1302 	smull	r1, r3, r3, r2
 8002eae:	1119      	asrs	r1, r3, #4
 8002eb0:	17d3      	asrs	r3, r2, #31
 8002eb2:	1acb      	subs	r3, r1, r3
 8002eb4:	f240 311d 	movw	r1, #797	; 0x31d
 8002eb8:	fb01 f303 	mul.w	r3, r1, r3
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	3302      	adds	r3, #2
 8002ec0:	f8c7 3cd4 	str.w	r3, [r7, #3284]	; 0xcd4
	    y=16+((rand() % 448));
 8002ec4:	f001 fd8a 	bl	80049dc <rand>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	4bd0      	ldr	r3, [pc, #832]	; (800320c <main+0x11d4>)
 8002ecc:	fb83 1302 	smull	r1, r3, r3, r2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	1219      	asrs	r1, r3, #8
 8002ed4:	17d3      	asrs	r3, r2, #31
 8002ed6:	1ac9      	subs	r1, r1, r3
 8002ed8:	460b      	mov	r3, r1
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	1a5b      	subs	r3, r3, r1
 8002ede:	019b      	lsls	r3, r3, #6
 8002ee0:	1ad1      	subs	r1, r2, r3
 8002ee2:	f101 0310 	add.w	r3, r1, #16
 8002ee6:	f8c7 3c84 	str.w	r3, [r7, #3204]	; 0xc84
	    x2=2+((rand() % 100));
 8002eea:	f001 fd77 	bl	80049dc <rand>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	4bc7      	ldr	r3, [pc, #796]	; (8003210 <main+0x11d8>)
 8002ef2:	fb83 1302 	smull	r1, r3, r3, r2
 8002ef6:	1159      	asrs	r1, r3, #5
 8002ef8:	17d3      	asrs	r3, r2, #31
 8002efa:	1acb      	subs	r3, r1, r3
 8002efc:	2164      	movs	r1, #100	; 0x64
 8002efe:	fb01 f303 	mul.w	r3, r1, r3
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	3302      	adds	r3, #2
 8002f06:	f8c7 3c80 	str.w	r3, [r7, #3200]	; 0xc80
	    y2=16+((rand() % 100));
 8002f0a:	f001 fd67 	bl	80049dc <rand>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	4bbf      	ldr	r3, [pc, #764]	; (8003210 <main+0x11d8>)
 8002f12:	fb83 1302 	smull	r1, r3, r3, r2
 8002f16:	1159      	asrs	r1, r3, #5
 8002f18:	17d3      	asrs	r3, r2, #31
 8002f1a:	1acb      	subs	r3, r1, r3
 8002f1c:	2164      	movs	r1, #100	; 0x64
 8002f1e:	fb01 f303 	mul.w	r3, r1, r3
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	3310      	adds	r3, #16
 8002f26:	f8c7 3c7c 	str.w	r3, [r7, #3196]	; 0xc7c


	    TFT_Draw_Rectangle(x, y, x2, y2,1,ismail);
 8002f2a:	f8d7 3cd4 	ldr.w	r3, [r7, #3284]	; 0xcd4
 8002f2e:	b298      	uxth	r0, r3
 8002f30:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8002f34:	b299      	uxth	r1, r3
 8002f36:	f8d7 3c80 	ldr.w	r3, [r7, #3200]	; 0xc80
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	f8d7 3c7c 	ldr.w	r3, [r7, #3196]	; 0xc7c
 8002f40:	b29c      	uxth	r4, r3
 8002f42:	f8b7 3cd2 	ldrh.w	r3, [r7, #3282]	; 0xcd2
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	2301      	movs	r3, #1
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	4623      	mov	r3, r4
 8002f4e:	f7fe fadb 	bl	8001508 <TFT_Draw_Rectangle>
	  for (int i=0; i<250; i++)
 8002f52:	f8d7 3c94 	ldr.w	r3, [r7, #3220]	; 0xc94
 8002f56:	3301      	adds	r3, #1
 8002f58:	f8c7 3c94 	str.w	r3, [r7, #3220]	; 0xc94
 8002f5c:	f8d7 3c94 	ldr.w	r3, [r7, #3220]	; 0xc94
 8002f60:	2bf9      	cmp	r3, #249	; 0xf9
 8002f62:	f77f af7b 	ble.w	8002e5c <main+0xe24>
	  }

	  HAL_Delay(2000);
 8002f66:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002f6a:	f000 fcf3 	bl	8003954 <HAL_Delay>

//	  myGLCD.setColor(0,0,0);
	  TFT_Draw_Fill_Rectangle(1,15,798,464,RGB(0, 0, 0));
 8002f6e:	2200      	movs	r2, #0
 8002f70:	2100      	movs	r1, #0
 8002f72:	2000      	movs	r0, #0
 8002f74:	f7fd ffa0 	bl	8000eb8 <RGB>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 8002f80:	f240 321e 	movw	r2, #798	; 0x31e
 8002f84:	210f      	movs	r1, #15
 8002f86:	2001      	movs	r0, #1
 8002f88:	f7fe fb03 	bl	8001592 <TFT_Draw_Fill_Rectangle>

	// Draw some random rounded rectangles
	  for (int i=0; i<250; i++)
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	f8c7 3c90 	str.w	r3, [r7, #3216]	; 0xc90
 8002f92:	e07c      	b.n	800308e <main+0x1056>
	  {
		  ismail=RGB((rand() % 256), (rand() % 256), (rand() % 256));
 8002f94:	f001 fd22 	bl	80049dc <rand>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	425a      	negs	r2, r3
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	bf58      	it	pl
 8002fa2:	4253      	negpl	r3, r2
 8002fa4:	b2dc      	uxtb	r4, r3
 8002fa6:	f001 fd19 	bl	80049dc <rand>
 8002faa:	4603      	mov	r3, r0
 8002fac:	425a      	negs	r2, r3
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	bf58      	it	pl
 8002fb4:	4253      	negpl	r3, r2
 8002fb6:	b2dd      	uxtb	r5, r3
 8002fb8:	f001 fd10 	bl	80049dc <rand>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	425a      	negs	r2, r3
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	bf58      	it	pl
 8002fc6:	4253      	negpl	r3, r2
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	461a      	mov	r2, r3
 8002fcc:	4629      	mov	r1, r5
 8002fce:	4620      	mov	r0, r4
 8002fd0:	f7fd ff72 	bl	8000eb8 <RGB>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	f8a7 3cd2 	strh.w	r3, [r7, #3282]	; 0xcd2
	    x=2+((rand() % 797));
 8002fda:	f001 fcff 	bl	80049dc <rand>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	4b89      	ldr	r3, [pc, #548]	; (8003208 <main+0x11d0>)
 8002fe2:	fb83 1302 	smull	r1, r3, r3, r2
 8002fe6:	1119      	asrs	r1, r3, #4
 8002fe8:	17d3      	asrs	r3, r2, #31
 8002fea:	1acb      	subs	r3, r1, r3
 8002fec:	f240 311d 	movw	r1, #797	; 0x31d
 8002ff0:	fb01 f303 	mul.w	r3, r1, r3
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	3302      	adds	r3, #2
 8002ff8:	f8c7 3cd4 	str.w	r3, [r7, #3284]	; 0xcd4
	    y=16+((rand() % 448));
 8002ffc:	f001 fcee 	bl	80049dc <rand>
 8003000:	4602      	mov	r2, r0
 8003002:	4b82      	ldr	r3, [pc, #520]	; (800320c <main+0x11d4>)
 8003004:	fb83 1302 	smull	r1, r3, r3, r2
 8003008:	4413      	add	r3, r2
 800300a:	1219      	asrs	r1, r3, #8
 800300c:	17d3      	asrs	r3, r2, #31
 800300e:	1ac9      	subs	r1, r1, r3
 8003010:	460b      	mov	r3, r1
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	1a5b      	subs	r3, r3, r1
 8003016:	019b      	lsls	r3, r3, #6
 8003018:	1ad1      	subs	r1, r2, r3
 800301a:	f101 0310 	add.w	r3, r1, #16
 800301e:	f8c7 3c84 	str.w	r3, [r7, #3204]	; 0xc84
	    x2=2+((rand() % 50));
 8003022:	f001 fcdb 	bl	80049dc <rand>
 8003026:	4602      	mov	r2, r0
 8003028:	4b79      	ldr	r3, [pc, #484]	; (8003210 <main+0x11d8>)
 800302a:	fb83 1302 	smull	r1, r3, r3, r2
 800302e:	1119      	asrs	r1, r3, #4
 8003030:	17d3      	asrs	r3, r2, #31
 8003032:	1acb      	subs	r3, r1, r3
 8003034:	2132      	movs	r1, #50	; 0x32
 8003036:	fb01 f303 	mul.w	r3, r1, r3
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	3302      	adds	r3, #2
 800303e:	f8c7 3c80 	str.w	r3, [r7, #3200]	; 0xc80
	    y2=16+((rand() % 50));
 8003042:	f001 fccb 	bl	80049dc <rand>
 8003046:	4602      	mov	r2, r0
 8003048:	4b71      	ldr	r3, [pc, #452]	; (8003210 <main+0x11d8>)
 800304a:	fb83 1302 	smull	r1, r3, r3, r2
 800304e:	1119      	asrs	r1, r3, #4
 8003050:	17d3      	asrs	r3, r2, #31
 8003052:	1acb      	subs	r3, r1, r3
 8003054:	2132      	movs	r1, #50	; 0x32
 8003056:	fb01 f303 	mul.w	r3, r1, r3
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	3310      	adds	r3, #16
 800305e:	f8c7 3c7c 	str.w	r3, [r7, #3196]	; 0xc7c
	    TFT_Draw_Round_Rect(x, y, 50, 70,5,1,ismail);
 8003062:	f8d7 3cd4 	ldr.w	r3, [r7, #3284]	; 0xcd4
 8003066:	b298      	uxth	r0, r3
 8003068:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 800306c:	b299      	uxth	r1, r3
 800306e:	f8b7 3cd2 	ldrh.w	r3, [r7, #3282]	; 0xcd2
 8003072:	9302      	str	r3, [sp, #8]
 8003074:	2301      	movs	r3, #1
 8003076:	9301      	str	r3, [sp, #4]
 8003078:	2305      	movs	r3, #5
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	2346      	movs	r3, #70	; 0x46
 800307e:	2232      	movs	r2, #50	; 0x32
 8003080:	f7fe fcd0 	bl	8001a24 <TFT_Draw_Round_Rect>
	  for (int i=0; i<250; i++)
 8003084:	f8d7 3c90 	ldr.w	r3, [r7, #3216]	; 0xc90
 8003088:	3301      	adds	r3, #1
 800308a:	f8c7 3c90 	str.w	r3, [r7, #3216]	; 0xc90
 800308e:	f8d7 3c90 	ldr.w	r3, [r7, #3216]	; 0xc90
 8003092:	2bf9      	cmp	r3, #249	; 0xf9
 8003094:	f77f af7e 	ble.w	8002f94 <main+0xf5c>
	  }

	  HAL_Delay(2000);
 8003098:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800309c:	f000 fc5a 	bl	8003954 <HAL_Delay>

//	  myGLCD.setColor(0,0,0);
	  TFT_Draw_Fill_Rectangle(1,15,798,464,RGB(0, 0, 0));
 80030a0:	2200      	movs	r2, #0
 80030a2:	2100      	movs	r1, #0
 80030a4:	2000      	movs	r0, #0
 80030a6:	f7fd ff07 	bl	8000eb8 <RGB>
 80030aa:	4603      	mov	r3, r0
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 80030b2:	f240 321e 	movw	r2, #798	; 0x31e
 80030b6:	210f      	movs	r1, #15
 80030b8:	2001      	movs	r0, #1
 80030ba:	f7fe fa6a 	bl	8001592 <TFT_Draw_Fill_Rectangle>

	  for (int i=0; i<250; i++)
 80030be:	2300      	movs	r3, #0
 80030c0:	f8c7 3c8c 	str.w	r3, [r7, #3212]	; 0xc8c
 80030c4:	e083      	b.n	80031ce <main+0x1196>
	  {
		  ismail=RGB((rand() % 256), (rand() % 256), (rand() % 256));
 80030c6:	f001 fc89 	bl	80049dc <rand>
 80030ca:	4603      	mov	r3, r0
 80030cc:	425a      	negs	r2, r3
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	b2d2      	uxtb	r2, r2
 80030d2:	bf58      	it	pl
 80030d4:	4253      	negpl	r3, r2
 80030d6:	b2dc      	uxtb	r4, r3
 80030d8:	f001 fc80 	bl	80049dc <rand>
 80030dc:	4603      	mov	r3, r0
 80030de:	425a      	negs	r2, r3
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	bf58      	it	pl
 80030e6:	4253      	negpl	r3, r2
 80030e8:	b2dd      	uxtb	r5, r3
 80030ea:	f001 fc77 	bl	80049dc <rand>
 80030ee:	4603      	mov	r3, r0
 80030f0:	425a      	negs	r2, r3
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	b2d2      	uxtb	r2, r2
 80030f6:	bf58      	it	pl
 80030f8:	4253      	negpl	r3, r2
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	461a      	mov	r2, r3
 80030fe:	4629      	mov	r1, r5
 8003100:	4620      	mov	r0, r4
 8003102:	f7fd fed9 	bl	8000eb8 <RGB>
 8003106:	4603      	mov	r3, r0
 8003108:	f8a7 3cd2 	strh.w	r3, [r7, #3282]	; 0xcd2
	    x=2+((rand() % 797));
 800310c:	f001 fc66 	bl	80049dc <rand>
 8003110:	4602      	mov	r2, r0
 8003112:	4b3d      	ldr	r3, [pc, #244]	; (8003208 <main+0x11d0>)
 8003114:	fb83 1302 	smull	r1, r3, r3, r2
 8003118:	1119      	asrs	r1, r3, #4
 800311a:	17d3      	asrs	r3, r2, #31
 800311c:	1acb      	subs	r3, r1, r3
 800311e:	f240 311d 	movw	r1, #797	; 0x31d
 8003122:	fb01 f303 	mul.w	r3, r1, r3
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	3302      	adds	r3, #2
 800312a:	f8c7 3cd4 	str.w	r3, [r7, #3284]	; 0xcd4
	    y=16+((rand() % 448));
 800312e:	f001 fc55 	bl	80049dc <rand>
 8003132:	4602      	mov	r2, r0
 8003134:	4b35      	ldr	r3, [pc, #212]	; (800320c <main+0x11d4>)
 8003136:	fb83 1302 	smull	r1, r3, r3, r2
 800313a:	4413      	add	r3, r2
 800313c:	1219      	asrs	r1, r3, #8
 800313e:	17d3      	asrs	r3, r2, #31
 8003140:	1ac9      	subs	r1, r1, r3
 8003142:	460b      	mov	r3, r1
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	1a5b      	subs	r3, r3, r1
 8003148:	019b      	lsls	r3, r3, #6
 800314a:	1ad1      	subs	r1, r2, r3
 800314c:	f101 0310 	add.w	r3, r1, #16
 8003150:	f8c7 3c84 	str.w	r3, [r7, #3204]	; 0xc84
	    x2=2+((rand() % 797));
 8003154:	f001 fc42 	bl	80049dc <rand>
 8003158:	4602      	mov	r2, r0
 800315a:	4b2b      	ldr	r3, [pc, #172]	; (8003208 <main+0x11d0>)
 800315c:	fb83 1302 	smull	r1, r3, r3, r2
 8003160:	1119      	asrs	r1, r3, #4
 8003162:	17d3      	asrs	r3, r2, #31
 8003164:	1acb      	subs	r3, r1, r3
 8003166:	f240 311d 	movw	r1, #797	; 0x31d
 800316a:	fb01 f303 	mul.w	r3, r1, r3
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	3302      	adds	r3, #2
 8003172:	f8c7 3c80 	str.w	r3, [r7, #3200]	; 0xc80
	    y2=16+((rand() % 448));
 8003176:	f001 fc31 	bl	80049dc <rand>
 800317a:	4602      	mov	r2, r0
 800317c:	4b23      	ldr	r3, [pc, #140]	; (800320c <main+0x11d4>)
 800317e:	fb83 1302 	smull	r1, r3, r3, r2
 8003182:	4413      	add	r3, r2
 8003184:	1219      	asrs	r1, r3, #8
 8003186:	17d3      	asrs	r3, r2, #31
 8003188:	1ac9      	subs	r1, r1, r3
 800318a:	460b      	mov	r3, r1
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	1a5b      	subs	r3, r3, r1
 8003190:	019b      	lsls	r3, r3, #6
 8003192:	1ad1      	subs	r1, r2, r3
 8003194:	f101 0310 	add.w	r3, r1, #16
 8003198:	f8c7 3c7c 	str.w	r3, [r7, #3196]	; 0xc7c
	    TFT_Draw_Line(x, y, x2, y2,1,ismail);
 800319c:	f8d7 3cd4 	ldr.w	r3, [r7, #3284]	; 0xcd4
 80031a0:	b298      	uxth	r0, r3
 80031a2:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 80031a6:	b299      	uxth	r1, r3
 80031a8:	f8d7 3c80 	ldr.w	r3, [r7, #3200]	; 0xc80
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	f8d7 3c7c 	ldr.w	r3, [r7, #3196]	; 0xc7c
 80031b2:	b29c      	uxth	r4, r3
 80031b4:	f8b7 3cd2 	ldrh.w	r3, [r7, #3282]	; 0xcd2
 80031b8:	9301      	str	r3, [sp, #4]
 80031ba:	2301      	movs	r3, #1
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	4623      	mov	r3, r4
 80031c0:	f7fe f8da 	bl	8001378 <TFT_Draw_Line>
	  for (int i=0; i<250; i++)
 80031c4:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 80031c8:	3301      	adds	r3, #1
 80031ca:	f8c7 3c8c 	str.w	r3, [r7, #3212]	; 0xc8c
 80031ce:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 80031d2:	2bf9      	cmp	r3, #249	; 0xf9
 80031d4:	f77f af77 	ble.w	80030c6 <main+0x108e>
	  }

	  HAL_Delay(2000);
 80031d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80031dc:	f000 fbba 	bl	8003954 <HAL_Delay>

//	  myGLCD.setColor(0,0,0);
	  TFT_Draw_Fill_Rectangle(1,15,798,464,RGB(0, 0, 0));
 80031e0:	2200      	movs	r2, #0
 80031e2:	2100      	movs	r1, #0
 80031e4:	2000      	movs	r0, #0
 80031e6:	f7fd fe67 	bl	8000eb8 <RGB>
 80031ea:	4603      	mov	r3, r0
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 80031f2:	f240 321e 	movw	r2, #798	; 0x31e
 80031f6:	210f      	movs	r1, #15
 80031f8:	2001      	movs	r0, #1
 80031fa:	f7fe f9ca 	bl	8001592 <TFT_Draw_Fill_Rectangle>

	  for (int i=0; i<10000; i++)
 80031fe:	2300      	movs	r3, #0
 8003200:	f8c7 3c88 	str.w	r3, [r7, #3208]	; 0xc88
 8003204:	e059      	b.n	80032ba <main+0x1282>
 8003206:	bf00      	nop
 8003208:	0523a759 	.word	0x0523a759
 800320c:	92492493 	.word	0x92492493
 8003210:	51eb851f 	.word	0x51eb851f
	  {
		  ismail=RGB((rand() % 256), (rand() % 256), (rand() % 256));
 8003214:	f001 fbe2 	bl	80049dc <rand>
 8003218:	4603      	mov	r3, r0
 800321a:	425a      	negs	r2, r3
 800321c:	b2db      	uxtb	r3, r3
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	bf58      	it	pl
 8003222:	4253      	negpl	r3, r2
 8003224:	b2dc      	uxtb	r4, r3
 8003226:	f001 fbd9 	bl	80049dc <rand>
 800322a:	4603      	mov	r3, r0
 800322c:	425a      	negs	r2, r3
 800322e:	b2db      	uxtb	r3, r3
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	bf58      	it	pl
 8003234:	4253      	negpl	r3, r2
 8003236:	b2dd      	uxtb	r5, r3
 8003238:	f001 fbd0 	bl	80049dc <rand>
 800323c:	4603      	mov	r3, r0
 800323e:	425a      	negs	r2, r3
 8003240:	b2db      	uxtb	r3, r3
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	bf58      	it	pl
 8003246:	4253      	negpl	r3, r2
 8003248:	b2db      	uxtb	r3, r3
 800324a:	461a      	mov	r2, r3
 800324c:	4629      	mov	r1, r5
 800324e:	4620      	mov	r0, r4
 8003250:	f7fd fe32 	bl	8000eb8 <RGB>
 8003254:	4603      	mov	r3, r0
 8003256:	f8a7 3cd2 	strh.w	r3, [r7, #3282]	; 0xcd2
		  Lcd_SetPixel(2+((rand() % 797)), 16+((rand() % 448)),ismail);
 800325a:	f001 fbbf 	bl	80049dc <rand>
 800325e:	4603      	mov	r3, r0
 8003260:	4a1c      	ldr	r2, [pc, #112]	; (80032d4 <main+0x129c>)
 8003262:	fb82 1203 	smull	r1, r2, r2, r3
 8003266:	1111      	asrs	r1, r2, #4
 8003268:	17da      	asrs	r2, r3, #31
 800326a:	1a8a      	subs	r2, r1, r2
 800326c:	f240 311d 	movw	r1, #797	; 0x31d
 8003270:	fb01 f202 	mul.w	r2, r1, r2
 8003274:	1a9a      	subs	r2, r3, r2
 8003276:	b293      	uxth	r3, r2
 8003278:	3302      	adds	r3, #2
 800327a:	b29b      	uxth	r3, r3
 800327c:	b21c      	sxth	r4, r3
 800327e:	f001 fbad 	bl	80049dc <rand>
 8003282:	4602      	mov	r2, r0
 8003284:	4b14      	ldr	r3, [pc, #80]	; (80032d8 <main+0x12a0>)
 8003286:	fb83 1302 	smull	r1, r3, r3, r2
 800328a:	4413      	add	r3, r2
 800328c:	1219      	asrs	r1, r3, #8
 800328e:	17d3      	asrs	r3, r2, #31
 8003290:	1ac9      	subs	r1, r1, r3
 8003292:	460b      	mov	r3, r1
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	1a5b      	subs	r3, r3, r1
 8003298:	019b      	lsls	r3, r3, #6
 800329a:	1ad1      	subs	r1, r2, r3
 800329c:	b28b      	uxth	r3, r1
 800329e:	3310      	adds	r3, #16
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	b21b      	sxth	r3, r3
 80032a4:	f9b7 2cd2 	ldrsh.w	r2, [r7, #3282]	; 0xcd2
 80032a8:	4619      	mov	r1, r3
 80032aa:	4620      	mov	r0, r4
 80032ac:	f7fd feb2 	bl	8001014 <Lcd_SetPixel>
	  for (int i=0; i<10000; i++)
 80032b0:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 80032b4:	3301      	adds	r3, #1
 80032b6:	f8c7 3c88 	str.w	r3, [r7, #3208]	; 0xc88
 80032ba:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 80032be:	f242 720f 	movw	r2, #9999	; 0x270f
 80032c2:	4293      	cmp	r3, r2
 80032c4:	dda6      	ble.n	8003214 <main+0x11dc>
	  }

	  HAL_Delay(2000);
 80032c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80032ca:	f000 fb43 	bl	8003954 <HAL_Delay>
  {
 80032ce:	f7fe becb 	b.w	8002068 <main+0x30>
 80032d2:	bf00      	nop
 80032d4:	0523a759 	.word	0x0523a759
 80032d8:	92492493 	.word	0x92492493

080032dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b094      	sub	sp, #80	; 0x50
 80032e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032e2:	f107 0320 	add.w	r3, r7, #32
 80032e6:	2230      	movs	r2, #48	; 0x30
 80032e8:	2100      	movs	r1, #0
 80032ea:	4618      	mov	r0, r3
 80032ec:	f001 fca7 	bl	8004c3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032f0:	f107 030c 	add.w	r3, r7, #12
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	605a      	str	r2, [r3, #4]
 80032fa:	609a      	str	r2, [r3, #8]
 80032fc:	60da      	str	r2, [r3, #12]
 80032fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003300:	2300      	movs	r3, #0
 8003302:	60bb      	str	r3, [r7, #8]
 8003304:	4b28      	ldr	r3, [pc, #160]	; (80033a8 <SystemClock_Config+0xcc>)
 8003306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003308:	4a27      	ldr	r2, [pc, #156]	; (80033a8 <SystemClock_Config+0xcc>)
 800330a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800330e:	6413      	str	r3, [r2, #64]	; 0x40
 8003310:	4b25      	ldr	r3, [pc, #148]	; (80033a8 <SystemClock_Config+0xcc>)
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003318:	60bb      	str	r3, [r7, #8]
 800331a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800331c:	2300      	movs	r3, #0
 800331e:	607b      	str	r3, [r7, #4]
 8003320:	4b22      	ldr	r3, [pc, #136]	; (80033ac <SystemClock_Config+0xd0>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a21      	ldr	r2, [pc, #132]	; (80033ac <SystemClock_Config+0xd0>)
 8003326:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800332a:	6013      	str	r3, [r2, #0]
 800332c:	4b1f      	ldr	r3, [pc, #124]	; (80033ac <SystemClock_Config+0xd0>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003334:	607b      	str	r3, [r7, #4]
 8003336:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003338:	2301      	movs	r3, #1
 800333a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800333c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003340:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003342:	2302      	movs	r3, #2
 8003344:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003346:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800334a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800334c:	2308      	movs	r3, #8
 800334e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003350:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003354:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003356:	2302      	movs	r3, #2
 8003358:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800335a:	2307      	movs	r3, #7
 800335c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800335e:	f107 0320 	add.w	r3, r7, #32
 8003362:	4618      	mov	r0, r3
 8003364:	f000 fdb6 	bl	8003ed4 <HAL_RCC_OscConfig>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800336e:	f000 f8cf 	bl	8003510 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003372:	230f      	movs	r3, #15
 8003374:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003376:	2302      	movs	r3, #2
 8003378:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800337a:	2300      	movs	r3, #0
 800337c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800337e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003382:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003388:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800338a:	f107 030c 	add.w	r3, r7, #12
 800338e:	2105      	movs	r1, #5
 8003390:	4618      	mov	r0, r3
 8003392:	f001 f817 	bl	80043c4 <HAL_RCC_ClockConfig>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800339c:	f000 f8b8 	bl	8003510 <Error_Handler>
  }
}
 80033a0:	bf00      	nop
 80033a2:	3750      	adds	r7, #80	; 0x50
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40023800 	.word	0x40023800
 80033ac:	40007000 	.word	0x40007000

080033b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b088      	sub	sp, #32
 80033b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b6:	f107 030c 	add.w	r3, r7, #12
 80033ba:	2200      	movs	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	605a      	str	r2, [r3, #4]
 80033c0:	609a      	str	r2, [r3, #8]
 80033c2:	60da      	str	r2, [r3, #12]
 80033c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80033c6:	2300      	movs	r3, #0
 80033c8:	60bb      	str	r3, [r7, #8]
 80033ca:	4b1f      	ldr	r3, [pc, #124]	; (8003448 <MX_GPIO_Init+0x98>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	4a1e      	ldr	r2, [pc, #120]	; (8003448 <MX_GPIO_Init+0x98>)
 80033d0:	f043 0310 	orr.w	r3, r3, #16
 80033d4:	6313      	str	r3, [r2, #48]	; 0x30
 80033d6:	4b1c      	ldr	r3, [pc, #112]	; (8003448 <MX_GPIO_Init+0x98>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	f003 0310 	and.w	r3, r3, #16
 80033de:	60bb      	str	r3, [r7, #8]
 80033e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80033e2:	2300      	movs	r3, #0
 80033e4:	607b      	str	r3, [r7, #4]
 80033e6:	4b18      	ldr	r3, [pc, #96]	; (8003448 <MX_GPIO_Init+0x98>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	4a17      	ldr	r2, [pc, #92]	; (8003448 <MX_GPIO_Init+0x98>)
 80033ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033f0:	6313      	str	r3, [r2, #48]	; 0x30
 80033f2:	4b15      	ldr	r3, [pc, #84]	; (8003448 <MX_GPIO_Init+0x98>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fa:	607b      	str	r3, [r7, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033fe:	2300      	movs	r3, #0
 8003400:	603b      	str	r3, [r7, #0]
 8003402:	4b11      	ldr	r3, [pc, #68]	; (8003448 <MX_GPIO_Init+0x98>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	4a10      	ldr	r2, [pc, #64]	; (8003448 <MX_GPIO_Init+0x98>)
 8003408:	f043 0308 	orr.w	r3, r3, #8
 800340c:	6313      	str	r3, [r2, #48]	; 0x30
 800340e:	4b0e      	ldr	r3, [pc, #56]	; (8003448 <MX_GPIO_Init+0x98>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	603b      	str	r3, [r7, #0]
 8003418:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_RESET_GPIO_Port, TFT_RESET_Pin, GPIO_PIN_RESET);
 800341a:	2200      	movs	r2, #0
 800341c:	2104      	movs	r1, #4
 800341e:	480b      	ldr	r0, [pc, #44]	; (800344c <MX_GPIO_Init+0x9c>)
 8003420:	f000 fd3e 	bl	8003ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TFT_RESET_Pin */
  GPIO_InitStruct.Pin = TFT_RESET_Pin;
 8003424:	2304      	movs	r3, #4
 8003426:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003428:	2301      	movs	r3, #1
 800342a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342c:	2300      	movs	r3, #0
 800342e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003430:	2303      	movs	r3, #3
 8003432:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TFT_RESET_GPIO_Port, &GPIO_InitStruct);
 8003434:	f107 030c 	add.w	r3, r7, #12
 8003438:	4619      	mov	r1, r3
 800343a:	4804      	ldr	r0, [pc, #16]	; (800344c <MX_GPIO_Init+0x9c>)
 800343c:	f000 fb94 	bl	8003b68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003440:	bf00      	nop
 8003442:	3720      	adds	r7, #32
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40023800 	.word	0x40023800
 800344c:	40021000 	.word	0x40021000

08003450 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b088      	sub	sp, #32
 8003454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8003456:	1d3b      	adds	r3, r7, #4
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	605a      	str	r2, [r3, #4]
 800345e:	609a      	str	r2, [r3, #8]
 8003460:	60da      	str	r2, [r3, #12]
 8003462:	611a      	str	r2, [r3, #16]
 8003464:	615a      	str	r2, [r3, #20]
 8003466:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8003468:	4b27      	ldr	r3, [pc, #156]	; (8003508 <MX_FSMC_Init+0xb8>)
 800346a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800346e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8003470:	4b25      	ldr	r3, [pc, #148]	; (8003508 <MX_FSMC_Init+0xb8>)
 8003472:	4a26      	ldr	r2, [pc, #152]	; (800350c <MX_FSMC_Init+0xbc>)
 8003474:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8003476:	4b24      	ldr	r3, [pc, #144]	; (8003508 <MX_FSMC_Init+0xb8>)
 8003478:	2200      	movs	r2, #0
 800347a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800347c:	4b22      	ldr	r3, [pc, #136]	; (8003508 <MX_FSMC_Init+0xb8>)
 800347e:	2200      	movs	r2, #0
 8003480:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8003482:	4b21      	ldr	r3, [pc, #132]	; (8003508 <MX_FSMC_Init+0xb8>)
 8003484:	2200      	movs	r2, #0
 8003486:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8003488:	4b1f      	ldr	r3, [pc, #124]	; (8003508 <MX_FSMC_Init+0xb8>)
 800348a:	2210      	movs	r2, #16
 800348c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800348e:	4b1e      	ldr	r3, [pc, #120]	; (8003508 <MX_FSMC_Init+0xb8>)
 8003490:	2200      	movs	r2, #0
 8003492:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8003494:	4b1c      	ldr	r3, [pc, #112]	; (8003508 <MX_FSMC_Init+0xb8>)
 8003496:	2200      	movs	r2, #0
 8003498:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800349a:	4b1b      	ldr	r3, [pc, #108]	; (8003508 <MX_FSMC_Init+0xb8>)
 800349c:	2200      	movs	r2, #0
 800349e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80034a0:	4b19      	ldr	r3, [pc, #100]	; (8003508 <MX_FSMC_Init+0xb8>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80034a6:	4b18      	ldr	r3, [pc, #96]	; (8003508 <MX_FSMC_Init+0xb8>)
 80034a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034ac:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80034ae:	4b16      	ldr	r3, [pc, #88]	; (8003508 <MX_FSMC_Init+0xb8>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80034b4:	4b14      	ldr	r3, [pc, #80]	; (8003508 <MX_FSMC_Init+0xb8>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80034ba:	4b13      	ldr	r3, [pc, #76]	; (8003508 <MX_FSMC_Init+0xb8>)
 80034bc:	2200      	movs	r2, #0
 80034be:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80034c0:	4b11      	ldr	r3, [pc, #68]	; (8003508 <MX_FSMC_Init+0xb8>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80034c6:	4b10      	ldr	r3, [pc, #64]	; (8003508 <MX_FSMC_Init+0xb8>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 1;
 80034cc:	2301      	movs	r3, #1
 80034ce:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80034d0:	230f      	movs	r3, #15
 80034d2:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 80034d4:	2305      	movs	r3, #5
 80034d6:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 80034d8:	2300      	movs	r3, #0
 80034da:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80034dc:	2310      	movs	r3, #16
 80034de:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80034e0:	2311      	movs	r3, #17
 80034e2:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80034e4:	2300      	movs	r3, #0
 80034e6:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80034e8:	1d3b      	adds	r3, r7, #4
 80034ea:	2200      	movs	r2, #0
 80034ec:	4619      	mov	r1, r3
 80034ee:	4806      	ldr	r0, [pc, #24]	; (8003508 <MX_FSMC_Init+0xb8>)
 80034f0:	f001 f954 	bl	800479c <HAL_SRAM_Init>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 80034fa:	f000 f809 	bl	8003510 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80034fe:	bf00      	nop
 8003500:	3720      	adds	r7, #32
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	20000084 	.word	0x20000084
 800350c:	a0000104 	.word	0xa0000104

08003510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003514:	b672      	cpsid	i
}
 8003516:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003518:	e7fe      	b.n	8003518 <Error_Handler+0x8>
	...

0800351c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	607b      	str	r3, [r7, #4]
 8003526:	4b10      	ldr	r3, [pc, #64]	; (8003568 <HAL_MspInit+0x4c>)
 8003528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352a:	4a0f      	ldr	r2, [pc, #60]	; (8003568 <HAL_MspInit+0x4c>)
 800352c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003530:	6453      	str	r3, [r2, #68]	; 0x44
 8003532:	4b0d      	ldr	r3, [pc, #52]	; (8003568 <HAL_MspInit+0x4c>)
 8003534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800353a:	607b      	str	r3, [r7, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800353e:	2300      	movs	r3, #0
 8003540:	603b      	str	r3, [r7, #0]
 8003542:	4b09      	ldr	r3, [pc, #36]	; (8003568 <HAL_MspInit+0x4c>)
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	4a08      	ldr	r2, [pc, #32]	; (8003568 <HAL_MspInit+0x4c>)
 8003548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800354c:	6413      	str	r3, [r2, #64]	; 0x40
 800354e:	4b06      	ldr	r3, [pc, #24]	; (8003568 <HAL_MspInit+0x4c>)
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003556:	603b      	str	r3, [r7, #0]
 8003558:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800355a:	2007      	movs	r0, #7
 800355c:	f000 fad0 	bl	8003b00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003560:	bf00      	nop
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40023800 	.word	0x40023800

0800356c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003572:	1d3b      	adds	r3, r7, #4
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	605a      	str	r2, [r3, #4]
 800357a:	609a      	str	r2, [r3, #8]
 800357c:	60da      	str	r2, [r3, #12]
 800357e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8003580:	4b1c      	ldr	r3, [pc, #112]	; (80035f4 <HAL_FSMC_MspInit+0x88>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d131      	bne.n	80035ec <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8003588:	4b1a      	ldr	r3, [pc, #104]	; (80035f4 <HAL_FSMC_MspInit+0x88>)
 800358a:	2201      	movs	r2, #1
 800358c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	603b      	str	r3, [r7, #0]
 8003592:	4b19      	ldr	r3, [pc, #100]	; (80035f8 <HAL_FSMC_MspInit+0x8c>)
 8003594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003596:	4a18      	ldr	r2, [pc, #96]	; (80035f8 <HAL_FSMC_MspInit+0x8c>)
 8003598:	f043 0301 	orr.w	r3, r3, #1
 800359c:	6393      	str	r3, [r2, #56]	; 0x38
 800359e:	4b16      	ldr	r3, [pc, #88]	; (80035f8 <HAL_FSMC_MspInit+0x8c>)
 80035a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	603b      	str	r3, [r7, #0]
 80035a8:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80035aa:	f64f 7380 	movw	r3, #65408	; 0xff80
 80035ae:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b0:	2302      	movs	r3, #2
 80035b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b4:	2300      	movs	r3, #0
 80035b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035b8:	2303      	movs	r3, #3
 80035ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80035bc:	230c      	movs	r3, #12
 80035be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035c0:	1d3b      	adds	r3, r7, #4
 80035c2:	4619      	mov	r1, r3
 80035c4:	480d      	ldr	r0, [pc, #52]	; (80035fc <HAL_FSMC_MspInit+0x90>)
 80035c6:	f000 facf 	bl	8003b68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80035ca:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 80035ce:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d0:	2302      	movs	r3, #2
 80035d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d4:	2300      	movs	r3, #0
 80035d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035d8:	2303      	movs	r3, #3
 80035da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80035dc:	230c      	movs	r3, #12
 80035de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035e0:	1d3b      	adds	r3, r7, #4
 80035e2:	4619      	mov	r1, r3
 80035e4:	4806      	ldr	r0, [pc, #24]	; (8003600 <HAL_FSMC_MspInit+0x94>)
 80035e6:	f000 fabf 	bl	8003b68 <HAL_GPIO_Init>
 80035ea:	e000      	b.n	80035ee <HAL_FSMC_MspInit+0x82>
    return;
 80035ec:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80035ee:	3718      	adds	r7, #24
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	200000d4 	.word	0x200000d4
 80035f8:	40023800 	.word	0x40023800
 80035fc:	40021000 	.word	0x40021000
 8003600:	40020c00 	.word	0x40020c00

08003604 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800360c:	f7ff ffae 	bl	800356c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8003610:	bf00      	nop
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800361c:	e7fe      	b.n	800361c <NMI_Handler+0x4>

0800361e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800361e:	b480      	push	{r7}
 8003620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003622:	e7fe      	b.n	8003622 <HardFault_Handler+0x4>

08003624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003628:	e7fe      	b.n	8003628 <MemManage_Handler+0x4>

0800362a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800362a:	b480      	push	{r7}
 800362c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800362e:	e7fe      	b.n	800362e <BusFault_Handler+0x4>

08003630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003634:	e7fe      	b.n	8003634 <UsageFault_Handler+0x4>

08003636 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003636:	b480      	push	{r7}
 8003638:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800363a:	bf00      	nop
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003648:	bf00      	nop
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003652:	b480      	push	{r7}
 8003654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003656:	bf00      	nop
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003664:	f000 f956 	bl	8003914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003668:	bf00      	nop
 800366a:	bd80      	pop	{r7, pc}

0800366c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  return 1;
 8003670:	2301      	movs	r3, #1
}
 8003672:	4618      	mov	r0, r3
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <_kill>:

int _kill(int pid, int sig)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003686:	f001 fb29 	bl	8004cdc <__errno>
 800368a:	4603      	mov	r3, r0
 800368c:	2216      	movs	r2, #22
 800368e:	601a      	str	r2, [r3, #0]
  return -1;
 8003690:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003694:	4618      	mov	r0, r3
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <_exit>:

void _exit (int status)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80036a4:	f04f 31ff 	mov.w	r1, #4294967295
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f7ff ffe7 	bl	800367c <_kill>
  while (1) {}    /* Make sure we hang here */
 80036ae:	e7fe      	b.n	80036ae <_exit+0x12>

080036b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036bc:	2300      	movs	r3, #0
 80036be:	617b      	str	r3, [r7, #20]
 80036c0:	e00a      	b.n	80036d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80036c2:	f3af 8000 	nop.w
 80036c6:	4601      	mov	r1, r0
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	1c5a      	adds	r2, r3, #1
 80036cc:	60ba      	str	r2, [r7, #8]
 80036ce:	b2ca      	uxtb	r2, r1
 80036d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	3301      	adds	r3, #1
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	429a      	cmp	r2, r3
 80036de:	dbf0      	blt.n	80036c2 <_read+0x12>
  }

  return len;
 80036e0:	687b      	ldr	r3, [r7, #4]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3718      	adds	r7, #24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b086      	sub	sp, #24
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	60f8      	str	r0, [r7, #12]
 80036f2:	60b9      	str	r1, [r7, #8]
 80036f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036f6:	2300      	movs	r3, #0
 80036f8:	617b      	str	r3, [r7, #20]
 80036fa:	e009      	b.n	8003710 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	1c5a      	adds	r2, r3, #1
 8003700:	60ba      	str	r2, [r7, #8]
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	3301      	adds	r3, #1
 800370e:	617b      	str	r3, [r7, #20]
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	429a      	cmp	r2, r3
 8003716:	dbf1      	blt.n	80036fc <_write+0x12>
  }
  return len;
 8003718:	687b      	ldr	r3, [r7, #4]
}
 800371a:	4618      	mov	r0, r3
 800371c:	3718      	adds	r7, #24
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <_close>:

int _close(int file)
{
 8003722:	b480      	push	{r7}
 8003724:	b083      	sub	sp, #12
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800372a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800372e:	4618      	mov	r0, r3
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800373a:	b480      	push	{r7}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
 8003742:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800374a:	605a      	str	r2, [r3, #4]
  return 0;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <_isatty>:

int _isatty(int file)
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003762:	2301      	movs	r3, #1
}
 8003764:	4618      	mov	r0, r3
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
	...

0800378c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003794:	4a14      	ldr	r2, [pc, #80]	; (80037e8 <_sbrk+0x5c>)
 8003796:	4b15      	ldr	r3, [pc, #84]	; (80037ec <_sbrk+0x60>)
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037a0:	4b13      	ldr	r3, [pc, #76]	; (80037f0 <_sbrk+0x64>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d102      	bne.n	80037ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037a8:	4b11      	ldr	r3, [pc, #68]	; (80037f0 <_sbrk+0x64>)
 80037aa:	4a12      	ldr	r2, [pc, #72]	; (80037f4 <_sbrk+0x68>)
 80037ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037ae:	4b10      	ldr	r3, [pc, #64]	; (80037f0 <_sbrk+0x64>)
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4413      	add	r3, r2
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d207      	bcs.n	80037cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037bc:	f001 fa8e 	bl	8004cdc <__errno>
 80037c0:	4603      	mov	r3, r0
 80037c2:	220c      	movs	r2, #12
 80037c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037c6:	f04f 33ff 	mov.w	r3, #4294967295
 80037ca:	e009      	b.n	80037e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037cc:	4b08      	ldr	r3, [pc, #32]	; (80037f0 <_sbrk+0x64>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037d2:	4b07      	ldr	r3, [pc, #28]	; (80037f0 <_sbrk+0x64>)
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4413      	add	r3, r2
 80037da:	4a05      	ldr	r2, [pc, #20]	; (80037f0 <_sbrk+0x64>)
 80037dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037de:	68fb      	ldr	r3, [r7, #12]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3718      	adds	r7, #24
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	20020000 	.word	0x20020000
 80037ec:	00000400 	.word	0x00000400
 80037f0:	200000d8 	.word	0x200000d8
 80037f4:	20000230 	.word	0x20000230

080037f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037fc:	4b06      	ldr	r3, [pc, #24]	; (8003818 <SystemInit+0x20>)
 80037fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003802:	4a05      	ldr	r2, [pc, #20]	; (8003818 <SystemInit+0x20>)
 8003804:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003808:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800380c:	bf00      	nop
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	e000ed00 	.word	0xe000ed00

0800381c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800381c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003854 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003820:	480d      	ldr	r0, [pc, #52]	; (8003858 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003822:	490e      	ldr	r1, [pc, #56]	; (800385c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003824:	4a0e      	ldr	r2, [pc, #56]	; (8003860 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003828:	e002      	b.n	8003830 <LoopCopyDataInit>

0800382a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800382a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800382c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800382e:	3304      	adds	r3, #4

08003830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003834:	d3f9      	bcc.n	800382a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003836:	4a0b      	ldr	r2, [pc, #44]	; (8003864 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003838:	4c0b      	ldr	r4, [pc, #44]	; (8003868 <LoopFillZerobss+0x26>)
  movs r3, #0
 800383a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800383c:	e001      	b.n	8003842 <LoopFillZerobss>

0800383e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800383e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003840:	3204      	adds	r2, #4

08003842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003844:	d3fb      	bcc.n	800383e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003846:	f7ff ffd7 	bl	80037f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800384a:	f001 fa4d 	bl	8004ce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800384e:	f7fe fbf3 	bl	8002038 <main>
  bx  lr    
 8003852:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003854:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800385c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8003860:	08022150 	.word	0x08022150
  ldr r2, =_sbss
 8003864:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8003868:	2000022c 	.word	0x2000022c

0800386c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800386c:	e7fe      	b.n	800386c <ADC_IRQHandler>
	...

08003870 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003874:	4b0e      	ldr	r3, [pc, #56]	; (80038b0 <HAL_Init+0x40>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a0d      	ldr	r2, [pc, #52]	; (80038b0 <HAL_Init+0x40>)
 800387a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800387e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003880:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <HAL_Init+0x40>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a0a      	ldr	r2, [pc, #40]	; (80038b0 <HAL_Init+0x40>)
 8003886:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800388a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800388c:	4b08      	ldr	r3, [pc, #32]	; (80038b0 <HAL_Init+0x40>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a07      	ldr	r2, [pc, #28]	; (80038b0 <HAL_Init+0x40>)
 8003892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003896:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003898:	2003      	movs	r0, #3
 800389a:	f000 f931 	bl	8003b00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800389e:	2000      	movs	r0, #0
 80038a0:	f000 f808 	bl	80038b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038a4:	f7ff fe3a 	bl	800351c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	40023c00 	.word	0x40023c00

080038b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038bc:	4b12      	ldr	r3, [pc, #72]	; (8003908 <HAL_InitTick+0x54>)
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	4b12      	ldr	r3, [pc, #72]	; (800390c <HAL_InitTick+0x58>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	4619      	mov	r1, r3
 80038c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80038ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 f93b 	bl	8003b4e <HAL_SYSTICK_Config>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e00e      	b.n	8003900 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b0f      	cmp	r3, #15
 80038e6:	d80a      	bhi.n	80038fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038e8:	2200      	movs	r2, #0
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	f04f 30ff 	mov.w	r0, #4294967295
 80038f0:	f000 f911 	bl	8003b16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038f4:	4a06      	ldr	r2, [pc, #24]	; (8003910 <HAL_InitTick+0x5c>)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
 80038fc:	e000      	b.n	8003900 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
}
 8003900:	4618      	mov	r0, r3
 8003902:	3708      	adds	r7, #8
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	20000000 	.word	0x20000000
 800390c:	20000008 	.word	0x20000008
 8003910:	20000004 	.word	0x20000004

08003914 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003918:	4b06      	ldr	r3, [pc, #24]	; (8003934 <HAL_IncTick+0x20>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	461a      	mov	r2, r3
 800391e:	4b06      	ldr	r3, [pc, #24]	; (8003938 <HAL_IncTick+0x24>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4413      	add	r3, r2
 8003924:	4a04      	ldr	r2, [pc, #16]	; (8003938 <HAL_IncTick+0x24>)
 8003926:	6013      	str	r3, [r2, #0]
}
 8003928:	bf00      	nop
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	20000008 	.word	0x20000008
 8003938:	200000dc 	.word	0x200000dc

0800393c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  return uwTick;
 8003940:	4b03      	ldr	r3, [pc, #12]	; (8003950 <HAL_GetTick+0x14>)
 8003942:	681b      	ldr	r3, [r3, #0]
}
 8003944:	4618      	mov	r0, r3
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	200000dc 	.word	0x200000dc

08003954 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800395c:	f7ff ffee 	bl	800393c <HAL_GetTick>
 8003960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396c:	d005      	beq.n	800397a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800396e:	4b0a      	ldr	r3, [pc, #40]	; (8003998 <HAL_Delay+0x44>)
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4413      	add	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800397a:	bf00      	nop
 800397c:	f7ff ffde 	bl	800393c <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	429a      	cmp	r2, r3
 800398a:	d8f7      	bhi.n	800397c <HAL_Delay+0x28>
  {
  }
}
 800398c:	bf00      	nop
 800398e:	bf00      	nop
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	20000008 	.word	0x20000008

0800399c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039ac:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <__NVIC_SetPriorityGrouping+0x44>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039b8:	4013      	ands	r3, r2
 80039ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039ce:	4a04      	ldr	r2, [pc, #16]	; (80039e0 <__NVIC_SetPriorityGrouping+0x44>)
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	60d3      	str	r3, [r2, #12]
}
 80039d4:	bf00      	nop
 80039d6:	3714      	adds	r7, #20
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	e000ed00 	.word	0xe000ed00

080039e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039e8:	4b04      	ldr	r3, [pc, #16]	; (80039fc <__NVIC_GetPriorityGrouping+0x18>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	0a1b      	lsrs	r3, r3, #8
 80039ee:	f003 0307 	and.w	r3, r3, #7
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	e000ed00 	.word	0xe000ed00

08003a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	4603      	mov	r3, r0
 8003a08:	6039      	str	r1, [r7, #0]
 8003a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	db0a      	blt.n	8003a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	490c      	ldr	r1, [pc, #48]	; (8003a4c <__NVIC_SetPriority+0x4c>)
 8003a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1e:	0112      	lsls	r2, r2, #4
 8003a20:	b2d2      	uxtb	r2, r2
 8003a22:	440b      	add	r3, r1
 8003a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a28:	e00a      	b.n	8003a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	4908      	ldr	r1, [pc, #32]	; (8003a50 <__NVIC_SetPriority+0x50>)
 8003a30:	79fb      	ldrb	r3, [r7, #7]
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	3b04      	subs	r3, #4
 8003a38:	0112      	lsls	r2, r2, #4
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	761a      	strb	r2, [r3, #24]
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	e000e100 	.word	0xe000e100
 8003a50:	e000ed00 	.word	0xe000ed00

08003a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b089      	sub	sp, #36	; 0x24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	f1c3 0307 	rsb	r3, r3, #7
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	bf28      	it	cs
 8003a72:	2304      	movcs	r3, #4
 8003a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	3304      	adds	r3, #4
 8003a7a:	2b06      	cmp	r3, #6
 8003a7c:	d902      	bls.n	8003a84 <NVIC_EncodePriority+0x30>
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	3b03      	subs	r3, #3
 8003a82:	e000      	b.n	8003a86 <NVIC_EncodePriority+0x32>
 8003a84:	2300      	movs	r3, #0
 8003a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a88:	f04f 32ff 	mov.w	r2, #4294967295
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a92:	43da      	mvns	r2, r3
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	401a      	ands	r2, r3
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa6:	43d9      	mvns	r1, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aac:	4313      	orrs	r3, r2
         );
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3724      	adds	r7, #36	; 0x24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
	...

08003abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003acc:	d301      	bcc.n	8003ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e00f      	b.n	8003af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ad2:	4a0a      	ldr	r2, [pc, #40]	; (8003afc <SysTick_Config+0x40>)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ada:	210f      	movs	r1, #15
 8003adc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae0:	f7ff ff8e 	bl	8003a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ae4:	4b05      	ldr	r3, [pc, #20]	; (8003afc <SysTick_Config+0x40>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003aea:	4b04      	ldr	r3, [pc, #16]	; (8003afc <SysTick_Config+0x40>)
 8003aec:	2207      	movs	r2, #7
 8003aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	e000e010 	.word	0xe000e010

08003b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7ff ff47 	bl	800399c <__NVIC_SetPriorityGrouping>
}
 8003b0e:	bf00      	nop
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b086      	sub	sp, #24
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	60b9      	str	r1, [r7, #8]
 8003b20:	607a      	str	r2, [r7, #4]
 8003b22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b24:	2300      	movs	r3, #0
 8003b26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b28:	f7ff ff5c 	bl	80039e4 <__NVIC_GetPriorityGrouping>
 8003b2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	68b9      	ldr	r1, [r7, #8]
 8003b32:	6978      	ldr	r0, [r7, #20]
 8003b34:	f7ff ff8e 	bl	8003a54 <NVIC_EncodePriority>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b3e:	4611      	mov	r1, r2
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7ff ff5d 	bl	8003a00 <__NVIC_SetPriority>
}
 8003b46:	bf00      	nop
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b082      	sub	sp, #8
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7ff ffb0 	bl	8003abc <SysTick_Config>
 8003b5c:	4603      	mov	r3, r0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
	...

08003b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b089      	sub	sp, #36	; 0x24
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61fb      	str	r3, [r7, #28]
 8003b82:	e16b      	b.n	8003e5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b84:	2201      	movs	r2, #1
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	4013      	ands	r3, r2
 8003b96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	f040 815a 	bne.w	8003e56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d005      	beq.n	8003bba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d130      	bne.n	8003c1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	2203      	movs	r2, #3
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	43db      	mvns	r3, r3
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	68da      	ldr	r2, [r3, #12]
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	fa02 f303 	lsl.w	r3, r2, r3
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	69ba      	ldr	r2, [r7, #24]
 8003be8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	091b      	lsrs	r3, r3, #4
 8003c06:	f003 0201 	and.w	r2, r3, #1
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f003 0303 	and.w	r3, r3, #3
 8003c24:	2b03      	cmp	r3, #3
 8003c26:	d017      	beq.n	8003c58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	2203      	movs	r2, #3
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f003 0303 	and.w	r3, r3, #3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d123      	bne.n	8003cac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	08da      	lsrs	r2, r3, #3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3208      	adds	r2, #8
 8003c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	220f      	movs	r2, #15
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	43db      	mvns	r3, r3
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	4013      	ands	r3, r2
 8003c86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	691a      	ldr	r2, [r3, #16]
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	f003 0307 	and.w	r3, r3, #7
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	08da      	lsrs	r2, r3, #3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3208      	adds	r2, #8
 8003ca6:	69b9      	ldr	r1, [r7, #24]
 8003ca8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	2203      	movs	r2, #3
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f003 0203 	and.w	r2, r3, #3
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 80b4 	beq.w	8003e56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	4b60      	ldr	r3, [pc, #384]	; (8003e74 <HAL_GPIO_Init+0x30c>)
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf6:	4a5f      	ldr	r2, [pc, #380]	; (8003e74 <HAL_GPIO_Init+0x30c>)
 8003cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8003cfe:	4b5d      	ldr	r3, [pc, #372]	; (8003e74 <HAL_GPIO_Init+0x30c>)
 8003d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d0a:	4a5b      	ldr	r2, [pc, #364]	; (8003e78 <HAL_GPIO_Init+0x310>)
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	089b      	lsrs	r3, r3, #2
 8003d10:	3302      	adds	r3, #2
 8003d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	220f      	movs	r2, #15
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	43db      	mvns	r3, r3
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a52      	ldr	r2, [pc, #328]	; (8003e7c <HAL_GPIO_Init+0x314>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d02b      	beq.n	8003d8e <HAL_GPIO_Init+0x226>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a51      	ldr	r2, [pc, #324]	; (8003e80 <HAL_GPIO_Init+0x318>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d025      	beq.n	8003d8a <HAL_GPIO_Init+0x222>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a50      	ldr	r2, [pc, #320]	; (8003e84 <HAL_GPIO_Init+0x31c>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d01f      	beq.n	8003d86 <HAL_GPIO_Init+0x21e>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a4f      	ldr	r2, [pc, #316]	; (8003e88 <HAL_GPIO_Init+0x320>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d019      	beq.n	8003d82 <HAL_GPIO_Init+0x21a>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a4e      	ldr	r2, [pc, #312]	; (8003e8c <HAL_GPIO_Init+0x324>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d013      	beq.n	8003d7e <HAL_GPIO_Init+0x216>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a4d      	ldr	r2, [pc, #308]	; (8003e90 <HAL_GPIO_Init+0x328>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d00d      	beq.n	8003d7a <HAL_GPIO_Init+0x212>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a4c      	ldr	r2, [pc, #304]	; (8003e94 <HAL_GPIO_Init+0x32c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d007      	beq.n	8003d76 <HAL_GPIO_Init+0x20e>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a4b      	ldr	r2, [pc, #300]	; (8003e98 <HAL_GPIO_Init+0x330>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d101      	bne.n	8003d72 <HAL_GPIO_Init+0x20a>
 8003d6e:	2307      	movs	r3, #7
 8003d70:	e00e      	b.n	8003d90 <HAL_GPIO_Init+0x228>
 8003d72:	2308      	movs	r3, #8
 8003d74:	e00c      	b.n	8003d90 <HAL_GPIO_Init+0x228>
 8003d76:	2306      	movs	r3, #6
 8003d78:	e00a      	b.n	8003d90 <HAL_GPIO_Init+0x228>
 8003d7a:	2305      	movs	r3, #5
 8003d7c:	e008      	b.n	8003d90 <HAL_GPIO_Init+0x228>
 8003d7e:	2304      	movs	r3, #4
 8003d80:	e006      	b.n	8003d90 <HAL_GPIO_Init+0x228>
 8003d82:	2303      	movs	r3, #3
 8003d84:	e004      	b.n	8003d90 <HAL_GPIO_Init+0x228>
 8003d86:	2302      	movs	r3, #2
 8003d88:	e002      	b.n	8003d90 <HAL_GPIO_Init+0x228>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e000      	b.n	8003d90 <HAL_GPIO_Init+0x228>
 8003d8e:	2300      	movs	r3, #0
 8003d90:	69fa      	ldr	r2, [r7, #28]
 8003d92:	f002 0203 	and.w	r2, r2, #3
 8003d96:	0092      	lsls	r2, r2, #2
 8003d98:	4093      	lsls	r3, r2
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003da0:	4935      	ldr	r1, [pc, #212]	; (8003e78 <HAL_GPIO_Init+0x310>)
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	089b      	lsrs	r3, r3, #2
 8003da6:	3302      	adds	r3, #2
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dae:	4b3b      	ldr	r3, [pc, #236]	; (8003e9c <HAL_GPIO_Init+0x334>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	43db      	mvns	r3, r3
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dd2:	4a32      	ldr	r2, [pc, #200]	; (8003e9c <HAL_GPIO_Init+0x334>)
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003dd8:	4b30      	ldr	r3, [pc, #192]	; (8003e9c <HAL_GPIO_Init+0x334>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	43db      	mvns	r3, r3
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	4013      	ands	r3, r2
 8003de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d003      	beq.n	8003dfc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003dfc:	4a27      	ldr	r2, [pc, #156]	; (8003e9c <HAL_GPIO_Init+0x334>)
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e02:	4b26      	ldr	r3, [pc, #152]	; (8003e9c <HAL_GPIO_Init+0x334>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	43db      	mvns	r3, r3
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e26:	4a1d      	ldr	r2, [pc, #116]	; (8003e9c <HAL_GPIO_Init+0x334>)
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e2c:	4b1b      	ldr	r3, [pc, #108]	; (8003e9c <HAL_GPIO_Init+0x334>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	43db      	mvns	r3, r3
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d003      	beq.n	8003e50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e50:	4a12      	ldr	r2, [pc, #72]	; (8003e9c <HAL_GPIO_Init+0x334>)
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	61fb      	str	r3, [r7, #28]
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	2b0f      	cmp	r3, #15
 8003e60:	f67f ae90 	bls.w	8003b84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e64:	bf00      	nop
 8003e66:	bf00      	nop
 8003e68:	3724      	adds	r7, #36	; 0x24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	40023800 	.word	0x40023800
 8003e78:	40013800 	.word	0x40013800
 8003e7c:	40020000 	.word	0x40020000
 8003e80:	40020400 	.word	0x40020400
 8003e84:	40020800 	.word	0x40020800
 8003e88:	40020c00 	.word	0x40020c00
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	40021400 	.word	0x40021400
 8003e94:	40021800 	.word	0x40021800
 8003e98:	40021c00 	.word	0x40021c00
 8003e9c:	40013c00 	.word	0x40013c00

08003ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	807b      	strh	r3, [r7, #2]
 8003eac:	4613      	mov	r3, r2
 8003eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003eb0:	787b      	ldrb	r3, [r7, #1]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003eb6:	887a      	ldrh	r2, [r7, #2]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ebc:	e003      	b.n	8003ec6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ebe:	887b      	ldrh	r3, [r7, #2]
 8003ec0:	041a      	lsls	r2, r3, #16
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	619a      	str	r2, [r3, #24]
}
 8003ec6:	bf00      	nop
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
	...

08003ed4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e267      	b.n	80043b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d075      	beq.n	8003fde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ef2:	4b88      	ldr	r3, [pc, #544]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 030c 	and.w	r3, r3, #12
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d00c      	beq.n	8003f18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003efe:	4b85      	ldr	r3, [pc, #532]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f06:	2b08      	cmp	r3, #8
 8003f08:	d112      	bne.n	8003f30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f0a:	4b82      	ldr	r3, [pc, #520]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f16:	d10b      	bne.n	8003f30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f18:	4b7e      	ldr	r3, [pc, #504]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d05b      	beq.n	8003fdc <HAL_RCC_OscConfig+0x108>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d157      	bne.n	8003fdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e242      	b.n	80043b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f38:	d106      	bne.n	8003f48 <HAL_RCC_OscConfig+0x74>
 8003f3a:	4b76      	ldr	r3, [pc, #472]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a75      	ldr	r2, [pc, #468]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8003f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f44:	6013      	str	r3, [r2, #0]
 8003f46:	e01d      	b.n	8003f84 <HAL_RCC_OscConfig+0xb0>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f50:	d10c      	bne.n	8003f6c <HAL_RCC_OscConfig+0x98>
 8003f52:	4b70      	ldr	r3, [pc, #448]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a6f      	ldr	r2, [pc, #444]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8003f58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f5c:	6013      	str	r3, [r2, #0]
 8003f5e:	4b6d      	ldr	r3, [pc, #436]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a6c      	ldr	r2, [pc, #432]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8003f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f68:	6013      	str	r3, [r2, #0]
 8003f6a:	e00b      	b.n	8003f84 <HAL_RCC_OscConfig+0xb0>
 8003f6c:	4b69      	ldr	r3, [pc, #420]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a68      	ldr	r2, [pc, #416]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8003f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f76:	6013      	str	r3, [r2, #0]
 8003f78:	4b66      	ldr	r3, [pc, #408]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a65      	ldr	r2, [pc, #404]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8003f7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d013      	beq.n	8003fb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8c:	f7ff fcd6 	bl	800393c <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f94:	f7ff fcd2 	bl	800393c <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b64      	cmp	r3, #100	; 0x64
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e207      	b.n	80043b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fa6:	4b5b      	ldr	r3, [pc, #364]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0f0      	beq.n	8003f94 <HAL_RCC_OscConfig+0xc0>
 8003fb2:	e014      	b.n	8003fde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb4:	f7ff fcc2 	bl	800393c <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fbc:	f7ff fcbe 	bl	800393c <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b64      	cmp	r3, #100	; 0x64
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e1f3      	b.n	80043b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fce:	4b51      	ldr	r3, [pc, #324]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1f0      	bne.n	8003fbc <HAL_RCC_OscConfig+0xe8>
 8003fda:	e000      	b.n	8003fde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d063      	beq.n	80040b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fea:	4b4a      	ldr	r3, [pc, #296]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 030c 	and.w	r3, r3, #12
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00b      	beq.n	800400e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ff6:	4b47      	ldr	r3, [pc, #284]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d11c      	bne.n	800403c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004002:	4b44      	ldr	r3, [pc, #272]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d116      	bne.n	800403c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800400e:	4b41      	ldr	r3, [pc, #260]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d005      	beq.n	8004026 <HAL_RCC_OscConfig+0x152>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d001      	beq.n	8004026 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e1c7      	b.n	80043b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004026:	4b3b      	ldr	r3, [pc, #236]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	4937      	ldr	r1, [pc, #220]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8004036:	4313      	orrs	r3, r2
 8004038:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800403a:	e03a      	b.n	80040b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d020      	beq.n	8004086 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004044:	4b34      	ldr	r3, [pc, #208]	; (8004118 <HAL_RCC_OscConfig+0x244>)
 8004046:	2201      	movs	r2, #1
 8004048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404a:	f7ff fc77 	bl	800393c <HAL_GetTick>
 800404e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004050:	e008      	b.n	8004064 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004052:	f7ff fc73 	bl	800393c <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b02      	cmp	r3, #2
 800405e:	d901      	bls.n	8004064 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e1a8      	b.n	80043b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004064:	4b2b      	ldr	r3, [pc, #172]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0f0      	beq.n	8004052 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004070:	4b28      	ldr	r3, [pc, #160]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	4925      	ldr	r1, [pc, #148]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 8004080:	4313      	orrs	r3, r2
 8004082:	600b      	str	r3, [r1, #0]
 8004084:	e015      	b.n	80040b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004086:	4b24      	ldr	r3, [pc, #144]	; (8004118 <HAL_RCC_OscConfig+0x244>)
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408c:	f7ff fc56 	bl	800393c <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004094:	f7ff fc52 	bl	800393c <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e187      	b.n	80043b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040a6:	4b1b      	ldr	r3, [pc, #108]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1f0      	bne.n	8004094 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0308 	and.w	r3, r3, #8
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d036      	beq.n	800412c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d016      	beq.n	80040f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040c6:	4b15      	ldr	r3, [pc, #84]	; (800411c <HAL_RCC_OscConfig+0x248>)
 80040c8:	2201      	movs	r2, #1
 80040ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040cc:	f7ff fc36 	bl	800393c <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040d4:	f7ff fc32 	bl	800393c <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e167      	b.n	80043b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040e6:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <HAL_RCC_OscConfig+0x240>)
 80040e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0f0      	beq.n	80040d4 <HAL_RCC_OscConfig+0x200>
 80040f2:	e01b      	b.n	800412c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040f4:	4b09      	ldr	r3, [pc, #36]	; (800411c <HAL_RCC_OscConfig+0x248>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040fa:	f7ff fc1f 	bl	800393c <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004100:	e00e      	b.n	8004120 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004102:	f7ff fc1b 	bl	800393c <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d907      	bls.n	8004120 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e150      	b.n	80043b6 <HAL_RCC_OscConfig+0x4e2>
 8004114:	40023800 	.word	0x40023800
 8004118:	42470000 	.word	0x42470000
 800411c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004120:	4b88      	ldr	r3, [pc, #544]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 8004122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1ea      	bne.n	8004102 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 8097 	beq.w	8004268 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800413a:	2300      	movs	r3, #0
 800413c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800413e:	4b81      	ldr	r3, [pc, #516]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10f      	bne.n	800416a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800414a:	2300      	movs	r3, #0
 800414c:	60bb      	str	r3, [r7, #8]
 800414e:	4b7d      	ldr	r3, [pc, #500]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	4a7c      	ldr	r2, [pc, #496]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 8004154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004158:	6413      	str	r3, [r2, #64]	; 0x40
 800415a:	4b7a      	ldr	r3, [pc, #488]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004162:	60bb      	str	r3, [r7, #8]
 8004164:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004166:	2301      	movs	r3, #1
 8004168:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800416a:	4b77      	ldr	r3, [pc, #476]	; (8004348 <HAL_RCC_OscConfig+0x474>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004172:	2b00      	cmp	r3, #0
 8004174:	d118      	bne.n	80041a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004176:	4b74      	ldr	r3, [pc, #464]	; (8004348 <HAL_RCC_OscConfig+0x474>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a73      	ldr	r2, [pc, #460]	; (8004348 <HAL_RCC_OscConfig+0x474>)
 800417c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004180:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004182:	f7ff fbdb 	bl	800393c <HAL_GetTick>
 8004186:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004188:	e008      	b.n	800419c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800418a:	f7ff fbd7 	bl	800393c <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d901      	bls.n	800419c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e10c      	b.n	80043b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419c:	4b6a      	ldr	r3, [pc, #424]	; (8004348 <HAL_RCC_OscConfig+0x474>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0f0      	beq.n	800418a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d106      	bne.n	80041be <HAL_RCC_OscConfig+0x2ea>
 80041b0:	4b64      	ldr	r3, [pc, #400]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 80041b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b4:	4a63      	ldr	r2, [pc, #396]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 80041b6:	f043 0301 	orr.w	r3, r3, #1
 80041ba:	6713      	str	r3, [r2, #112]	; 0x70
 80041bc:	e01c      	b.n	80041f8 <HAL_RCC_OscConfig+0x324>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	2b05      	cmp	r3, #5
 80041c4:	d10c      	bne.n	80041e0 <HAL_RCC_OscConfig+0x30c>
 80041c6:	4b5f      	ldr	r3, [pc, #380]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 80041c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ca:	4a5e      	ldr	r2, [pc, #376]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 80041cc:	f043 0304 	orr.w	r3, r3, #4
 80041d0:	6713      	str	r3, [r2, #112]	; 0x70
 80041d2:	4b5c      	ldr	r3, [pc, #368]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 80041d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d6:	4a5b      	ldr	r2, [pc, #364]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 80041d8:	f043 0301 	orr.w	r3, r3, #1
 80041dc:	6713      	str	r3, [r2, #112]	; 0x70
 80041de:	e00b      	b.n	80041f8 <HAL_RCC_OscConfig+0x324>
 80041e0:	4b58      	ldr	r3, [pc, #352]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 80041e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e4:	4a57      	ldr	r2, [pc, #348]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 80041e6:	f023 0301 	bic.w	r3, r3, #1
 80041ea:	6713      	str	r3, [r2, #112]	; 0x70
 80041ec:	4b55      	ldr	r3, [pc, #340]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 80041ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f0:	4a54      	ldr	r2, [pc, #336]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 80041f2:	f023 0304 	bic.w	r3, r3, #4
 80041f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d015      	beq.n	800422c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004200:	f7ff fb9c 	bl	800393c <HAL_GetTick>
 8004204:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004206:	e00a      	b.n	800421e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004208:	f7ff fb98 	bl	800393c <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	f241 3288 	movw	r2, #5000	; 0x1388
 8004216:	4293      	cmp	r3, r2
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e0cb      	b.n	80043b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800421e:	4b49      	ldr	r3, [pc, #292]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 8004220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d0ee      	beq.n	8004208 <HAL_RCC_OscConfig+0x334>
 800422a:	e014      	b.n	8004256 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800422c:	f7ff fb86 	bl	800393c <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004232:	e00a      	b.n	800424a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004234:	f7ff fb82 	bl	800393c <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004242:	4293      	cmp	r3, r2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e0b5      	b.n	80043b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800424a:	4b3e      	ldr	r3, [pc, #248]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 800424c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1ee      	bne.n	8004234 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004256:	7dfb      	ldrb	r3, [r7, #23]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d105      	bne.n	8004268 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800425c:	4b39      	ldr	r3, [pc, #228]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004260:	4a38      	ldr	r2, [pc, #224]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 8004262:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004266:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 80a1 	beq.w	80043b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004272:	4b34      	ldr	r3, [pc, #208]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 030c 	and.w	r3, r3, #12
 800427a:	2b08      	cmp	r3, #8
 800427c:	d05c      	beq.n	8004338 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	2b02      	cmp	r3, #2
 8004284:	d141      	bne.n	800430a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004286:	4b31      	ldr	r3, [pc, #196]	; (800434c <HAL_RCC_OscConfig+0x478>)
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800428c:	f7ff fb56 	bl	800393c <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004294:	f7ff fb52 	bl	800393c <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e087      	b.n	80043b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a6:	4b27      	ldr	r3, [pc, #156]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1f0      	bne.n	8004294 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69da      	ldr	r2, [r3, #28]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	019b      	lsls	r3, r3, #6
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c8:	085b      	lsrs	r3, r3, #1
 80042ca:	3b01      	subs	r3, #1
 80042cc:	041b      	lsls	r3, r3, #16
 80042ce:	431a      	orrs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d4:	061b      	lsls	r3, r3, #24
 80042d6:	491b      	ldr	r1, [pc, #108]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042dc:	4b1b      	ldr	r3, [pc, #108]	; (800434c <HAL_RCC_OscConfig+0x478>)
 80042de:	2201      	movs	r2, #1
 80042e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e2:	f7ff fb2b 	bl	800393c <HAL_GetTick>
 80042e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042e8:	e008      	b.n	80042fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042ea:	f7ff fb27 	bl	800393c <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e05c      	b.n	80043b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042fc:	4b11      	ldr	r3, [pc, #68]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0f0      	beq.n	80042ea <HAL_RCC_OscConfig+0x416>
 8004308:	e054      	b.n	80043b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800430a:	4b10      	ldr	r3, [pc, #64]	; (800434c <HAL_RCC_OscConfig+0x478>)
 800430c:	2200      	movs	r2, #0
 800430e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004310:	f7ff fb14 	bl	800393c <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004318:	f7ff fb10 	bl	800393c <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e045      	b.n	80043b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800432a:	4b06      	ldr	r3, [pc, #24]	; (8004344 <HAL_RCC_OscConfig+0x470>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1f0      	bne.n	8004318 <HAL_RCC_OscConfig+0x444>
 8004336:	e03d      	b.n	80043b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d107      	bne.n	8004350 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e038      	b.n	80043b6 <HAL_RCC_OscConfig+0x4e2>
 8004344:	40023800 	.word	0x40023800
 8004348:	40007000 	.word	0x40007000
 800434c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004350:	4b1b      	ldr	r3, [pc, #108]	; (80043c0 <HAL_RCC_OscConfig+0x4ec>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d028      	beq.n	80043b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004368:	429a      	cmp	r2, r3
 800436a:	d121      	bne.n	80043b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004376:	429a      	cmp	r2, r3
 8004378:	d11a      	bne.n	80043b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004380:	4013      	ands	r3, r2
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004386:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004388:	4293      	cmp	r3, r2
 800438a:	d111      	bne.n	80043b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004396:	085b      	lsrs	r3, r3, #1
 8004398:	3b01      	subs	r3, #1
 800439a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800439c:	429a      	cmp	r2, r3
 800439e:	d107      	bne.n	80043b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d001      	beq.n	80043b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e000      	b.n	80043b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	40023800 	.word	0x40023800

080043c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e0cc      	b.n	8004572 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043d8:	4b68      	ldr	r3, [pc, #416]	; (800457c <HAL_RCC_ClockConfig+0x1b8>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d90c      	bls.n	8004400 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e6:	4b65      	ldr	r3, [pc, #404]	; (800457c <HAL_RCC_ClockConfig+0x1b8>)
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	b2d2      	uxtb	r2, r2
 80043ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ee:	4b63      	ldr	r3, [pc, #396]	; (800457c <HAL_RCC_ClockConfig+0x1b8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0307 	and.w	r3, r3, #7
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d001      	beq.n	8004400 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e0b8      	b.n	8004572 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d020      	beq.n	800444e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0304 	and.w	r3, r3, #4
 8004414:	2b00      	cmp	r3, #0
 8004416:	d005      	beq.n	8004424 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004418:	4b59      	ldr	r3, [pc, #356]	; (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	4a58      	ldr	r2, [pc, #352]	; (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 800441e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004422:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0308 	and.w	r3, r3, #8
 800442c:	2b00      	cmp	r3, #0
 800442e:	d005      	beq.n	800443c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004430:	4b53      	ldr	r3, [pc, #332]	; (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	4a52      	ldr	r2, [pc, #328]	; (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 8004436:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800443a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800443c:	4b50      	ldr	r3, [pc, #320]	; (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	494d      	ldr	r1, [pc, #308]	; (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 800444a:	4313      	orrs	r3, r2
 800444c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d044      	beq.n	80044e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d107      	bne.n	8004472 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004462:	4b47      	ldr	r3, [pc, #284]	; (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d119      	bne.n	80044a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e07f      	b.n	8004572 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2b02      	cmp	r3, #2
 8004478:	d003      	beq.n	8004482 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800447e:	2b03      	cmp	r3, #3
 8004480:	d107      	bne.n	8004492 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004482:	4b3f      	ldr	r3, [pc, #252]	; (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d109      	bne.n	80044a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e06f      	b.n	8004572 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004492:	4b3b      	ldr	r3, [pc, #236]	; (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e067      	b.n	8004572 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044a2:	4b37      	ldr	r3, [pc, #220]	; (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f023 0203 	bic.w	r2, r3, #3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	4934      	ldr	r1, [pc, #208]	; (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044b4:	f7ff fa42 	bl	800393c <HAL_GetTick>
 80044b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ba:	e00a      	b.n	80044d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044bc:	f7ff fa3e 	bl	800393c <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e04f      	b.n	8004572 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044d2:	4b2b      	ldr	r3, [pc, #172]	; (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 020c 	and.w	r2, r3, #12
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d1eb      	bne.n	80044bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044e4:	4b25      	ldr	r3, [pc, #148]	; (800457c <HAL_RCC_ClockConfig+0x1b8>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d20c      	bcs.n	800450c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044f2:	4b22      	ldr	r3, [pc, #136]	; (800457c <HAL_RCC_ClockConfig+0x1b8>)
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	b2d2      	uxtb	r2, r2
 80044f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044fa:	4b20      	ldr	r3, [pc, #128]	; (800457c <HAL_RCC_ClockConfig+0x1b8>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	429a      	cmp	r2, r3
 8004506:	d001      	beq.n	800450c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e032      	b.n	8004572 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	2b00      	cmp	r3, #0
 8004516:	d008      	beq.n	800452a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004518:	4b19      	ldr	r3, [pc, #100]	; (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	4916      	ldr	r1, [pc, #88]	; (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 8004526:	4313      	orrs	r3, r2
 8004528:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b00      	cmp	r3, #0
 8004534:	d009      	beq.n	800454a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004536:	4b12      	ldr	r3, [pc, #72]	; (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	490e      	ldr	r1, [pc, #56]	; (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 8004546:	4313      	orrs	r3, r2
 8004548:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800454a:	f000 f821 	bl	8004590 <HAL_RCC_GetSysClockFreq>
 800454e:	4602      	mov	r2, r0
 8004550:	4b0b      	ldr	r3, [pc, #44]	; (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	091b      	lsrs	r3, r3, #4
 8004556:	f003 030f 	and.w	r3, r3, #15
 800455a:	490a      	ldr	r1, [pc, #40]	; (8004584 <HAL_RCC_ClockConfig+0x1c0>)
 800455c:	5ccb      	ldrb	r3, [r1, r3]
 800455e:	fa22 f303 	lsr.w	r3, r2, r3
 8004562:	4a09      	ldr	r2, [pc, #36]	; (8004588 <HAL_RCC_ClockConfig+0x1c4>)
 8004564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004566:	4b09      	ldr	r3, [pc, #36]	; (800458c <HAL_RCC_ClockConfig+0x1c8>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4618      	mov	r0, r3
 800456c:	f7ff f9a2 	bl	80038b4 <HAL_InitTick>

  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	40023c00 	.word	0x40023c00
 8004580:	40023800 	.word	0x40023800
 8004584:	08021e74 	.word	0x08021e74
 8004588:	20000000 	.word	0x20000000
 800458c:	20000004 	.word	0x20000004

08004590 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004594:	b094      	sub	sp, #80	; 0x50
 8004596:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	647b      	str	r3, [r7, #68]	; 0x44
 800459c:	2300      	movs	r3, #0
 800459e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045a0:	2300      	movs	r3, #0
 80045a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045a8:	4b79      	ldr	r3, [pc, #484]	; (8004790 <HAL_RCC_GetSysClockFreq+0x200>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f003 030c 	and.w	r3, r3, #12
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	d00d      	beq.n	80045d0 <HAL_RCC_GetSysClockFreq+0x40>
 80045b4:	2b08      	cmp	r3, #8
 80045b6:	f200 80e1 	bhi.w	800477c <HAL_RCC_GetSysClockFreq+0x1ec>
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d002      	beq.n	80045c4 <HAL_RCC_GetSysClockFreq+0x34>
 80045be:	2b04      	cmp	r3, #4
 80045c0:	d003      	beq.n	80045ca <HAL_RCC_GetSysClockFreq+0x3a>
 80045c2:	e0db      	b.n	800477c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045c4:	4b73      	ldr	r3, [pc, #460]	; (8004794 <HAL_RCC_GetSysClockFreq+0x204>)
 80045c6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80045c8:	e0db      	b.n	8004782 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045ca:	4b73      	ldr	r3, [pc, #460]	; (8004798 <HAL_RCC_GetSysClockFreq+0x208>)
 80045cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045ce:	e0d8      	b.n	8004782 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045d0:	4b6f      	ldr	r3, [pc, #444]	; (8004790 <HAL_RCC_GetSysClockFreq+0x200>)
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045d8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045da:	4b6d      	ldr	r3, [pc, #436]	; (8004790 <HAL_RCC_GetSysClockFreq+0x200>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d063      	beq.n	80046ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045e6:	4b6a      	ldr	r3, [pc, #424]	; (8004790 <HAL_RCC_GetSysClockFreq+0x200>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	099b      	lsrs	r3, r3, #6
 80045ec:	2200      	movs	r2, #0
 80045ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80045f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80045f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f8:	633b      	str	r3, [r7, #48]	; 0x30
 80045fa:	2300      	movs	r3, #0
 80045fc:	637b      	str	r3, [r7, #52]	; 0x34
 80045fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004602:	4622      	mov	r2, r4
 8004604:	462b      	mov	r3, r5
 8004606:	f04f 0000 	mov.w	r0, #0
 800460a:	f04f 0100 	mov.w	r1, #0
 800460e:	0159      	lsls	r1, r3, #5
 8004610:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004614:	0150      	lsls	r0, r2, #5
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	4621      	mov	r1, r4
 800461c:	1a51      	subs	r1, r2, r1
 800461e:	6139      	str	r1, [r7, #16]
 8004620:	4629      	mov	r1, r5
 8004622:	eb63 0301 	sbc.w	r3, r3, r1
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	f04f 0200 	mov.w	r2, #0
 800462c:	f04f 0300 	mov.w	r3, #0
 8004630:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004634:	4659      	mov	r1, fp
 8004636:	018b      	lsls	r3, r1, #6
 8004638:	4651      	mov	r1, sl
 800463a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800463e:	4651      	mov	r1, sl
 8004640:	018a      	lsls	r2, r1, #6
 8004642:	4651      	mov	r1, sl
 8004644:	ebb2 0801 	subs.w	r8, r2, r1
 8004648:	4659      	mov	r1, fp
 800464a:	eb63 0901 	sbc.w	r9, r3, r1
 800464e:	f04f 0200 	mov.w	r2, #0
 8004652:	f04f 0300 	mov.w	r3, #0
 8004656:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800465a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800465e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004662:	4690      	mov	r8, r2
 8004664:	4699      	mov	r9, r3
 8004666:	4623      	mov	r3, r4
 8004668:	eb18 0303 	adds.w	r3, r8, r3
 800466c:	60bb      	str	r3, [r7, #8]
 800466e:	462b      	mov	r3, r5
 8004670:	eb49 0303 	adc.w	r3, r9, r3
 8004674:	60fb      	str	r3, [r7, #12]
 8004676:	f04f 0200 	mov.w	r2, #0
 800467a:	f04f 0300 	mov.w	r3, #0
 800467e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004682:	4629      	mov	r1, r5
 8004684:	024b      	lsls	r3, r1, #9
 8004686:	4621      	mov	r1, r4
 8004688:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800468c:	4621      	mov	r1, r4
 800468e:	024a      	lsls	r2, r1, #9
 8004690:	4610      	mov	r0, r2
 8004692:	4619      	mov	r1, r3
 8004694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004696:	2200      	movs	r2, #0
 8004698:	62bb      	str	r3, [r7, #40]	; 0x28
 800469a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800469c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046a0:	f7fc fa8c 	bl	8000bbc <__aeabi_uldivmod>
 80046a4:	4602      	mov	r2, r0
 80046a6:	460b      	mov	r3, r1
 80046a8:	4613      	mov	r3, r2
 80046aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046ac:	e058      	b.n	8004760 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ae:	4b38      	ldr	r3, [pc, #224]	; (8004790 <HAL_RCC_GetSysClockFreq+0x200>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	099b      	lsrs	r3, r3, #6
 80046b4:	2200      	movs	r2, #0
 80046b6:	4618      	mov	r0, r3
 80046b8:	4611      	mov	r1, r2
 80046ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046be:	623b      	str	r3, [r7, #32]
 80046c0:	2300      	movs	r3, #0
 80046c2:	627b      	str	r3, [r7, #36]	; 0x24
 80046c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80046c8:	4642      	mov	r2, r8
 80046ca:	464b      	mov	r3, r9
 80046cc:	f04f 0000 	mov.w	r0, #0
 80046d0:	f04f 0100 	mov.w	r1, #0
 80046d4:	0159      	lsls	r1, r3, #5
 80046d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046da:	0150      	lsls	r0, r2, #5
 80046dc:	4602      	mov	r2, r0
 80046de:	460b      	mov	r3, r1
 80046e0:	4641      	mov	r1, r8
 80046e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80046e6:	4649      	mov	r1, r9
 80046e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80046ec:	f04f 0200 	mov.w	r2, #0
 80046f0:	f04f 0300 	mov.w	r3, #0
 80046f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80046f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80046fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004700:	ebb2 040a 	subs.w	r4, r2, sl
 8004704:	eb63 050b 	sbc.w	r5, r3, fp
 8004708:	f04f 0200 	mov.w	r2, #0
 800470c:	f04f 0300 	mov.w	r3, #0
 8004710:	00eb      	lsls	r3, r5, #3
 8004712:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004716:	00e2      	lsls	r2, r4, #3
 8004718:	4614      	mov	r4, r2
 800471a:	461d      	mov	r5, r3
 800471c:	4643      	mov	r3, r8
 800471e:	18e3      	adds	r3, r4, r3
 8004720:	603b      	str	r3, [r7, #0]
 8004722:	464b      	mov	r3, r9
 8004724:	eb45 0303 	adc.w	r3, r5, r3
 8004728:	607b      	str	r3, [r7, #4]
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	f04f 0300 	mov.w	r3, #0
 8004732:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004736:	4629      	mov	r1, r5
 8004738:	028b      	lsls	r3, r1, #10
 800473a:	4621      	mov	r1, r4
 800473c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004740:	4621      	mov	r1, r4
 8004742:	028a      	lsls	r2, r1, #10
 8004744:	4610      	mov	r0, r2
 8004746:	4619      	mov	r1, r3
 8004748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800474a:	2200      	movs	r2, #0
 800474c:	61bb      	str	r3, [r7, #24]
 800474e:	61fa      	str	r2, [r7, #28]
 8004750:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004754:	f7fc fa32 	bl	8000bbc <__aeabi_uldivmod>
 8004758:	4602      	mov	r2, r0
 800475a:	460b      	mov	r3, r1
 800475c:	4613      	mov	r3, r2
 800475e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004760:	4b0b      	ldr	r3, [pc, #44]	; (8004790 <HAL_RCC_GetSysClockFreq+0x200>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	0c1b      	lsrs	r3, r3, #16
 8004766:	f003 0303 	and.w	r3, r3, #3
 800476a:	3301      	adds	r3, #1
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004770:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004774:	fbb2 f3f3 	udiv	r3, r2, r3
 8004778:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800477a:	e002      	b.n	8004782 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800477c:	4b05      	ldr	r3, [pc, #20]	; (8004794 <HAL_RCC_GetSysClockFreq+0x204>)
 800477e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004780:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004784:	4618      	mov	r0, r3
 8004786:	3750      	adds	r7, #80	; 0x50
 8004788:	46bd      	mov	sp, r7
 800478a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800478e:	bf00      	nop
 8004790:	40023800 	.word	0x40023800
 8004794:	00f42400 	.word	0x00f42400
 8004798:	007a1200 	.word	0x007a1200

0800479c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e038      	b.n	8004824 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d106      	bne.n	80047cc <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f7fe ff1c 	bl	8003604 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	3308      	adds	r3, #8
 80047d4:	4619      	mov	r1, r3
 80047d6:	4610      	mov	r0, r2
 80047d8:	f000 f828 	bl	800482c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6818      	ldr	r0, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	461a      	mov	r2, r3
 80047e6:	68b9      	ldr	r1, [r7, #8]
 80047e8:	f000 f88a 	bl	8004900 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6858      	ldr	r0, [r3, #4]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	689a      	ldr	r2, [r3, #8]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f8:	6879      	ldr	r1, [r7, #4]
 80047fa:	f000 f8b7 	bl	800496c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	6892      	ldr	r2, [r2, #8]
 8004806:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	6892      	ldr	r2, [r2, #8]
 8004812:	f041 0101 	orr.w	r1, r1, #1
 8004816:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800482c:	b480      	push	{r7}
 800482e:	b087      	sub	sp, #28
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	6812      	ldr	r2, [r2, #0]
 8004844:	f023 0101 	bic.w	r1, r3, #1
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	2b08      	cmp	r3, #8
 8004854:	d102      	bne.n	800485c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004856:	2340      	movs	r3, #64	; 0x40
 8004858:	617b      	str	r3, [r7, #20]
 800485a:	e001      	b.n	8004860 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800485c:	2300      	movs	r3, #0
 800485e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800486c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8004872:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8004878:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800487e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8004884:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800488a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8004890:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8004896:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 800489c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 80048a2:	4313      	orrs	r3, r2
 80048a4:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 80048ba:	4b10      	ldr	r3, [pc, #64]	; (80048fc <FSMC_NORSRAM_Init+0xd0>)
 80048bc:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048c4:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80048cc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	43db      	mvns	r3, r3
 80048dc:	ea02 0103 	and.w	r1, r2, r3
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	4319      	orrs	r1, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	371c      	adds	r7, #28
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	0008fb7f 	.word	0x0008fb7f

08004900 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	1c5a      	adds	r2, r3, #1
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004916:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	011b      	lsls	r3, r3, #4
 8004924:	431a      	orrs	r2, r3
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	021b      	lsls	r3, r3, #8
 800492c:	431a      	orrs	r2, r3
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	041b      	lsls	r3, r3, #16
 8004934:	431a      	orrs	r2, r3
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	3b01      	subs	r3, #1
 800493c:	051b      	lsls	r3, r3, #20
 800493e:	431a      	orrs	r2, r3
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	3b02      	subs	r3, #2
 8004946:	061b      	lsls	r3, r3, #24
 8004948:	431a      	orrs	r2, r3
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	4313      	orrs	r3, r2
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	3201      	adds	r2, #1
 8004954:	4319      	orrs	r1, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
	...

0800496c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
 8004978:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004980:	d11d      	bne.n	80049be <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800498a:	4b13      	ldr	r3, [pc, #76]	; (80049d8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800498c:	4013      	ands	r3, r2
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	6811      	ldr	r1, [r2, #0]
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	6852      	ldr	r2, [r2, #4]
 8004996:	0112      	lsls	r2, r2, #4
 8004998:	4311      	orrs	r1, r2
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	6892      	ldr	r2, [r2, #8]
 800499e:	0212      	lsls	r2, r2, #8
 80049a0:	4311      	orrs	r1, r2
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	6992      	ldr	r2, [r2, #24]
 80049a6:	4311      	orrs	r1, r2
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	68d2      	ldr	r2, [r2, #12]
 80049ac:	0412      	lsls	r2, r2, #16
 80049ae:	430a      	orrs	r2, r1
 80049b0:	ea43 0102 	orr.w	r1, r3, r2
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80049bc:	e005      	b.n	80049ca <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80049c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	cff00000 	.word	0xcff00000

080049dc <rand>:
 80049dc:	4b16      	ldr	r3, [pc, #88]	; (8004a38 <rand+0x5c>)
 80049de:	b510      	push	{r4, lr}
 80049e0:	681c      	ldr	r4, [r3, #0]
 80049e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80049e4:	b9b3      	cbnz	r3, 8004a14 <rand+0x38>
 80049e6:	2018      	movs	r0, #24
 80049e8:	f000 fa1c 	bl	8004e24 <malloc>
 80049ec:	4602      	mov	r2, r0
 80049ee:	6320      	str	r0, [r4, #48]	; 0x30
 80049f0:	b920      	cbnz	r0, 80049fc <rand+0x20>
 80049f2:	4b12      	ldr	r3, [pc, #72]	; (8004a3c <rand+0x60>)
 80049f4:	4812      	ldr	r0, [pc, #72]	; (8004a40 <rand+0x64>)
 80049f6:	2152      	movs	r1, #82	; 0x52
 80049f8:	f000 f9aa 	bl	8004d50 <__assert_func>
 80049fc:	4911      	ldr	r1, [pc, #68]	; (8004a44 <rand+0x68>)
 80049fe:	4b12      	ldr	r3, [pc, #72]	; (8004a48 <rand+0x6c>)
 8004a00:	e9c0 1300 	strd	r1, r3, [r0]
 8004a04:	4b11      	ldr	r3, [pc, #68]	; (8004a4c <rand+0x70>)
 8004a06:	6083      	str	r3, [r0, #8]
 8004a08:	230b      	movs	r3, #11
 8004a0a:	8183      	strh	r3, [r0, #12]
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	2001      	movs	r0, #1
 8004a10:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004a14:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004a16:	480e      	ldr	r0, [pc, #56]	; (8004a50 <rand+0x74>)
 8004a18:	690b      	ldr	r3, [r1, #16]
 8004a1a:	694c      	ldr	r4, [r1, #20]
 8004a1c:	4a0d      	ldr	r2, [pc, #52]	; (8004a54 <rand+0x78>)
 8004a1e:	4358      	muls	r0, r3
 8004a20:	fb02 0004 	mla	r0, r2, r4, r0
 8004a24:	fba3 3202 	umull	r3, r2, r3, r2
 8004a28:	3301      	adds	r3, #1
 8004a2a:	eb40 0002 	adc.w	r0, r0, r2
 8004a2e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004a32:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004a36:	bd10      	pop	{r4, pc}
 8004a38:	20000064 	.word	0x20000064
 8004a3c:	08021e84 	.word	0x08021e84
 8004a40:	08021e9b 	.word	0x08021e9b
 8004a44:	abcd330e 	.word	0xabcd330e
 8004a48:	e66d1234 	.word	0xe66d1234
 8004a4c:	0005deec 	.word	0x0005deec
 8004a50:	5851f42d 	.word	0x5851f42d
 8004a54:	4c957f2d 	.word	0x4c957f2d

08004a58 <std>:
 8004a58:	2300      	movs	r3, #0
 8004a5a:	b510      	push	{r4, lr}
 8004a5c:	4604      	mov	r4, r0
 8004a5e:	e9c0 3300 	strd	r3, r3, [r0]
 8004a62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a66:	6083      	str	r3, [r0, #8]
 8004a68:	8181      	strh	r1, [r0, #12]
 8004a6a:	6643      	str	r3, [r0, #100]	; 0x64
 8004a6c:	81c2      	strh	r2, [r0, #14]
 8004a6e:	6183      	str	r3, [r0, #24]
 8004a70:	4619      	mov	r1, r3
 8004a72:	2208      	movs	r2, #8
 8004a74:	305c      	adds	r0, #92	; 0x5c
 8004a76:	f000 f8e2 	bl	8004c3e <memset>
 8004a7a:	4b05      	ldr	r3, [pc, #20]	; (8004a90 <std+0x38>)
 8004a7c:	6263      	str	r3, [r4, #36]	; 0x24
 8004a7e:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <std+0x3c>)
 8004a80:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a82:	4b05      	ldr	r3, [pc, #20]	; (8004a98 <std+0x40>)
 8004a84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a86:	4b05      	ldr	r3, [pc, #20]	; (8004a9c <std+0x44>)
 8004a88:	6224      	str	r4, [r4, #32]
 8004a8a:	6323      	str	r3, [r4, #48]	; 0x30
 8004a8c:	bd10      	pop	{r4, pc}
 8004a8e:	bf00      	nop
 8004a90:	08004bb9 	.word	0x08004bb9
 8004a94:	08004bdb 	.word	0x08004bdb
 8004a98:	08004c13 	.word	0x08004c13
 8004a9c:	08004c37 	.word	0x08004c37

08004aa0 <stdio_exit_handler>:
 8004aa0:	4a02      	ldr	r2, [pc, #8]	; (8004aac <stdio_exit_handler+0xc>)
 8004aa2:	4903      	ldr	r1, [pc, #12]	; (8004ab0 <stdio_exit_handler+0x10>)
 8004aa4:	4803      	ldr	r0, [pc, #12]	; (8004ab4 <stdio_exit_handler+0x14>)
 8004aa6:	f000 b869 	b.w	8004b7c <_fwalk_sglue>
 8004aaa:	bf00      	nop
 8004aac:	2000000c 	.word	0x2000000c
 8004ab0:	08005099 	.word	0x08005099
 8004ab4:	20000018 	.word	0x20000018

08004ab8 <cleanup_stdio>:
 8004ab8:	6841      	ldr	r1, [r0, #4]
 8004aba:	4b0c      	ldr	r3, [pc, #48]	; (8004aec <cleanup_stdio+0x34>)
 8004abc:	4299      	cmp	r1, r3
 8004abe:	b510      	push	{r4, lr}
 8004ac0:	4604      	mov	r4, r0
 8004ac2:	d001      	beq.n	8004ac8 <cleanup_stdio+0x10>
 8004ac4:	f000 fae8 	bl	8005098 <_fflush_r>
 8004ac8:	68a1      	ldr	r1, [r4, #8]
 8004aca:	4b09      	ldr	r3, [pc, #36]	; (8004af0 <cleanup_stdio+0x38>)
 8004acc:	4299      	cmp	r1, r3
 8004ace:	d002      	beq.n	8004ad6 <cleanup_stdio+0x1e>
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	f000 fae1 	bl	8005098 <_fflush_r>
 8004ad6:	68e1      	ldr	r1, [r4, #12]
 8004ad8:	4b06      	ldr	r3, [pc, #24]	; (8004af4 <cleanup_stdio+0x3c>)
 8004ada:	4299      	cmp	r1, r3
 8004adc:	d004      	beq.n	8004ae8 <cleanup_stdio+0x30>
 8004ade:	4620      	mov	r0, r4
 8004ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ae4:	f000 bad8 	b.w	8005098 <_fflush_r>
 8004ae8:	bd10      	pop	{r4, pc}
 8004aea:	bf00      	nop
 8004aec:	200000e0 	.word	0x200000e0
 8004af0:	20000148 	.word	0x20000148
 8004af4:	200001b0 	.word	0x200001b0

08004af8 <global_stdio_init.part.0>:
 8004af8:	b510      	push	{r4, lr}
 8004afa:	4b0b      	ldr	r3, [pc, #44]	; (8004b28 <global_stdio_init.part.0+0x30>)
 8004afc:	4c0b      	ldr	r4, [pc, #44]	; (8004b2c <global_stdio_init.part.0+0x34>)
 8004afe:	4a0c      	ldr	r2, [pc, #48]	; (8004b30 <global_stdio_init.part.0+0x38>)
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	4620      	mov	r0, r4
 8004b04:	2200      	movs	r2, #0
 8004b06:	2104      	movs	r1, #4
 8004b08:	f7ff ffa6 	bl	8004a58 <std>
 8004b0c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004b10:	2201      	movs	r2, #1
 8004b12:	2109      	movs	r1, #9
 8004b14:	f7ff ffa0 	bl	8004a58 <std>
 8004b18:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b22:	2112      	movs	r1, #18
 8004b24:	f7ff bf98 	b.w	8004a58 <std>
 8004b28:	20000218 	.word	0x20000218
 8004b2c:	200000e0 	.word	0x200000e0
 8004b30:	08004aa1 	.word	0x08004aa1

08004b34 <__sfp_lock_acquire>:
 8004b34:	4801      	ldr	r0, [pc, #4]	; (8004b3c <__sfp_lock_acquire+0x8>)
 8004b36:	f000 b8fb 	b.w	8004d30 <__retarget_lock_acquire_recursive>
 8004b3a:	bf00      	nop
 8004b3c:	20000221 	.word	0x20000221

08004b40 <__sfp_lock_release>:
 8004b40:	4801      	ldr	r0, [pc, #4]	; (8004b48 <__sfp_lock_release+0x8>)
 8004b42:	f000 b8f6 	b.w	8004d32 <__retarget_lock_release_recursive>
 8004b46:	bf00      	nop
 8004b48:	20000221 	.word	0x20000221

08004b4c <__sinit>:
 8004b4c:	b510      	push	{r4, lr}
 8004b4e:	4604      	mov	r4, r0
 8004b50:	f7ff fff0 	bl	8004b34 <__sfp_lock_acquire>
 8004b54:	6a23      	ldr	r3, [r4, #32]
 8004b56:	b11b      	cbz	r3, 8004b60 <__sinit+0x14>
 8004b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b5c:	f7ff bff0 	b.w	8004b40 <__sfp_lock_release>
 8004b60:	4b04      	ldr	r3, [pc, #16]	; (8004b74 <__sinit+0x28>)
 8004b62:	6223      	str	r3, [r4, #32]
 8004b64:	4b04      	ldr	r3, [pc, #16]	; (8004b78 <__sinit+0x2c>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1f5      	bne.n	8004b58 <__sinit+0xc>
 8004b6c:	f7ff ffc4 	bl	8004af8 <global_stdio_init.part.0>
 8004b70:	e7f2      	b.n	8004b58 <__sinit+0xc>
 8004b72:	bf00      	nop
 8004b74:	08004ab9 	.word	0x08004ab9
 8004b78:	20000218 	.word	0x20000218

08004b7c <_fwalk_sglue>:
 8004b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b80:	4607      	mov	r7, r0
 8004b82:	4688      	mov	r8, r1
 8004b84:	4614      	mov	r4, r2
 8004b86:	2600      	movs	r6, #0
 8004b88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b8c:	f1b9 0901 	subs.w	r9, r9, #1
 8004b90:	d505      	bpl.n	8004b9e <_fwalk_sglue+0x22>
 8004b92:	6824      	ldr	r4, [r4, #0]
 8004b94:	2c00      	cmp	r4, #0
 8004b96:	d1f7      	bne.n	8004b88 <_fwalk_sglue+0xc>
 8004b98:	4630      	mov	r0, r6
 8004b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b9e:	89ab      	ldrh	r3, [r5, #12]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d907      	bls.n	8004bb4 <_fwalk_sglue+0x38>
 8004ba4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	d003      	beq.n	8004bb4 <_fwalk_sglue+0x38>
 8004bac:	4629      	mov	r1, r5
 8004bae:	4638      	mov	r0, r7
 8004bb0:	47c0      	blx	r8
 8004bb2:	4306      	orrs	r6, r0
 8004bb4:	3568      	adds	r5, #104	; 0x68
 8004bb6:	e7e9      	b.n	8004b8c <_fwalk_sglue+0x10>

08004bb8 <__sread>:
 8004bb8:	b510      	push	{r4, lr}
 8004bba:	460c      	mov	r4, r1
 8004bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bc0:	f000 f868 	bl	8004c94 <_read_r>
 8004bc4:	2800      	cmp	r0, #0
 8004bc6:	bfab      	itete	ge
 8004bc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004bca:	89a3      	ldrhlt	r3, [r4, #12]
 8004bcc:	181b      	addge	r3, r3, r0
 8004bce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004bd2:	bfac      	ite	ge
 8004bd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004bd6:	81a3      	strhlt	r3, [r4, #12]
 8004bd8:	bd10      	pop	{r4, pc}

08004bda <__swrite>:
 8004bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bde:	461f      	mov	r7, r3
 8004be0:	898b      	ldrh	r3, [r1, #12]
 8004be2:	05db      	lsls	r3, r3, #23
 8004be4:	4605      	mov	r5, r0
 8004be6:	460c      	mov	r4, r1
 8004be8:	4616      	mov	r6, r2
 8004bea:	d505      	bpl.n	8004bf8 <__swrite+0x1e>
 8004bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f000 f83c 	bl	8004c70 <_lseek_r>
 8004bf8:	89a3      	ldrh	r3, [r4, #12]
 8004bfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c02:	81a3      	strh	r3, [r4, #12]
 8004c04:	4632      	mov	r2, r6
 8004c06:	463b      	mov	r3, r7
 8004c08:	4628      	mov	r0, r5
 8004c0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c0e:	f000 b853 	b.w	8004cb8 <_write_r>

08004c12 <__sseek>:
 8004c12:	b510      	push	{r4, lr}
 8004c14:	460c      	mov	r4, r1
 8004c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c1a:	f000 f829 	bl	8004c70 <_lseek_r>
 8004c1e:	1c43      	adds	r3, r0, #1
 8004c20:	89a3      	ldrh	r3, [r4, #12]
 8004c22:	bf15      	itete	ne
 8004c24:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c2e:	81a3      	strheq	r3, [r4, #12]
 8004c30:	bf18      	it	ne
 8004c32:	81a3      	strhne	r3, [r4, #12]
 8004c34:	bd10      	pop	{r4, pc}

08004c36 <__sclose>:
 8004c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c3a:	f000 b809 	b.w	8004c50 <_close_r>

08004c3e <memset>:
 8004c3e:	4402      	add	r2, r0
 8004c40:	4603      	mov	r3, r0
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d100      	bne.n	8004c48 <memset+0xa>
 8004c46:	4770      	bx	lr
 8004c48:	f803 1b01 	strb.w	r1, [r3], #1
 8004c4c:	e7f9      	b.n	8004c42 <memset+0x4>
	...

08004c50 <_close_r>:
 8004c50:	b538      	push	{r3, r4, r5, lr}
 8004c52:	4d06      	ldr	r5, [pc, #24]	; (8004c6c <_close_r+0x1c>)
 8004c54:	2300      	movs	r3, #0
 8004c56:	4604      	mov	r4, r0
 8004c58:	4608      	mov	r0, r1
 8004c5a:	602b      	str	r3, [r5, #0]
 8004c5c:	f7fe fd61 	bl	8003722 <_close>
 8004c60:	1c43      	adds	r3, r0, #1
 8004c62:	d102      	bne.n	8004c6a <_close_r+0x1a>
 8004c64:	682b      	ldr	r3, [r5, #0]
 8004c66:	b103      	cbz	r3, 8004c6a <_close_r+0x1a>
 8004c68:	6023      	str	r3, [r4, #0]
 8004c6a:	bd38      	pop	{r3, r4, r5, pc}
 8004c6c:	2000021c 	.word	0x2000021c

08004c70 <_lseek_r>:
 8004c70:	b538      	push	{r3, r4, r5, lr}
 8004c72:	4d07      	ldr	r5, [pc, #28]	; (8004c90 <_lseek_r+0x20>)
 8004c74:	4604      	mov	r4, r0
 8004c76:	4608      	mov	r0, r1
 8004c78:	4611      	mov	r1, r2
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	602a      	str	r2, [r5, #0]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	f7fe fd76 	bl	8003770 <_lseek>
 8004c84:	1c43      	adds	r3, r0, #1
 8004c86:	d102      	bne.n	8004c8e <_lseek_r+0x1e>
 8004c88:	682b      	ldr	r3, [r5, #0]
 8004c8a:	b103      	cbz	r3, 8004c8e <_lseek_r+0x1e>
 8004c8c:	6023      	str	r3, [r4, #0]
 8004c8e:	bd38      	pop	{r3, r4, r5, pc}
 8004c90:	2000021c 	.word	0x2000021c

08004c94 <_read_r>:
 8004c94:	b538      	push	{r3, r4, r5, lr}
 8004c96:	4d07      	ldr	r5, [pc, #28]	; (8004cb4 <_read_r+0x20>)
 8004c98:	4604      	mov	r4, r0
 8004c9a:	4608      	mov	r0, r1
 8004c9c:	4611      	mov	r1, r2
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	602a      	str	r2, [r5, #0]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	f7fe fd04 	bl	80036b0 <_read>
 8004ca8:	1c43      	adds	r3, r0, #1
 8004caa:	d102      	bne.n	8004cb2 <_read_r+0x1e>
 8004cac:	682b      	ldr	r3, [r5, #0]
 8004cae:	b103      	cbz	r3, 8004cb2 <_read_r+0x1e>
 8004cb0:	6023      	str	r3, [r4, #0]
 8004cb2:	bd38      	pop	{r3, r4, r5, pc}
 8004cb4:	2000021c 	.word	0x2000021c

08004cb8 <_write_r>:
 8004cb8:	b538      	push	{r3, r4, r5, lr}
 8004cba:	4d07      	ldr	r5, [pc, #28]	; (8004cd8 <_write_r+0x20>)
 8004cbc:	4604      	mov	r4, r0
 8004cbe:	4608      	mov	r0, r1
 8004cc0:	4611      	mov	r1, r2
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	602a      	str	r2, [r5, #0]
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	f7fe fd0f 	bl	80036ea <_write>
 8004ccc:	1c43      	adds	r3, r0, #1
 8004cce:	d102      	bne.n	8004cd6 <_write_r+0x1e>
 8004cd0:	682b      	ldr	r3, [r5, #0]
 8004cd2:	b103      	cbz	r3, 8004cd6 <_write_r+0x1e>
 8004cd4:	6023      	str	r3, [r4, #0]
 8004cd6:	bd38      	pop	{r3, r4, r5, pc}
 8004cd8:	2000021c 	.word	0x2000021c

08004cdc <__errno>:
 8004cdc:	4b01      	ldr	r3, [pc, #4]	; (8004ce4 <__errno+0x8>)
 8004cde:	6818      	ldr	r0, [r3, #0]
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	20000064 	.word	0x20000064

08004ce8 <__libc_init_array>:
 8004ce8:	b570      	push	{r4, r5, r6, lr}
 8004cea:	4d0d      	ldr	r5, [pc, #52]	; (8004d20 <__libc_init_array+0x38>)
 8004cec:	4c0d      	ldr	r4, [pc, #52]	; (8004d24 <__libc_init_array+0x3c>)
 8004cee:	1b64      	subs	r4, r4, r5
 8004cf0:	10a4      	asrs	r4, r4, #2
 8004cf2:	2600      	movs	r6, #0
 8004cf4:	42a6      	cmp	r6, r4
 8004cf6:	d109      	bne.n	8004d0c <__libc_init_array+0x24>
 8004cf8:	4d0b      	ldr	r5, [pc, #44]	; (8004d28 <__libc_init_array+0x40>)
 8004cfa:	4c0c      	ldr	r4, [pc, #48]	; (8004d2c <__libc_init_array+0x44>)
 8004cfc:	f002 f924 	bl	8006f48 <_init>
 8004d00:	1b64      	subs	r4, r4, r5
 8004d02:	10a4      	asrs	r4, r4, #2
 8004d04:	2600      	movs	r6, #0
 8004d06:	42a6      	cmp	r6, r4
 8004d08:	d105      	bne.n	8004d16 <__libc_init_array+0x2e>
 8004d0a:	bd70      	pop	{r4, r5, r6, pc}
 8004d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d10:	4798      	blx	r3
 8004d12:	3601      	adds	r6, #1
 8004d14:	e7ee      	b.n	8004cf4 <__libc_init_array+0xc>
 8004d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d1a:	4798      	blx	r3
 8004d1c:	3601      	adds	r6, #1
 8004d1e:	e7f2      	b.n	8004d06 <__libc_init_array+0x1e>
 8004d20:	08022148 	.word	0x08022148
 8004d24:	08022148 	.word	0x08022148
 8004d28:	08022148 	.word	0x08022148
 8004d2c:	0802214c 	.word	0x0802214c

08004d30 <__retarget_lock_acquire_recursive>:
 8004d30:	4770      	bx	lr

08004d32 <__retarget_lock_release_recursive>:
 8004d32:	4770      	bx	lr

08004d34 <memcpy>:
 8004d34:	440a      	add	r2, r1
 8004d36:	4291      	cmp	r1, r2
 8004d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d3c:	d100      	bne.n	8004d40 <memcpy+0xc>
 8004d3e:	4770      	bx	lr
 8004d40:	b510      	push	{r4, lr}
 8004d42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d4a:	4291      	cmp	r1, r2
 8004d4c:	d1f9      	bne.n	8004d42 <memcpy+0xe>
 8004d4e:	bd10      	pop	{r4, pc}

08004d50 <__assert_func>:
 8004d50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004d52:	4614      	mov	r4, r2
 8004d54:	461a      	mov	r2, r3
 8004d56:	4b09      	ldr	r3, [pc, #36]	; (8004d7c <__assert_func+0x2c>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4605      	mov	r5, r0
 8004d5c:	68d8      	ldr	r0, [r3, #12]
 8004d5e:	b14c      	cbz	r4, 8004d74 <__assert_func+0x24>
 8004d60:	4b07      	ldr	r3, [pc, #28]	; (8004d80 <__assert_func+0x30>)
 8004d62:	9100      	str	r1, [sp, #0]
 8004d64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004d68:	4906      	ldr	r1, [pc, #24]	; (8004d84 <__assert_func+0x34>)
 8004d6a:	462b      	mov	r3, r5
 8004d6c:	f000 f9bc 	bl	80050e8 <fiprintf>
 8004d70:	f000 f9dc 	bl	800512c <abort>
 8004d74:	4b04      	ldr	r3, [pc, #16]	; (8004d88 <__assert_func+0x38>)
 8004d76:	461c      	mov	r4, r3
 8004d78:	e7f3      	b.n	8004d62 <__assert_func+0x12>
 8004d7a:	bf00      	nop
 8004d7c:	20000064 	.word	0x20000064
 8004d80:	08021ef3 	.word	0x08021ef3
 8004d84:	08021f00 	.word	0x08021f00
 8004d88:	08021f2e 	.word	0x08021f2e

08004d8c <_free_r>:
 8004d8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d8e:	2900      	cmp	r1, #0
 8004d90:	d044      	beq.n	8004e1c <_free_r+0x90>
 8004d92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d96:	9001      	str	r0, [sp, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f1a1 0404 	sub.w	r4, r1, #4
 8004d9e:	bfb8      	it	lt
 8004da0:	18e4      	addlt	r4, r4, r3
 8004da2:	f000 f8e7 	bl	8004f74 <__malloc_lock>
 8004da6:	4a1e      	ldr	r2, [pc, #120]	; (8004e20 <_free_r+0x94>)
 8004da8:	9801      	ldr	r0, [sp, #4]
 8004daa:	6813      	ldr	r3, [r2, #0]
 8004dac:	b933      	cbnz	r3, 8004dbc <_free_r+0x30>
 8004dae:	6063      	str	r3, [r4, #4]
 8004db0:	6014      	str	r4, [r2, #0]
 8004db2:	b003      	add	sp, #12
 8004db4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004db8:	f000 b8e2 	b.w	8004f80 <__malloc_unlock>
 8004dbc:	42a3      	cmp	r3, r4
 8004dbe:	d908      	bls.n	8004dd2 <_free_r+0x46>
 8004dc0:	6825      	ldr	r5, [r4, #0]
 8004dc2:	1961      	adds	r1, r4, r5
 8004dc4:	428b      	cmp	r3, r1
 8004dc6:	bf01      	itttt	eq
 8004dc8:	6819      	ldreq	r1, [r3, #0]
 8004dca:	685b      	ldreq	r3, [r3, #4]
 8004dcc:	1949      	addeq	r1, r1, r5
 8004dce:	6021      	streq	r1, [r4, #0]
 8004dd0:	e7ed      	b.n	8004dae <_free_r+0x22>
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	b10b      	cbz	r3, 8004ddc <_free_r+0x50>
 8004dd8:	42a3      	cmp	r3, r4
 8004dda:	d9fa      	bls.n	8004dd2 <_free_r+0x46>
 8004ddc:	6811      	ldr	r1, [r2, #0]
 8004dde:	1855      	adds	r5, r2, r1
 8004de0:	42a5      	cmp	r5, r4
 8004de2:	d10b      	bne.n	8004dfc <_free_r+0x70>
 8004de4:	6824      	ldr	r4, [r4, #0]
 8004de6:	4421      	add	r1, r4
 8004de8:	1854      	adds	r4, r2, r1
 8004dea:	42a3      	cmp	r3, r4
 8004dec:	6011      	str	r1, [r2, #0]
 8004dee:	d1e0      	bne.n	8004db2 <_free_r+0x26>
 8004df0:	681c      	ldr	r4, [r3, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	6053      	str	r3, [r2, #4]
 8004df6:	440c      	add	r4, r1
 8004df8:	6014      	str	r4, [r2, #0]
 8004dfa:	e7da      	b.n	8004db2 <_free_r+0x26>
 8004dfc:	d902      	bls.n	8004e04 <_free_r+0x78>
 8004dfe:	230c      	movs	r3, #12
 8004e00:	6003      	str	r3, [r0, #0]
 8004e02:	e7d6      	b.n	8004db2 <_free_r+0x26>
 8004e04:	6825      	ldr	r5, [r4, #0]
 8004e06:	1961      	adds	r1, r4, r5
 8004e08:	428b      	cmp	r3, r1
 8004e0a:	bf04      	itt	eq
 8004e0c:	6819      	ldreq	r1, [r3, #0]
 8004e0e:	685b      	ldreq	r3, [r3, #4]
 8004e10:	6063      	str	r3, [r4, #4]
 8004e12:	bf04      	itt	eq
 8004e14:	1949      	addeq	r1, r1, r5
 8004e16:	6021      	streq	r1, [r4, #0]
 8004e18:	6054      	str	r4, [r2, #4]
 8004e1a:	e7ca      	b.n	8004db2 <_free_r+0x26>
 8004e1c:	b003      	add	sp, #12
 8004e1e:	bd30      	pop	{r4, r5, pc}
 8004e20:	20000224 	.word	0x20000224

08004e24 <malloc>:
 8004e24:	4b02      	ldr	r3, [pc, #8]	; (8004e30 <malloc+0xc>)
 8004e26:	4601      	mov	r1, r0
 8004e28:	6818      	ldr	r0, [r3, #0]
 8004e2a:	f000 b823 	b.w	8004e74 <_malloc_r>
 8004e2e:	bf00      	nop
 8004e30:	20000064 	.word	0x20000064

08004e34 <sbrk_aligned>:
 8004e34:	b570      	push	{r4, r5, r6, lr}
 8004e36:	4e0e      	ldr	r6, [pc, #56]	; (8004e70 <sbrk_aligned+0x3c>)
 8004e38:	460c      	mov	r4, r1
 8004e3a:	6831      	ldr	r1, [r6, #0]
 8004e3c:	4605      	mov	r5, r0
 8004e3e:	b911      	cbnz	r1, 8004e46 <sbrk_aligned+0x12>
 8004e40:	f000 f964 	bl	800510c <_sbrk_r>
 8004e44:	6030      	str	r0, [r6, #0]
 8004e46:	4621      	mov	r1, r4
 8004e48:	4628      	mov	r0, r5
 8004e4a:	f000 f95f 	bl	800510c <_sbrk_r>
 8004e4e:	1c43      	adds	r3, r0, #1
 8004e50:	d00a      	beq.n	8004e68 <sbrk_aligned+0x34>
 8004e52:	1cc4      	adds	r4, r0, #3
 8004e54:	f024 0403 	bic.w	r4, r4, #3
 8004e58:	42a0      	cmp	r0, r4
 8004e5a:	d007      	beq.n	8004e6c <sbrk_aligned+0x38>
 8004e5c:	1a21      	subs	r1, r4, r0
 8004e5e:	4628      	mov	r0, r5
 8004e60:	f000 f954 	bl	800510c <_sbrk_r>
 8004e64:	3001      	adds	r0, #1
 8004e66:	d101      	bne.n	8004e6c <sbrk_aligned+0x38>
 8004e68:	f04f 34ff 	mov.w	r4, #4294967295
 8004e6c:	4620      	mov	r0, r4
 8004e6e:	bd70      	pop	{r4, r5, r6, pc}
 8004e70:	20000228 	.word	0x20000228

08004e74 <_malloc_r>:
 8004e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e78:	1ccd      	adds	r5, r1, #3
 8004e7a:	f025 0503 	bic.w	r5, r5, #3
 8004e7e:	3508      	adds	r5, #8
 8004e80:	2d0c      	cmp	r5, #12
 8004e82:	bf38      	it	cc
 8004e84:	250c      	movcc	r5, #12
 8004e86:	2d00      	cmp	r5, #0
 8004e88:	4607      	mov	r7, r0
 8004e8a:	db01      	blt.n	8004e90 <_malloc_r+0x1c>
 8004e8c:	42a9      	cmp	r1, r5
 8004e8e:	d905      	bls.n	8004e9c <_malloc_r+0x28>
 8004e90:	230c      	movs	r3, #12
 8004e92:	603b      	str	r3, [r7, #0]
 8004e94:	2600      	movs	r6, #0
 8004e96:	4630      	mov	r0, r6
 8004e98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004f70 <_malloc_r+0xfc>
 8004ea0:	f000 f868 	bl	8004f74 <__malloc_lock>
 8004ea4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ea8:	461c      	mov	r4, r3
 8004eaa:	bb5c      	cbnz	r4, 8004f04 <_malloc_r+0x90>
 8004eac:	4629      	mov	r1, r5
 8004eae:	4638      	mov	r0, r7
 8004eb0:	f7ff ffc0 	bl	8004e34 <sbrk_aligned>
 8004eb4:	1c43      	adds	r3, r0, #1
 8004eb6:	4604      	mov	r4, r0
 8004eb8:	d155      	bne.n	8004f66 <_malloc_r+0xf2>
 8004eba:	f8d8 4000 	ldr.w	r4, [r8]
 8004ebe:	4626      	mov	r6, r4
 8004ec0:	2e00      	cmp	r6, #0
 8004ec2:	d145      	bne.n	8004f50 <_malloc_r+0xdc>
 8004ec4:	2c00      	cmp	r4, #0
 8004ec6:	d048      	beq.n	8004f5a <_malloc_r+0xe6>
 8004ec8:	6823      	ldr	r3, [r4, #0]
 8004eca:	4631      	mov	r1, r6
 8004ecc:	4638      	mov	r0, r7
 8004ece:	eb04 0903 	add.w	r9, r4, r3
 8004ed2:	f000 f91b 	bl	800510c <_sbrk_r>
 8004ed6:	4581      	cmp	r9, r0
 8004ed8:	d13f      	bne.n	8004f5a <_malloc_r+0xe6>
 8004eda:	6821      	ldr	r1, [r4, #0]
 8004edc:	1a6d      	subs	r5, r5, r1
 8004ede:	4629      	mov	r1, r5
 8004ee0:	4638      	mov	r0, r7
 8004ee2:	f7ff ffa7 	bl	8004e34 <sbrk_aligned>
 8004ee6:	3001      	adds	r0, #1
 8004ee8:	d037      	beq.n	8004f5a <_malloc_r+0xe6>
 8004eea:	6823      	ldr	r3, [r4, #0]
 8004eec:	442b      	add	r3, r5
 8004eee:	6023      	str	r3, [r4, #0]
 8004ef0:	f8d8 3000 	ldr.w	r3, [r8]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d038      	beq.n	8004f6a <_malloc_r+0xf6>
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	42a2      	cmp	r2, r4
 8004efc:	d12b      	bne.n	8004f56 <_malloc_r+0xe2>
 8004efe:	2200      	movs	r2, #0
 8004f00:	605a      	str	r2, [r3, #4]
 8004f02:	e00f      	b.n	8004f24 <_malloc_r+0xb0>
 8004f04:	6822      	ldr	r2, [r4, #0]
 8004f06:	1b52      	subs	r2, r2, r5
 8004f08:	d41f      	bmi.n	8004f4a <_malloc_r+0xd6>
 8004f0a:	2a0b      	cmp	r2, #11
 8004f0c:	d917      	bls.n	8004f3e <_malloc_r+0xca>
 8004f0e:	1961      	adds	r1, r4, r5
 8004f10:	42a3      	cmp	r3, r4
 8004f12:	6025      	str	r5, [r4, #0]
 8004f14:	bf18      	it	ne
 8004f16:	6059      	strne	r1, [r3, #4]
 8004f18:	6863      	ldr	r3, [r4, #4]
 8004f1a:	bf08      	it	eq
 8004f1c:	f8c8 1000 	streq.w	r1, [r8]
 8004f20:	5162      	str	r2, [r4, r5]
 8004f22:	604b      	str	r3, [r1, #4]
 8004f24:	4638      	mov	r0, r7
 8004f26:	f104 060b 	add.w	r6, r4, #11
 8004f2a:	f000 f829 	bl	8004f80 <__malloc_unlock>
 8004f2e:	f026 0607 	bic.w	r6, r6, #7
 8004f32:	1d23      	adds	r3, r4, #4
 8004f34:	1af2      	subs	r2, r6, r3
 8004f36:	d0ae      	beq.n	8004e96 <_malloc_r+0x22>
 8004f38:	1b9b      	subs	r3, r3, r6
 8004f3a:	50a3      	str	r3, [r4, r2]
 8004f3c:	e7ab      	b.n	8004e96 <_malloc_r+0x22>
 8004f3e:	42a3      	cmp	r3, r4
 8004f40:	6862      	ldr	r2, [r4, #4]
 8004f42:	d1dd      	bne.n	8004f00 <_malloc_r+0x8c>
 8004f44:	f8c8 2000 	str.w	r2, [r8]
 8004f48:	e7ec      	b.n	8004f24 <_malloc_r+0xb0>
 8004f4a:	4623      	mov	r3, r4
 8004f4c:	6864      	ldr	r4, [r4, #4]
 8004f4e:	e7ac      	b.n	8004eaa <_malloc_r+0x36>
 8004f50:	4634      	mov	r4, r6
 8004f52:	6876      	ldr	r6, [r6, #4]
 8004f54:	e7b4      	b.n	8004ec0 <_malloc_r+0x4c>
 8004f56:	4613      	mov	r3, r2
 8004f58:	e7cc      	b.n	8004ef4 <_malloc_r+0x80>
 8004f5a:	230c      	movs	r3, #12
 8004f5c:	603b      	str	r3, [r7, #0]
 8004f5e:	4638      	mov	r0, r7
 8004f60:	f000 f80e 	bl	8004f80 <__malloc_unlock>
 8004f64:	e797      	b.n	8004e96 <_malloc_r+0x22>
 8004f66:	6025      	str	r5, [r4, #0]
 8004f68:	e7dc      	b.n	8004f24 <_malloc_r+0xb0>
 8004f6a:	605b      	str	r3, [r3, #4]
 8004f6c:	deff      	udf	#255	; 0xff
 8004f6e:	bf00      	nop
 8004f70:	20000224 	.word	0x20000224

08004f74 <__malloc_lock>:
 8004f74:	4801      	ldr	r0, [pc, #4]	; (8004f7c <__malloc_lock+0x8>)
 8004f76:	f7ff bedb 	b.w	8004d30 <__retarget_lock_acquire_recursive>
 8004f7a:	bf00      	nop
 8004f7c:	20000220 	.word	0x20000220

08004f80 <__malloc_unlock>:
 8004f80:	4801      	ldr	r0, [pc, #4]	; (8004f88 <__malloc_unlock+0x8>)
 8004f82:	f7ff bed6 	b.w	8004d32 <__retarget_lock_release_recursive>
 8004f86:	bf00      	nop
 8004f88:	20000220 	.word	0x20000220

08004f8c <__sflush_r>:
 8004f8c:	898a      	ldrh	r2, [r1, #12]
 8004f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f92:	4605      	mov	r5, r0
 8004f94:	0710      	lsls	r0, r2, #28
 8004f96:	460c      	mov	r4, r1
 8004f98:	d458      	bmi.n	800504c <__sflush_r+0xc0>
 8004f9a:	684b      	ldr	r3, [r1, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	dc05      	bgt.n	8004fac <__sflush_r+0x20>
 8004fa0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	dc02      	bgt.n	8004fac <__sflush_r+0x20>
 8004fa6:	2000      	movs	r0, #0
 8004fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fae:	2e00      	cmp	r6, #0
 8004fb0:	d0f9      	beq.n	8004fa6 <__sflush_r+0x1a>
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004fb8:	682f      	ldr	r7, [r5, #0]
 8004fba:	6a21      	ldr	r1, [r4, #32]
 8004fbc:	602b      	str	r3, [r5, #0]
 8004fbe:	d032      	beq.n	8005026 <__sflush_r+0x9a>
 8004fc0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004fc2:	89a3      	ldrh	r3, [r4, #12]
 8004fc4:	075a      	lsls	r2, r3, #29
 8004fc6:	d505      	bpl.n	8004fd4 <__sflush_r+0x48>
 8004fc8:	6863      	ldr	r3, [r4, #4]
 8004fca:	1ac0      	subs	r0, r0, r3
 8004fcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004fce:	b10b      	cbz	r3, 8004fd4 <__sflush_r+0x48>
 8004fd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fd2:	1ac0      	subs	r0, r0, r3
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fda:	6a21      	ldr	r1, [r4, #32]
 8004fdc:	4628      	mov	r0, r5
 8004fde:	47b0      	blx	r6
 8004fe0:	1c43      	adds	r3, r0, #1
 8004fe2:	89a3      	ldrh	r3, [r4, #12]
 8004fe4:	d106      	bne.n	8004ff4 <__sflush_r+0x68>
 8004fe6:	6829      	ldr	r1, [r5, #0]
 8004fe8:	291d      	cmp	r1, #29
 8004fea:	d82b      	bhi.n	8005044 <__sflush_r+0xb8>
 8004fec:	4a29      	ldr	r2, [pc, #164]	; (8005094 <__sflush_r+0x108>)
 8004fee:	410a      	asrs	r2, r1
 8004ff0:	07d6      	lsls	r6, r2, #31
 8004ff2:	d427      	bmi.n	8005044 <__sflush_r+0xb8>
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	6062      	str	r2, [r4, #4]
 8004ff8:	04d9      	lsls	r1, r3, #19
 8004ffa:	6922      	ldr	r2, [r4, #16]
 8004ffc:	6022      	str	r2, [r4, #0]
 8004ffe:	d504      	bpl.n	800500a <__sflush_r+0x7e>
 8005000:	1c42      	adds	r2, r0, #1
 8005002:	d101      	bne.n	8005008 <__sflush_r+0x7c>
 8005004:	682b      	ldr	r3, [r5, #0]
 8005006:	b903      	cbnz	r3, 800500a <__sflush_r+0x7e>
 8005008:	6560      	str	r0, [r4, #84]	; 0x54
 800500a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800500c:	602f      	str	r7, [r5, #0]
 800500e:	2900      	cmp	r1, #0
 8005010:	d0c9      	beq.n	8004fa6 <__sflush_r+0x1a>
 8005012:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005016:	4299      	cmp	r1, r3
 8005018:	d002      	beq.n	8005020 <__sflush_r+0x94>
 800501a:	4628      	mov	r0, r5
 800501c:	f7ff feb6 	bl	8004d8c <_free_r>
 8005020:	2000      	movs	r0, #0
 8005022:	6360      	str	r0, [r4, #52]	; 0x34
 8005024:	e7c0      	b.n	8004fa8 <__sflush_r+0x1c>
 8005026:	2301      	movs	r3, #1
 8005028:	4628      	mov	r0, r5
 800502a:	47b0      	blx	r6
 800502c:	1c41      	adds	r1, r0, #1
 800502e:	d1c8      	bne.n	8004fc2 <__sflush_r+0x36>
 8005030:	682b      	ldr	r3, [r5, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d0c5      	beq.n	8004fc2 <__sflush_r+0x36>
 8005036:	2b1d      	cmp	r3, #29
 8005038:	d001      	beq.n	800503e <__sflush_r+0xb2>
 800503a:	2b16      	cmp	r3, #22
 800503c:	d101      	bne.n	8005042 <__sflush_r+0xb6>
 800503e:	602f      	str	r7, [r5, #0]
 8005040:	e7b1      	b.n	8004fa6 <__sflush_r+0x1a>
 8005042:	89a3      	ldrh	r3, [r4, #12]
 8005044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005048:	81a3      	strh	r3, [r4, #12]
 800504a:	e7ad      	b.n	8004fa8 <__sflush_r+0x1c>
 800504c:	690f      	ldr	r7, [r1, #16]
 800504e:	2f00      	cmp	r7, #0
 8005050:	d0a9      	beq.n	8004fa6 <__sflush_r+0x1a>
 8005052:	0793      	lsls	r3, r2, #30
 8005054:	680e      	ldr	r6, [r1, #0]
 8005056:	bf08      	it	eq
 8005058:	694b      	ldreq	r3, [r1, #20]
 800505a:	600f      	str	r7, [r1, #0]
 800505c:	bf18      	it	ne
 800505e:	2300      	movne	r3, #0
 8005060:	eba6 0807 	sub.w	r8, r6, r7
 8005064:	608b      	str	r3, [r1, #8]
 8005066:	f1b8 0f00 	cmp.w	r8, #0
 800506a:	dd9c      	ble.n	8004fa6 <__sflush_r+0x1a>
 800506c:	6a21      	ldr	r1, [r4, #32]
 800506e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005070:	4643      	mov	r3, r8
 8005072:	463a      	mov	r2, r7
 8005074:	4628      	mov	r0, r5
 8005076:	47b0      	blx	r6
 8005078:	2800      	cmp	r0, #0
 800507a:	dc06      	bgt.n	800508a <__sflush_r+0xfe>
 800507c:	89a3      	ldrh	r3, [r4, #12]
 800507e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005082:	81a3      	strh	r3, [r4, #12]
 8005084:	f04f 30ff 	mov.w	r0, #4294967295
 8005088:	e78e      	b.n	8004fa8 <__sflush_r+0x1c>
 800508a:	4407      	add	r7, r0
 800508c:	eba8 0800 	sub.w	r8, r8, r0
 8005090:	e7e9      	b.n	8005066 <__sflush_r+0xda>
 8005092:	bf00      	nop
 8005094:	dfbffffe 	.word	0xdfbffffe

08005098 <_fflush_r>:
 8005098:	b538      	push	{r3, r4, r5, lr}
 800509a:	690b      	ldr	r3, [r1, #16]
 800509c:	4605      	mov	r5, r0
 800509e:	460c      	mov	r4, r1
 80050a0:	b913      	cbnz	r3, 80050a8 <_fflush_r+0x10>
 80050a2:	2500      	movs	r5, #0
 80050a4:	4628      	mov	r0, r5
 80050a6:	bd38      	pop	{r3, r4, r5, pc}
 80050a8:	b118      	cbz	r0, 80050b2 <_fflush_r+0x1a>
 80050aa:	6a03      	ldr	r3, [r0, #32]
 80050ac:	b90b      	cbnz	r3, 80050b2 <_fflush_r+0x1a>
 80050ae:	f7ff fd4d 	bl	8004b4c <__sinit>
 80050b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d0f3      	beq.n	80050a2 <_fflush_r+0xa>
 80050ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80050bc:	07d0      	lsls	r0, r2, #31
 80050be:	d404      	bmi.n	80050ca <_fflush_r+0x32>
 80050c0:	0599      	lsls	r1, r3, #22
 80050c2:	d402      	bmi.n	80050ca <_fflush_r+0x32>
 80050c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050c6:	f7ff fe33 	bl	8004d30 <__retarget_lock_acquire_recursive>
 80050ca:	4628      	mov	r0, r5
 80050cc:	4621      	mov	r1, r4
 80050ce:	f7ff ff5d 	bl	8004f8c <__sflush_r>
 80050d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050d4:	07da      	lsls	r2, r3, #31
 80050d6:	4605      	mov	r5, r0
 80050d8:	d4e4      	bmi.n	80050a4 <_fflush_r+0xc>
 80050da:	89a3      	ldrh	r3, [r4, #12]
 80050dc:	059b      	lsls	r3, r3, #22
 80050de:	d4e1      	bmi.n	80050a4 <_fflush_r+0xc>
 80050e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050e2:	f7ff fe26 	bl	8004d32 <__retarget_lock_release_recursive>
 80050e6:	e7dd      	b.n	80050a4 <_fflush_r+0xc>

080050e8 <fiprintf>:
 80050e8:	b40e      	push	{r1, r2, r3}
 80050ea:	b503      	push	{r0, r1, lr}
 80050ec:	4601      	mov	r1, r0
 80050ee:	ab03      	add	r3, sp, #12
 80050f0:	4805      	ldr	r0, [pc, #20]	; (8005108 <fiprintf+0x20>)
 80050f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80050f6:	6800      	ldr	r0, [r0, #0]
 80050f8:	9301      	str	r3, [sp, #4]
 80050fa:	f000 f847 	bl	800518c <_vfiprintf_r>
 80050fe:	b002      	add	sp, #8
 8005100:	f85d eb04 	ldr.w	lr, [sp], #4
 8005104:	b003      	add	sp, #12
 8005106:	4770      	bx	lr
 8005108:	20000064 	.word	0x20000064

0800510c <_sbrk_r>:
 800510c:	b538      	push	{r3, r4, r5, lr}
 800510e:	4d06      	ldr	r5, [pc, #24]	; (8005128 <_sbrk_r+0x1c>)
 8005110:	2300      	movs	r3, #0
 8005112:	4604      	mov	r4, r0
 8005114:	4608      	mov	r0, r1
 8005116:	602b      	str	r3, [r5, #0]
 8005118:	f7fe fb38 	bl	800378c <_sbrk>
 800511c:	1c43      	adds	r3, r0, #1
 800511e:	d102      	bne.n	8005126 <_sbrk_r+0x1a>
 8005120:	682b      	ldr	r3, [r5, #0]
 8005122:	b103      	cbz	r3, 8005126 <_sbrk_r+0x1a>
 8005124:	6023      	str	r3, [r4, #0]
 8005126:	bd38      	pop	{r3, r4, r5, pc}
 8005128:	2000021c 	.word	0x2000021c

0800512c <abort>:
 800512c:	b508      	push	{r3, lr}
 800512e:	2006      	movs	r0, #6
 8005130:	f000 fb94 	bl	800585c <raise>
 8005134:	2001      	movs	r0, #1
 8005136:	f7fe fab1 	bl	800369c <_exit>

0800513a <__sfputc_r>:
 800513a:	6893      	ldr	r3, [r2, #8]
 800513c:	3b01      	subs	r3, #1
 800513e:	2b00      	cmp	r3, #0
 8005140:	b410      	push	{r4}
 8005142:	6093      	str	r3, [r2, #8]
 8005144:	da08      	bge.n	8005158 <__sfputc_r+0x1e>
 8005146:	6994      	ldr	r4, [r2, #24]
 8005148:	42a3      	cmp	r3, r4
 800514a:	db01      	blt.n	8005150 <__sfputc_r+0x16>
 800514c:	290a      	cmp	r1, #10
 800514e:	d103      	bne.n	8005158 <__sfputc_r+0x1e>
 8005150:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005154:	f000 bac4 	b.w	80056e0 <__swbuf_r>
 8005158:	6813      	ldr	r3, [r2, #0]
 800515a:	1c58      	adds	r0, r3, #1
 800515c:	6010      	str	r0, [r2, #0]
 800515e:	7019      	strb	r1, [r3, #0]
 8005160:	4608      	mov	r0, r1
 8005162:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005166:	4770      	bx	lr

08005168 <__sfputs_r>:
 8005168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800516a:	4606      	mov	r6, r0
 800516c:	460f      	mov	r7, r1
 800516e:	4614      	mov	r4, r2
 8005170:	18d5      	adds	r5, r2, r3
 8005172:	42ac      	cmp	r4, r5
 8005174:	d101      	bne.n	800517a <__sfputs_r+0x12>
 8005176:	2000      	movs	r0, #0
 8005178:	e007      	b.n	800518a <__sfputs_r+0x22>
 800517a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800517e:	463a      	mov	r2, r7
 8005180:	4630      	mov	r0, r6
 8005182:	f7ff ffda 	bl	800513a <__sfputc_r>
 8005186:	1c43      	adds	r3, r0, #1
 8005188:	d1f3      	bne.n	8005172 <__sfputs_r+0xa>
 800518a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800518c <_vfiprintf_r>:
 800518c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005190:	460d      	mov	r5, r1
 8005192:	b09d      	sub	sp, #116	; 0x74
 8005194:	4614      	mov	r4, r2
 8005196:	4698      	mov	r8, r3
 8005198:	4606      	mov	r6, r0
 800519a:	b118      	cbz	r0, 80051a4 <_vfiprintf_r+0x18>
 800519c:	6a03      	ldr	r3, [r0, #32]
 800519e:	b90b      	cbnz	r3, 80051a4 <_vfiprintf_r+0x18>
 80051a0:	f7ff fcd4 	bl	8004b4c <__sinit>
 80051a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051a6:	07d9      	lsls	r1, r3, #31
 80051a8:	d405      	bmi.n	80051b6 <_vfiprintf_r+0x2a>
 80051aa:	89ab      	ldrh	r3, [r5, #12]
 80051ac:	059a      	lsls	r2, r3, #22
 80051ae:	d402      	bmi.n	80051b6 <_vfiprintf_r+0x2a>
 80051b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051b2:	f7ff fdbd 	bl	8004d30 <__retarget_lock_acquire_recursive>
 80051b6:	89ab      	ldrh	r3, [r5, #12]
 80051b8:	071b      	lsls	r3, r3, #28
 80051ba:	d501      	bpl.n	80051c0 <_vfiprintf_r+0x34>
 80051bc:	692b      	ldr	r3, [r5, #16]
 80051be:	b99b      	cbnz	r3, 80051e8 <_vfiprintf_r+0x5c>
 80051c0:	4629      	mov	r1, r5
 80051c2:	4630      	mov	r0, r6
 80051c4:	f000 faca 	bl	800575c <__swsetup_r>
 80051c8:	b170      	cbz	r0, 80051e8 <_vfiprintf_r+0x5c>
 80051ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051cc:	07dc      	lsls	r4, r3, #31
 80051ce:	d504      	bpl.n	80051da <_vfiprintf_r+0x4e>
 80051d0:	f04f 30ff 	mov.w	r0, #4294967295
 80051d4:	b01d      	add	sp, #116	; 0x74
 80051d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051da:	89ab      	ldrh	r3, [r5, #12]
 80051dc:	0598      	lsls	r0, r3, #22
 80051de:	d4f7      	bmi.n	80051d0 <_vfiprintf_r+0x44>
 80051e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051e2:	f7ff fda6 	bl	8004d32 <__retarget_lock_release_recursive>
 80051e6:	e7f3      	b.n	80051d0 <_vfiprintf_r+0x44>
 80051e8:	2300      	movs	r3, #0
 80051ea:	9309      	str	r3, [sp, #36]	; 0x24
 80051ec:	2320      	movs	r3, #32
 80051ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80051f6:	2330      	movs	r3, #48	; 0x30
 80051f8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80053ac <_vfiprintf_r+0x220>
 80051fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005200:	f04f 0901 	mov.w	r9, #1
 8005204:	4623      	mov	r3, r4
 8005206:	469a      	mov	sl, r3
 8005208:	f813 2b01 	ldrb.w	r2, [r3], #1
 800520c:	b10a      	cbz	r2, 8005212 <_vfiprintf_r+0x86>
 800520e:	2a25      	cmp	r2, #37	; 0x25
 8005210:	d1f9      	bne.n	8005206 <_vfiprintf_r+0x7a>
 8005212:	ebba 0b04 	subs.w	fp, sl, r4
 8005216:	d00b      	beq.n	8005230 <_vfiprintf_r+0xa4>
 8005218:	465b      	mov	r3, fp
 800521a:	4622      	mov	r2, r4
 800521c:	4629      	mov	r1, r5
 800521e:	4630      	mov	r0, r6
 8005220:	f7ff ffa2 	bl	8005168 <__sfputs_r>
 8005224:	3001      	adds	r0, #1
 8005226:	f000 80a9 	beq.w	800537c <_vfiprintf_r+0x1f0>
 800522a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800522c:	445a      	add	r2, fp
 800522e:	9209      	str	r2, [sp, #36]	; 0x24
 8005230:	f89a 3000 	ldrb.w	r3, [sl]
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 80a1 	beq.w	800537c <_vfiprintf_r+0x1f0>
 800523a:	2300      	movs	r3, #0
 800523c:	f04f 32ff 	mov.w	r2, #4294967295
 8005240:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005244:	f10a 0a01 	add.w	sl, sl, #1
 8005248:	9304      	str	r3, [sp, #16]
 800524a:	9307      	str	r3, [sp, #28]
 800524c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005250:	931a      	str	r3, [sp, #104]	; 0x68
 8005252:	4654      	mov	r4, sl
 8005254:	2205      	movs	r2, #5
 8005256:	f814 1b01 	ldrb.w	r1, [r4], #1
 800525a:	4854      	ldr	r0, [pc, #336]	; (80053ac <_vfiprintf_r+0x220>)
 800525c:	f7fa ffc0 	bl	80001e0 <memchr>
 8005260:	9a04      	ldr	r2, [sp, #16]
 8005262:	b9d8      	cbnz	r0, 800529c <_vfiprintf_r+0x110>
 8005264:	06d1      	lsls	r1, r2, #27
 8005266:	bf44      	itt	mi
 8005268:	2320      	movmi	r3, #32
 800526a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800526e:	0713      	lsls	r3, r2, #28
 8005270:	bf44      	itt	mi
 8005272:	232b      	movmi	r3, #43	; 0x2b
 8005274:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005278:	f89a 3000 	ldrb.w	r3, [sl]
 800527c:	2b2a      	cmp	r3, #42	; 0x2a
 800527e:	d015      	beq.n	80052ac <_vfiprintf_r+0x120>
 8005280:	9a07      	ldr	r2, [sp, #28]
 8005282:	4654      	mov	r4, sl
 8005284:	2000      	movs	r0, #0
 8005286:	f04f 0c0a 	mov.w	ip, #10
 800528a:	4621      	mov	r1, r4
 800528c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005290:	3b30      	subs	r3, #48	; 0x30
 8005292:	2b09      	cmp	r3, #9
 8005294:	d94d      	bls.n	8005332 <_vfiprintf_r+0x1a6>
 8005296:	b1b0      	cbz	r0, 80052c6 <_vfiprintf_r+0x13a>
 8005298:	9207      	str	r2, [sp, #28]
 800529a:	e014      	b.n	80052c6 <_vfiprintf_r+0x13a>
 800529c:	eba0 0308 	sub.w	r3, r0, r8
 80052a0:	fa09 f303 	lsl.w	r3, r9, r3
 80052a4:	4313      	orrs	r3, r2
 80052a6:	9304      	str	r3, [sp, #16]
 80052a8:	46a2      	mov	sl, r4
 80052aa:	e7d2      	b.n	8005252 <_vfiprintf_r+0xc6>
 80052ac:	9b03      	ldr	r3, [sp, #12]
 80052ae:	1d19      	adds	r1, r3, #4
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	9103      	str	r1, [sp, #12]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	bfbb      	ittet	lt
 80052b8:	425b      	neglt	r3, r3
 80052ba:	f042 0202 	orrlt.w	r2, r2, #2
 80052be:	9307      	strge	r3, [sp, #28]
 80052c0:	9307      	strlt	r3, [sp, #28]
 80052c2:	bfb8      	it	lt
 80052c4:	9204      	strlt	r2, [sp, #16]
 80052c6:	7823      	ldrb	r3, [r4, #0]
 80052c8:	2b2e      	cmp	r3, #46	; 0x2e
 80052ca:	d10c      	bne.n	80052e6 <_vfiprintf_r+0x15a>
 80052cc:	7863      	ldrb	r3, [r4, #1]
 80052ce:	2b2a      	cmp	r3, #42	; 0x2a
 80052d0:	d134      	bne.n	800533c <_vfiprintf_r+0x1b0>
 80052d2:	9b03      	ldr	r3, [sp, #12]
 80052d4:	1d1a      	adds	r2, r3, #4
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	9203      	str	r2, [sp, #12]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	bfb8      	it	lt
 80052de:	f04f 33ff 	movlt.w	r3, #4294967295
 80052e2:	3402      	adds	r4, #2
 80052e4:	9305      	str	r3, [sp, #20]
 80052e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80053bc <_vfiprintf_r+0x230>
 80052ea:	7821      	ldrb	r1, [r4, #0]
 80052ec:	2203      	movs	r2, #3
 80052ee:	4650      	mov	r0, sl
 80052f0:	f7fa ff76 	bl	80001e0 <memchr>
 80052f4:	b138      	cbz	r0, 8005306 <_vfiprintf_r+0x17a>
 80052f6:	9b04      	ldr	r3, [sp, #16]
 80052f8:	eba0 000a 	sub.w	r0, r0, sl
 80052fc:	2240      	movs	r2, #64	; 0x40
 80052fe:	4082      	lsls	r2, r0
 8005300:	4313      	orrs	r3, r2
 8005302:	3401      	adds	r4, #1
 8005304:	9304      	str	r3, [sp, #16]
 8005306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800530a:	4829      	ldr	r0, [pc, #164]	; (80053b0 <_vfiprintf_r+0x224>)
 800530c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005310:	2206      	movs	r2, #6
 8005312:	f7fa ff65 	bl	80001e0 <memchr>
 8005316:	2800      	cmp	r0, #0
 8005318:	d03f      	beq.n	800539a <_vfiprintf_r+0x20e>
 800531a:	4b26      	ldr	r3, [pc, #152]	; (80053b4 <_vfiprintf_r+0x228>)
 800531c:	bb1b      	cbnz	r3, 8005366 <_vfiprintf_r+0x1da>
 800531e:	9b03      	ldr	r3, [sp, #12]
 8005320:	3307      	adds	r3, #7
 8005322:	f023 0307 	bic.w	r3, r3, #7
 8005326:	3308      	adds	r3, #8
 8005328:	9303      	str	r3, [sp, #12]
 800532a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800532c:	443b      	add	r3, r7
 800532e:	9309      	str	r3, [sp, #36]	; 0x24
 8005330:	e768      	b.n	8005204 <_vfiprintf_r+0x78>
 8005332:	fb0c 3202 	mla	r2, ip, r2, r3
 8005336:	460c      	mov	r4, r1
 8005338:	2001      	movs	r0, #1
 800533a:	e7a6      	b.n	800528a <_vfiprintf_r+0xfe>
 800533c:	2300      	movs	r3, #0
 800533e:	3401      	adds	r4, #1
 8005340:	9305      	str	r3, [sp, #20]
 8005342:	4619      	mov	r1, r3
 8005344:	f04f 0c0a 	mov.w	ip, #10
 8005348:	4620      	mov	r0, r4
 800534a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800534e:	3a30      	subs	r2, #48	; 0x30
 8005350:	2a09      	cmp	r2, #9
 8005352:	d903      	bls.n	800535c <_vfiprintf_r+0x1d0>
 8005354:	2b00      	cmp	r3, #0
 8005356:	d0c6      	beq.n	80052e6 <_vfiprintf_r+0x15a>
 8005358:	9105      	str	r1, [sp, #20]
 800535a:	e7c4      	b.n	80052e6 <_vfiprintf_r+0x15a>
 800535c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005360:	4604      	mov	r4, r0
 8005362:	2301      	movs	r3, #1
 8005364:	e7f0      	b.n	8005348 <_vfiprintf_r+0x1bc>
 8005366:	ab03      	add	r3, sp, #12
 8005368:	9300      	str	r3, [sp, #0]
 800536a:	462a      	mov	r2, r5
 800536c:	4b12      	ldr	r3, [pc, #72]	; (80053b8 <_vfiprintf_r+0x22c>)
 800536e:	a904      	add	r1, sp, #16
 8005370:	4630      	mov	r0, r6
 8005372:	f3af 8000 	nop.w
 8005376:	4607      	mov	r7, r0
 8005378:	1c78      	adds	r0, r7, #1
 800537a:	d1d6      	bne.n	800532a <_vfiprintf_r+0x19e>
 800537c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800537e:	07d9      	lsls	r1, r3, #31
 8005380:	d405      	bmi.n	800538e <_vfiprintf_r+0x202>
 8005382:	89ab      	ldrh	r3, [r5, #12]
 8005384:	059a      	lsls	r2, r3, #22
 8005386:	d402      	bmi.n	800538e <_vfiprintf_r+0x202>
 8005388:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800538a:	f7ff fcd2 	bl	8004d32 <__retarget_lock_release_recursive>
 800538e:	89ab      	ldrh	r3, [r5, #12]
 8005390:	065b      	lsls	r3, r3, #25
 8005392:	f53f af1d 	bmi.w	80051d0 <_vfiprintf_r+0x44>
 8005396:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005398:	e71c      	b.n	80051d4 <_vfiprintf_r+0x48>
 800539a:	ab03      	add	r3, sp, #12
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	462a      	mov	r2, r5
 80053a0:	4b05      	ldr	r3, [pc, #20]	; (80053b8 <_vfiprintf_r+0x22c>)
 80053a2:	a904      	add	r1, sp, #16
 80053a4:	4630      	mov	r0, r6
 80053a6:	f000 f879 	bl	800549c <_printf_i>
 80053aa:	e7e4      	b.n	8005376 <_vfiprintf_r+0x1ea>
 80053ac:	08021f2f 	.word	0x08021f2f
 80053b0:	08021f39 	.word	0x08021f39
 80053b4:	00000000 	.word	0x00000000
 80053b8:	08005169 	.word	0x08005169
 80053bc:	08021f35 	.word	0x08021f35

080053c0 <_printf_common>:
 80053c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053c4:	4616      	mov	r6, r2
 80053c6:	4699      	mov	r9, r3
 80053c8:	688a      	ldr	r2, [r1, #8]
 80053ca:	690b      	ldr	r3, [r1, #16]
 80053cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053d0:	4293      	cmp	r3, r2
 80053d2:	bfb8      	it	lt
 80053d4:	4613      	movlt	r3, r2
 80053d6:	6033      	str	r3, [r6, #0]
 80053d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053dc:	4607      	mov	r7, r0
 80053de:	460c      	mov	r4, r1
 80053e0:	b10a      	cbz	r2, 80053e6 <_printf_common+0x26>
 80053e2:	3301      	adds	r3, #1
 80053e4:	6033      	str	r3, [r6, #0]
 80053e6:	6823      	ldr	r3, [r4, #0]
 80053e8:	0699      	lsls	r1, r3, #26
 80053ea:	bf42      	ittt	mi
 80053ec:	6833      	ldrmi	r3, [r6, #0]
 80053ee:	3302      	addmi	r3, #2
 80053f0:	6033      	strmi	r3, [r6, #0]
 80053f2:	6825      	ldr	r5, [r4, #0]
 80053f4:	f015 0506 	ands.w	r5, r5, #6
 80053f8:	d106      	bne.n	8005408 <_printf_common+0x48>
 80053fa:	f104 0a19 	add.w	sl, r4, #25
 80053fe:	68e3      	ldr	r3, [r4, #12]
 8005400:	6832      	ldr	r2, [r6, #0]
 8005402:	1a9b      	subs	r3, r3, r2
 8005404:	42ab      	cmp	r3, r5
 8005406:	dc26      	bgt.n	8005456 <_printf_common+0x96>
 8005408:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800540c:	1e13      	subs	r3, r2, #0
 800540e:	6822      	ldr	r2, [r4, #0]
 8005410:	bf18      	it	ne
 8005412:	2301      	movne	r3, #1
 8005414:	0692      	lsls	r2, r2, #26
 8005416:	d42b      	bmi.n	8005470 <_printf_common+0xb0>
 8005418:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800541c:	4649      	mov	r1, r9
 800541e:	4638      	mov	r0, r7
 8005420:	47c0      	blx	r8
 8005422:	3001      	adds	r0, #1
 8005424:	d01e      	beq.n	8005464 <_printf_common+0xa4>
 8005426:	6823      	ldr	r3, [r4, #0]
 8005428:	6922      	ldr	r2, [r4, #16]
 800542a:	f003 0306 	and.w	r3, r3, #6
 800542e:	2b04      	cmp	r3, #4
 8005430:	bf02      	ittt	eq
 8005432:	68e5      	ldreq	r5, [r4, #12]
 8005434:	6833      	ldreq	r3, [r6, #0]
 8005436:	1aed      	subeq	r5, r5, r3
 8005438:	68a3      	ldr	r3, [r4, #8]
 800543a:	bf0c      	ite	eq
 800543c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005440:	2500      	movne	r5, #0
 8005442:	4293      	cmp	r3, r2
 8005444:	bfc4      	itt	gt
 8005446:	1a9b      	subgt	r3, r3, r2
 8005448:	18ed      	addgt	r5, r5, r3
 800544a:	2600      	movs	r6, #0
 800544c:	341a      	adds	r4, #26
 800544e:	42b5      	cmp	r5, r6
 8005450:	d11a      	bne.n	8005488 <_printf_common+0xc8>
 8005452:	2000      	movs	r0, #0
 8005454:	e008      	b.n	8005468 <_printf_common+0xa8>
 8005456:	2301      	movs	r3, #1
 8005458:	4652      	mov	r2, sl
 800545a:	4649      	mov	r1, r9
 800545c:	4638      	mov	r0, r7
 800545e:	47c0      	blx	r8
 8005460:	3001      	adds	r0, #1
 8005462:	d103      	bne.n	800546c <_printf_common+0xac>
 8005464:	f04f 30ff 	mov.w	r0, #4294967295
 8005468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800546c:	3501      	adds	r5, #1
 800546e:	e7c6      	b.n	80053fe <_printf_common+0x3e>
 8005470:	18e1      	adds	r1, r4, r3
 8005472:	1c5a      	adds	r2, r3, #1
 8005474:	2030      	movs	r0, #48	; 0x30
 8005476:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800547a:	4422      	add	r2, r4
 800547c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005480:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005484:	3302      	adds	r3, #2
 8005486:	e7c7      	b.n	8005418 <_printf_common+0x58>
 8005488:	2301      	movs	r3, #1
 800548a:	4622      	mov	r2, r4
 800548c:	4649      	mov	r1, r9
 800548e:	4638      	mov	r0, r7
 8005490:	47c0      	blx	r8
 8005492:	3001      	adds	r0, #1
 8005494:	d0e6      	beq.n	8005464 <_printf_common+0xa4>
 8005496:	3601      	adds	r6, #1
 8005498:	e7d9      	b.n	800544e <_printf_common+0x8e>
	...

0800549c <_printf_i>:
 800549c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054a0:	7e0f      	ldrb	r7, [r1, #24]
 80054a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054a4:	2f78      	cmp	r7, #120	; 0x78
 80054a6:	4691      	mov	r9, r2
 80054a8:	4680      	mov	r8, r0
 80054aa:	460c      	mov	r4, r1
 80054ac:	469a      	mov	sl, r3
 80054ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054b2:	d807      	bhi.n	80054c4 <_printf_i+0x28>
 80054b4:	2f62      	cmp	r7, #98	; 0x62
 80054b6:	d80a      	bhi.n	80054ce <_printf_i+0x32>
 80054b8:	2f00      	cmp	r7, #0
 80054ba:	f000 80d4 	beq.w	8005666 <_printf_i+0x1ca>
 80054be:	2f58      	cmp	r7, #88	; 0x58
 80054c0:	f000 80c0 	beq.w	8005644 <_printf_i+0x1a8>
 80054c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054cc:	e03a      	b.n	8005544 <_printf_i+0xa8>
 80054ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054d2:	2b15      	cmp	r3, #21
 80054d4:	d8f6      	bhi.n	80054c4 <_printf_i+0x28>
 80054d6:	a101      	add	r1, pc, #4	; (adr r1, 80054dc <_printf_i+0x40>)
 80054d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054dc:	08005535 	.word	0x08005535
 80054e0:	08005549 	.word	0x08005549
 80054e4:	080054c5 	.word	0x080054c5
 80054e8:	080054c5 	.word	0x080054c5
 80054ec:	080054c5 	.word	0x080054c5
 80054f0:	080054c5 	.word	0x080054c5
 80054f4:	08005549 	.word	0x08005549
 80054f8:	080054c5 	.word	0x080054c5
 80054fc:	080054c5 	.word	0x080054c5
 8005500:	080054c5 	.word	0x080054c5
 8005504:	080054c5 	.word	0x080054c5
 8005508:	0800564d 	.word	0x0800564d
 800550c:	08005575 	.word	0x08005575
 8005510:	08005607 	.word	0x08005607
 8005514:	080054c5 	.word	0x080054c5
 8005518:	080054c5 	.word	0x080054c5
 800551c:	0800566f 	.word	0x0800566f
 8005520:	080054c5 	.word	0x080054c5
 8005524:	08005575 	.word	0x08005575
 8005528:	080054c5 	.word	0x080054c5
 800552c:	080054c5 	.word	0x080054c5
 8005530:	0800560f 	.word	0x0800560f
 8005534:	682b      	ldr	r3, [r5, #0]
 8005536:	1d1a      	adds	r2, r3, #4
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	602a      	str	r2, [r5, #0]
 800553c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005540:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005544:	2301      	movs	r3, #1
 8005546:	e09f      	b.n	8005688 <_printf_i+0x1ec>
 8005548:	6820      	ldr	r0, [r4, #0]
 800554a:	682b      	ldr	r3, [r5, #0]
 800554c:	0607      	lsls	r7, r0, #24
 800554e:	f103 0104 	add.w	r1, r3, #4
 8005552:	6029      	str	r1, [r5, #0]
 8005554:	d501      	bpl.n	800555a <_printf_i+0xbe>
 8005556:	681e      	ldr	r6, [r3, #0]
 8005558:	e003      	b.n	8005562 <_printf_i+0xc6>
 800555a:	0646      	lsls	r6, r0, #25
 800555c:	d5fb      	bpl.n	8005556 <_printf_i+0xba>
 800555e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005562:	2e00      	cmp	r6, #0
 8005564:	da03      	bge.n	800556e <_printf_i+0xd2>
 8005566:	232d      	movs	r3, #45	; 0x2d
 8005568:	4276      	negs	r6, r6
 800556a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800556e:	485a      	ldr	r0, [pc, #360]	; (80056d8 <_printf_i+0x23c>)
 8005570:	230a      	movs	r3, #10
 8005572:	e012      	b.n	800559a <_printf_i+0xfe>
 8005574:	682b      	ldr	r3, [r5, #0]
 8005576:	6820      	ldr	r0, [r4, #0]
 8005578:	1d19      	adds	r1, r3, #4
 800557a:	6029      	str	r1, [r5, #0]
 800557c:	0605      	lsls	r5, r0, #24
 800557e:	d501      	bpl.n	8005584 <_printf_i+0xe8>
 8005580:	681e      	ldr	r6, [r3, #0]
 8005582:	e002      	b.n	800558a <_printf_i+0xee>
 8005584:	0641      	lsls	r1, r0, #25
 8005586:	d5fb      	bpl.n	8005580 <_printf_i+0xe4>
 8005588:	881e      	ldrh	r6, [r3, #0]
 800558a:	4853      	ldr	r0, [pc, #332]	; (80056d8 <_printf_i+0x23c>)
 800558c:	2f6f      	cmp	r7, #111	; 0x6f
 800558e:	bf0c      	ite	eq
 8005590:	2308      	moveq	r3, #8
 8005592:	230a      	movne	r3, #10
 8005594:	2100      	movs	r1, #0
 8005596:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800559a:	6865      	ldr	r5, [r4, #4]
 800559c:	60a5      	str	r5, [r4, #8]
 800559e:	2d00      	cmp	r5, #0
 80055a0:	bfa2      	ittt	ge
 80055a2:	6821      	ldrge	r1, [r4, #0]
 80055a4:	f021 0104 	bicge.w	r1, r1, #4
 80055a8:	6021      	strge	r1, [r4, #0]
 80055aa:	b90e      	cbnz	r6, 80055b0 <_printf_i+0x114>
 80055ac:	2d00      	cmp	r5, #0
 80055ae:	d04b      	beq.n	8005648 <_printf_i+0x1ac>
 80055b0:	4615      	mov	r5, r2
 80055b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80055b6:	fb03 6711 	mls	r7, r3, r1, r6
 80055ba:	5dc7      	ldrb	r7, [r0, r7]
 80055bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80055c0:	4637      	mov	r7, r6
 80055c2:	42bb      	cmp	r3, r7
 80055c4:	460e      	mov	r6, r1
 80055c6:	d9f4      	bls.n	80055b2 <_printf_i+0x116>
 80055c8:	2b08      	cmp	r3, #8
 80055ca:	d10b      	bne.n	80055e4 <_printf_i+0x148>
 80055cc:	6823      	ldr	r3, [r4, #0]
 80055ce:	07de      	lsls	r6, r3, #31
 80055d0:	d508      	bpl.n	80055e4 <_printf_i+0x148>
 80055d2:	6923      	ldr	r3, [r4, #16]
 80055d4:	6861      	ldr	r1, [r4, #4]
 80055d6:	4299      	cmp	r1, r3
 80055d8:	bfde      	ittt	le
 80055da:	2330      	movle	r3, #48	; 0x30
 80055dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055e4:	1b52      	subs	r2, r2, r5
 80055e6:	6122      	str	r2, [r4, #16]
 80055e8:	f8cd a000 	str.w	sl, [sp]
 80055ec:	464b      	mov	r3, r9
 80055ee:	aa03      	add	r2, sp, #12
 80055f0:	4621      	mov	r1, r4
 80055f2:	4640      	mov	r0, r8
 80055f4:	f7ff fee4 	bl	80053c0 <_printf_common>
 80055f8:	3001      	adds	r0, #1
 80055fa:	d14a      	bne.n	8005692 <_printf_i+0x1f6>
 80055fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005600:	b004      	add	sp, #16
 8005602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005606:	6823      	ldr	r3, [r4, #0]
 8005608:	f043 0320 	orr.w	r3, r3, #32
 800560c:	6023      	str	r3, [r4, #0]
 800560e:	4833      	ldr	r0, [pc, #204]	; (80056dc <_printf_i+0x240>)
 8005610:	2778      	movs	r7, #120	; 0x78
 8005612:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005616:	6823      	ldr	r3, [r4, #0]
 8005618:	6829      	ldr	r1, [r5, #0]
 800561a:	061f      	lsls	r7, r3, #24
 800561c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005620:	d402      	bmi.n	8005628 <_printf_i+0x18c>
 8005622:	065f      	lsls	r7, r3, #25
 8005624:	bf48      	it	mi
 8005626:	b2b6      	uxthmi	r6, r6
 8005628:	07df      	lsls	r7, r3, #31
 800562a:	bf48      	it	mi
 800562c:	f043 0320 	orrmi.w	r3, r3, #32
 8005630:	6029      	str	r1, [r5, #0]
 8005632:	bf48      	it	mi
 8005634:	6023      	strmi	r3, [r4, #0]
 8005636:	b91e      	cbnz	r6, 8005640 <_printf_i+0x1a4>
 8005638:	6823      	ldr	r3, [r4, #0]
 800563a:	f023 0320 	bic.w	r3, r3, #32
 800563e:	6023      	str	r3, [r4, #0]
 8005640:	2310      	movs	r3, #16
 8005642:	e7a7      	b.n	8005594 <_printf_i+0xf8>
 8005644:	4824      	ldr	r0, [pc, #144]	; (80056d8 <_printf_i+0x23c>)
 8005646:	e7e4      	b.n	8005612 <_printf_i+0x176>
 8005648:	4615      	mov	r5, r2
 800564a:	e7bd      	b.n	80055c8 <_printf_i+0x12c>
 800564c:	682b      	ldr	r3, [r5, #0]
 800564e:	6826      	ldr	r6, [r4, #0]
 8005650:	6961      	ldr	r1, [r4, #20]
 8005652:	1d18      	adds	r0, r3, #4
 8005654:	6028      	str	r0, [r5, #0]
 8005656:	0635      	lsls	r5, r6, #24
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	d501      	bpl.n	8005660 <_printf_i+0x1c4>
 800565c:	6019      	str	r1, [r3, #0]
 800565e:	e002      	b.n	8005666 <_printf_i+0x1ca>
 8005660:	0670      	lsls	r0, r6, #25
 8005662:	d5fb      	bpl.n	800565c <_printf_i+0x1c0>
 8005664:	8019      	strh	r1, [r3, #0]
 8005666:	2300      	movs	r3, #0
 8005668:	6123      	str	r3, [r4, #16]
 800566a:	4615      	mov	r5, r2
 800566c:	e7bc      	b.n	80055e8 <_printf_i+0x14c>
 800566e:	682b      	ldr	r3, [r5, #0]
 8005670:	1d1a      	adds	r2, r3, #4
 8005672:	602a      	str	r2, [r5, #0]
 8005674:	681d      	ldr	r5, [r3, #0]
 8005676:	6862      	ldr	r2, [r4, #4]
 8005678:	2100      	movs	r1, #0
 800567a:	4628      	mov	r0, r5
 800567c:	f7fa fdb0 	bl	80001e0 <memchr>
 8005680:	b108      	cbz	r0, 8005686 <_printf_i+0x1ea>
 8005682:	1b40      	subs	r0, r0, r5
 8005684:	6060      	str	r0, [r4, #4]
 8005686:	6863      	ldr	r3, [r4, #4]
 8005688:	6123      	str	r3, [r4, #16]
 800568a:	2300      	movs	r3, #0
 800568c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005690:	e7aa      	b.n	80055e8 <_printf_i+0x14c>
 8005692:	6923      	ldr	r3, [r4, #16]
 8005694:	462a      	mov	r2, r5
 8005696:	4649      	mov	r1, r9
 8005698:	4640      	mov	r0, r8
 800569a:	47d0      	blx	sl
 800569c:	3001      	adds	r0, #1
 800569e:	d0ad      	beq.n	80055fc <_printf_i+0x160>
 80056a0:	6823      	ldr	r3, [r4, #0]
 80056a2:	079b      	lsls	r3, r3, #30
 80056a4:	d413      	bmi.n	80056ce <_printf_i+0x232>
 80056a6:	68e0      	ldr	r0, [r4, #12]
 80056a8:	9b03      	ldr	r3, [sp, #12]
 80056aa:	4298      	cmp	r0, r3
 80056ac:	bfb8      	it	lt
 80056ae:	4618      	movlt	r0, r3
 80056b0:	e7a6      	b.n	8005600 <_printf_i+0x164>
 80056b2:	2301      	movs	r3, #1
 80056b4:	4632      	mov	r2, r6
 80056b6:	4649      	mov	r1, r9
 80056b8:	4640      	mov	r0, r8
 80056ba:	47d0      	blx	sl
 80056bc:	3001      	adds	r0, #1
 80056be:	d09d      	beq.n	80055fc <_printf_i+0x160>
 80056c0:	3501      	adds	r5, #1
 80056c2:	68e3      	ldr	r3, [r4, #12]
 80056c4:	9903      	ldr	r1, [sp, #12]
 80056c6:	1a5b      	subs	r3, r3, r1
 80056c8:	42ab      	cmp	r3, r5
 80056ca:	dcf2      	bgt.n	80056b2 <_printf_i+0x216>
 80056cc:	e7eb      	b.n	80056a6 <_printf_i+0x20a>
 80056ce:	2500      	movs	r5, #0
 80056d0:	f104 0619 	add.w	r6, r4, #25
 80056d4:	e7f5      	b.n	80056c2 <_printf_i+0x226>
 80056d6:	bf00      	nop
 80056d8:	08021f40 	.word	0x08021f40
 80056dc:	08021f51 	.word	0x08021f51

080056e0 <__swbuf_r>:
 80056e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056e2:	460e      	mov	r6, r1
 80056e4:	4614      	mov	r4, r2
 80056e6:	4605      	mov	r5, r0
 80056e8:	b118      	cbz	r0, 80056f2 <__swbuf_r+0x12>
 80056ea:	6a03      	ldr	r3, [r0, #32]
 80056ec:	b90b      	cbnz	r3, 80056f2 <__swbuf_r+0x12>
 80056ee:	f7ff fa2d 	bl	8004b4c <__sinit>
 80056f2:	69a3      	ldr	r3, [r4, #24]
 80056f4:	60a3      	str	r3, [r4, #8]
 80056f6:	89a3      	ldrh	r3, [r4, #12]
 80056f8:	071a      	lsls	r2, r3, #28
 80056fa:	d525      	bpl.n	8005748 <__swbuf_r+0x68>
 80056fc:	6923      	ldr	r3, [r4, #16]
 80056fe:	b31b      	cbz	r3, 8005748 <__swbuf_r+0x68>
 8005700:	6823      	ldr	r3, [r4, #0]
 8005702:	6922      	ldr	r2, [r4, #16]
 8005704:	1a98      	subs	r0, r3, r2
 8005706:	6963      	ldr	r3, [r4, #20]
 8005708:	b2f6      	uxtb	r6, r6
 800570a:	4283      	cmp	r3, r0
 800570c:	4637      	mov	r7, r6
 800570e:	dc04      	bgt.n	800571a <__swbuf_r+0x3a>
 8005710:	4621      	mov	r1, r4
 8005712:	4628      	mov	r0, r5
 8005714:	f7ff fcc0 	bl	8005098 <_fflush_r>
 8005718:	b9e0      	cbnz	r0, 8005754 <__swbuf_r+0x74>
 800571a:	68a3      	ldr	r3, [r4, #8]
 800571c:	3b01      	subs	r3, #1
 800571e:	60a3      	str	r3, [r4, #8]
 8005720:	6823      	ldr	r3, [r4, #0]
 8005722:	1c5a      	adds	r2, r3, #1
 8005724:	6022      	str	r2, [r4, #0]
 8005726:	701e      	strb	r6, [r3, #0]
 8005728:	6962      	ldr	r2, [r4, #20]
 800572a:	1c43      	adds	r3, r0, #1
 800572c:	429a      	cmp	r2, r3
 800572e:	d004      	beq.n	800573a <__swbuf_r+0x5a>
 8005730:	89a3      	ldrh	r3, [r4, #12]
 8005732:	07db      	lsls	r3, r3, #31
 8005734:	d506      	bpl.n	8005744 <__swbuf_r+0x64>
 8005736:	2e0a      	cmp	r6, #10
 8005738:	d104      	bne.n	8005744 <__swbuf_r+0x64>
 800573a:	4621      	mov	r1, r4
 800573c:	4628      	mov	r0, r5
 800573e:	f7ff fcab 	bl	8005098 <_fflush_r>
 8005742:	b938      	cbnz	r0, 8005754 <__swbuf_r+0x74>
 8005744:	4638      	mov	r0, r7
 8005746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005748:	4621      	mov	r1, r4
 800574a:	4628      	mov	r0, r5
 800574c:	f000 f806 	bl	800575c <__swsetup_r>
 8005750:	2800      	cmp	r0, #0
 8005752:	d0d5      	beq.n	8005700 <__swbuf_r+0x20>
 8005754:	f04f 37ff 	mov.w	r7, #4294967295
 8005758:	e7f4      	b.n	8005744 <__swbuf_r+0x64>
	...

0800575c <__swsetup_r>:
 800575c:	b538      	push	{r3, r4, r5, lr}
 800575e:	4b2a      	ldr	r3, [pc, #168]	; (8005808 <__swsetup_r+0xac>)
 8005760:	4605      	mov	r5, r0
 8005762:	6818      	ldr	r0, [r3, #0]
 8005764:	460c      	mov	r4, r1
 8005766:	b118      	cbz	r0, 8005770 <__swsetup_r+0x14>
 8005768:	6a03      	ldr	r3, [r0, #32]
 800576a:	b90b      	cbnz	r3, 8005770 <__swsetup_r+0x14>
 800576c:	f7ff f9ee 	bl	8004b4c <__sinit>
 8005770:	89a3      	ldrh	r3, [r4, #12]
 8005772:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005776:	0718      	lsls	r0, r3, #28
 8005778:	d422      	bmi.n	80057c0 <__swsetup_r+0x64>
 800577a:	06d9      	lsls	r1, r3, #27
 800577c:	d407      	bmi.n	800578e <__swsetup_r+0x32>
 800577e:	2309      	movs	r3, #9
 8005780:	602b      	str	r3, [r5, #0]
 8005782:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005786:	81a3      	strh	r3, [r4, #12]
 8005788:	f04f 30ff 	mov.w	r0, #4294967295
 800578c:	e034      	b.n	80057f8 <__swsetup_r+0x9c>
 800578e:	0758      	lsls	r0, r3, #29
 8005790:	d512      	bpl.n	80057b8 <__swsetup_r+0x5c>
 8005792:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005794:	b141      	cbz	r1, 80057a8 <__swsetup_r+0x4c>
 8005796:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800579a:	4299      	cmp	r1, r3
 800579c:	d002      	beq.n	80057a4 <__swsetup_r+0x48>
 800579e:	4628      	mov	r0, r5
 80057a0:	f7ff faf4 	bl	8004d8c <_free_r>
 80057a4:	2300      	movs	r3, #0
 80057a6:	6363      	str	r3, [r4, #52]	; 0x34
 80057a8:	89a3      	ldrh	r3, [r4, #12]
 80057aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80057ae:	81a3      	strh	r3, [r4, #12]
 80057b0:	2300      	movs	r3, #0
 80057b2:	6063      	str	r3, [r4, #4]
 80057b4:	6923      	ldr	r3, [r4, #16]
 80057b6:	6023      	str	r3, [r4, #0]
 80057b8:	89a3      	ldrh	r3, [r4, #12]
 80057ba:	f043 0308 	orr.w	r3, r3, #8
 80057be:	81a3      	strh	r3, [r4, #12]
 80057c0:	6923      	ldr	r3, [r4, #16]
 80057c2:	b94b      	cbnz	r3, 80057d8 <__swsetup_r+0x7c>
 80057c4:	89a3      	ldrh	r3, [r4, #12]
 80057c6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80057ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057ce:	d003      	beq.n	80057d8 <__swsetup_r+0x7c>
 80057d0:	4621      	mov	r1, r4
 80057d2:	4628      	mov	r0, r5
 80057d4:	f000 f884 	bl	80058e0 <__smakebuf_r>
 80057d8:	89a0      	ldrh	r0, [r4, #12]
 80057da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057de:	f010 0301 	ands.w	r3, r0, #1
 80057e2:	d00a      	beq.n	80057fa <__swsetup_r+0x9e>
 80057e4:	2300      	movs	r3, #0
 80057e6:	60a3      	str	r3, [r4, #8]
 80057e8:	6963      	ldr	r3, [r4, #20]
 80057ea:	425b      	negs	r3, r3
 80057ec:	61a3      	str	r3, [r4, #24]
 80057ee:	6923      	ldr	r3, [r4, #16]
 80057f0:	b943      	cbnz	r3, 8005804 <__swsetup_r+0xa8>
 80057f2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80057f6:	d1c4      	bne.n	8005782 <__swsetup_r+0x26>
 80057f8:	bd38      	pop	{r3, r4, r5, pc}
 80057fa:	0781      	lsls	r1, r0, #30
 80057fc:	bf58      	it	pl
 80057fe:	6963      	ldrpl	r3, [r4, #20]
 8005800:	60a3      	str	r3, [r4, #8]
 8005802:	e7f4      	b.n	80057ee <__swsetup_r+0x92>
 8005804:	2000      	movs	r0, #0
 8005806:	e7f7      	b.n	80057f8 <__swsetup_r+0x9c>
 8005808:	20000064 	.word	0x20000064

0800580c <_raise_r>:
 800580c:	291f      	cmp	r1, #31
 800580e:	b538      	push	{r3, r4, r5, lr}
 8005810:	4604      	mov	r4, r0
 8005812:	460d      	mov	r5, r1
 8005814:	d904      	bls.n	8005820 <_raise_r+0x14>
 8005816:	2316      	movs	r3, #22
 8005818:	6003      	str	r3, [r0, #0]
 800581a:	f04f 30ff 	mov.w	r0, #4294967295
 800581e:	bd38      	pop	{r3, r4, r5, pc}
 8005820:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005822:	b112      	cbz	r2, 800582a <_raise_r+0x1e>
 8005824:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005828:	b94b      	cbnz	r3, 800583e <_raise_r+0x32>
 800582a:	4620      	mov	r0, r4
 800582c:	f000 f830 	bl	8005890 <_getpid_r>
 8005830:	462a      	mov	r2, r5
 8005832:	4601      	mov	r1, r0
 8005834:	4620      	mov	r0, r4
 8005836:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800583a:	f000 b817 	b.w	800586c <_kill_r>
 800583e:	2b01      	cmp	r3, #1
 8005840:	d00a      	beq.n	8005858 <_raise_r+0x4c>
 8005842:	1c59      	adds	r1, r3, #1
 8005844:	d103      	bne.n	800584e <_raise_r+0x42>
 8005846:	2316      	movs	r3, #22
 8005848:	6003      	str	r3, [r0, #0]
 800584a:	2001      	movs	r0, #1
 800584c:	e7e7      	b.n	800581e <_raise_r+0x12>
 800584e:	2400      	movs	r4, #0
 8005850:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005854:	4628      	mov	r0, r5
 8005856:	4798      	blx	r3
 8005858:	2000      	movs	r0, #0
 800585a:	e7e0      	b.n	800581e <_raise_r+0x12>

0800585c <raise>:
 800585c:	4b02      	ldr	r3, [pc, #8]	; (8005868 <raise+0xc>)
 800585e:	4601      	mov	r1, r0
 8005860:	6818      	ldr	r0, [r3, #0]
 8005862:	f7ff bfd3 	b.w	800580c <_raise_r>
 8005866:	bf00      	nop
 8005868:	20000064 	.word	0x20000064

0800586c <_kill_r>:
 800586c:	b538      	push	{r3, r4, r5, lr}
 800586e:	4d07      	ldr	r5, [pc, #28]	; (800588c <_kill_r+0x20>)
 8005870:	2300      	movs	r3, #0
 8005872:	4604      	mov	r4, r0
 8005874:	4608      	mov	r0, r1
 8005876:	4611      	mov	r1, r2
 8005878:	602b      	str	r3, [r5, #0]
 800587a:	f7fd feff 	bl	800367c <_kill>
 800587e:	1c43      	adds	r3, r0, #1
 8005880:	d102      	bne.n	8005888 <_kill_r+0x1c>
 8005882:	682b      	ldr	r3, [r5, #0]
 8005884:	b103      	cbz	r3, 8005888 <_kill_r+0x1c>
 8005886:	6023      	str	r3, [r4, #0]
 8005888:	bd38      	pop	{r3, r4, r5, pc}
 800588a:	bf00      	nop
 800588c:	2000021c 	.word	0x2000021c

08005890 <_getpid_r>:
 8005890:	f7fd beec 	b.w	800366c <_getpid>

08005894 <__swhatbuf_r>:
 8005894:	b570      	push	{r4, r5, r6, lr}
 8005896:	460c      	mov	r4, r1
 8005898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800589c:	2900      	cmp	r1, #0
 800589e:	b096      	sub	sp, #88	; 0x58
 80058a0:	4615      	mov	r5, r2
 80058a2:	461e      	mov	r6, r3
 80058a4:	da0d      	bge.n	80058c2 <__swhatbuf_r+0x2e>
 80058a6:	89a3      	ldrh	r3, [r4, #12]
 80058a8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80058ac:	f04f 0100 	mov.w	r1, #0
 80058b0:	bf0c      	ite	eq
 80058b2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80058b6:	2340      	movne	r3, #64	; 0x40
 80058b8:	2000      	movs	r0, #0
 80058ba:	6031      	str	r1, [r6, #0]
 80058bc:	602b      	str	r3, [r5, #0]
 80058be:	b016      	add	sp, #88	; 0x58
 80058c0:	bd70      	pop	{r4, r5, r6, pc}
 80058c2:	466a      	mov	r2, sp
 80058c4:	f000 f848 	bl	8005958 <_fstat_r>
 80058c8:	2800      	cmp	r0, #0
 80058ca:	dbec      	blt.n	80058a6 <__swhatbuf_r+0x12>
 80058cc:	9901      	ldr	r1, [sp, #4]
 80058ce:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80058d2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80058d6:	4259      	negs	r1, r3
 80058d8:	4159      	adcs	r1, r3
 80058da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058de:	e7eb      	b.n	80058b8 <__swhatbuf_r+0x24>

080058e0 <__smakebuf_r>:
 80058e0:	898b      	ldrh	r3, [r1, #12]
 80058e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80058e4:	079d      	lsls	r5, r3, #30
 80058e6:	4606      	mov	r6, r0
 80058e8:	460c      	mov	r4, r1
 80058ea:	d507      	bpl.n	80058fc <__smakebuf_r+0x1c>
 80058ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80058f0:	6023      	str	r3, [r4, #0]
 80058f2:	6123      	str	r3, [r4, #16]
 80058f4:	2301      	movs	r3, #1
 80058f6:	6163      	str	r3, [r4, #20]
 80058f8:	b002      	add	sp, #8
 80058fa:	bd70      	pop	{r4, r5, r6, pc}
 80058fc:	ab01      	add	r3, sp, #4
 80058fe:	466a      	mov	r2, sp
 8005900:	f7ff ffc8 	bl	8005894 <__swhatbuf_r>
 8005904:	9900      	ldr	r1, [sp, #0]
 8005906:	4605      	mov	r5, r0
 8005908:	4630      	mov	r0, r6
 800590a:	f7ff fab3 	bl	8004e74 <_malloc_r>
 800590e:	b948      	cbnz	r0, 8005924 <__smakebuf_r+0x44>
 8005910:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005914:	059a      	lsls	r2, r3, #22
 8005916:	d4ef      	bmi.n	80058f8 <__smakebuf_r+0x18>
 8005918:	f023 0303 	bic.w	r3, r3, #3
 800591c:	f043 0302 	orr.w	r3, r3, #2
 8005920:	81a3      	strh	r3, [r4, #12]
 8005922:	e7e3      	b.n	80058ec <__smakebuf_r+0xc>
 8005924:	89a3      	ldrh	r3, [r4, #12]
 8005926:	6020      	str	r0, [r4, #0]
 8005928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800592c:	81a3      	strh	r3, [r4, #12]
 800592e:	9b00      	ldr	r3, [sp, #0]
 8005930:	6163      	str	r3, [r4, #20]
 8005932:	9b01      	ldr	r3, [sp, #4]
 8005934:	6120      	str	r0, [r4, #16]
 8005936:	b15b      	cbz	r3, 8005950 <__smakebuf_r+0x70>
 8005938:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800593c:	4630      	mov	r0, r6
 800593e:	f000 f81d 	bl	800597c <_isatty_r>
 8005942:	b128      	cbz	r0, 8005950 <__smakebuf_r+0x70>
 8005944:	89a3      	ldrh	r3, [r4, #12]
 8005946:	f023 0303 	bic.w	r3, r3, #3
 800594a:	f043 0301 	orr.w	r3, r3, #1
 800594e:	81a3      	strh	r3, [r4, #12]
 8005950:	89a3      	ldrh	r3, [r4, #12]
 8005952:	431d      	orrs	r5, r3
 8005954:	81a5      	strh	r5, [r4, #12]
 8005956:	e7cf      	b.n	80058f8 <__smakebuf_r+0x18>

08005958 <_fstat_r>:
 8005958:	b538      	push	{r3, r4, r5, lr}
 800595a:	4d07      	ldr	r5, [pc, #28]	; (8005978 <_fstat_r+0x20>)
 800595c:	2300      	movs	r3, #0
 800595e:	4604      	mov	r4, r0
 8005960:	4608      	mov	r0, r1
 8005962:	4611      	mov	r1, r2
 8005964:	602b      	str	r3, [r5, #0]
 8005966:	f7fd fee8 	bl	800373a <_fstat>
 800596a:	1c43      	adds	r3, r0, #1
 800596c:	d102      	bne.n	8005974 <_fstat_r+0x1c>
 800596e:	682b      	ldr	r3, [r5, #0]
 8005970:	b103      	cbz	r3, 8005974 <_fstat_r+0x1c>
 8005972:	6023      	str	r3, [r4, #0]
 8005974:	bd38      	pop	{r3, r4, r5, pc}
 8005976:	bf00      	nop
 8005978:	2000021c 	.word	0x2000021c

0800597c <_isatty_r>:
 800597c:	b538      	push	{r3, r4, r5, lr}
 800597e:	4d06      	ldr	r5, [pc, #24]	; (8005998 <_isatty_r+0x1c>)
 8005980:	2300      	movs	r3, #0
 8005982:	4604      	mov	r4, r0
 8005984:	4608      	mov	r0, r1
 8005986:	602b      	str	r3, [r5, #0]
 8005988:	f7fd fee7 	bl	800375a <_isatty>
 800598c:	1c43      	adds	r3, r0, #1
 800598e:	d102      	bne.n	8005996 <_isatty_r+0x1a>
 8005990:	682b      	ldr	r3, [r5, #0]
 8005992:	b103      	cbz	r3, 8005996 <_isatty_r+0x1a>
 8005994:	6023      	str	r3, [r4, #0]
 8005996:	bd38      	pop	{r3, r4, r5, pc}
 8005998:	2000021c 	.word	0x2000021c
 800599c:	00000000 	.word	0x00000000

080059a0 <cos>:
 80059a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80059a2:	ec53 2b10 	vmov	r2, r3, d0
 80059a6:	4826      	ldr	r0, [pc, #152]	; (8005a40 <cos+0xa0>)
 80059a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80059ac:	4281      	cmp	r1, r0
 80059ae:	dc06      	bgt.n	80059be <cos+0x1e>
 80059b0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8005a38 <cos+0x98>
 80059b4:	b005      	add	sp, #20
 80059b6:	f85d eb04 	ldr.w	lr, [sp], #4
 80059ba:	f000 b8d1 	b.w	8005b60 <__kernel_cos>
 80059be:	4821      	ldr	r0, [pc, #132]	; (8005a44 <cos+0xa4>)
 80059c0:	4281      	cmp	r1, r0
 80059c2:	dd09      	ble.n	80059d8 <cos+0x38>
 80059c4:	ee10 0a10 	vmov	r0, s0
 80059c8:	4619      	mov	r1, r3
 80059ca:	f7fa fc5d 	bl	8000288 <__aeabi_dsub>
 80059ce:	ec41 0b10 	vmov	d0, r0, r1
 80059d2:	b005      	add	sp, #20
 80059d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80059d8:	4668      	mov	r0, sp
 80059da:	f000 fc55 	bl	8006288 <__ieee754_rem_pio2>
 80059de:	f000 0003 	and.w	r0, r0, #3
 80059e2:	2801      	cmp	r0, #1
 80059e4:	d00b      	beq.n	80059fe <cos+0x5e>
 80059e6:	2802      	cmp	r0, #2
 80059e8:	d016      	beq.n	8005a18 <cos+0x78>
 80059ea:	b9e0      	cbnz	r0, 8005a26 <cos+0x86>
 80059ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80059f0:	ed9d 0b00 	vldr	d0, [sp]
 80059f4:	f000 f8b4 	bl	8005b60 <__kernel_cos>
 80059f8:	ec51 0b10 	vmov	r0, r1, d0
 80059fc:	e7e7      	b.n	80059ce <cos+0x2e>
 80059fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005a02:	ed9d 0b00 	vldr	d0, [sp]
 8005a06:	f000 f973 	bl	8005cf0 <__kernel_sin>
 8005a0a:	ec53 2b10 	vmov	r2, r3, d0
 8005a0e:	ee10 0a10 	vmov	r0, s0
 8005a12:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005a16:	e7da      	b.n	80059ce <cos+0x2e>
 8005a18:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005a1c:	ed9d 0b00 	vldr	d0, [sp]
 8005a20:	f000 f89e 	bl	8005b60 <__kernel_cos>
 8005a24:	e7f1      	b.n	8005a0a <cos+0x6a>
 8005a26:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005a2a:	ed9d 0b00 	vldr	d0, [sp]
 8005a2e:	2001      	movs	r0, #1
 8005a30:	f000 f95e 	bl	8005cf0 <__kernel_sin>
 8005a34:	e7e0      	b.n	80059f8 <cos+0x58>
 8005a36:	bf00      	nop
	...
 8005a40:	3fe921fb 	.word	0x3fe921fb
 8005a44:	7fefffff 	.word	0x7fefffff

08005a48 <sin>:
 8005a48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005a4a:	ec53 2b10 	vmov	r2, r3, d0
 8005a4e:	4828      	ldr	r0, [pc, #160]	; (8005af0 <sin+0xa8>)
 8005a50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005a54:	4281      	cmp	r1, r0
 8005a56:	dc07      	bgt.n	8005a68 <sin+0x20>
 8005a58:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8005ae8 <sin+0xa0>
 8005a5c:	2000      	movs	r0, #0
 8005a5e:	b005      	add	sp, #20
 8005a60:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a64:	f000 b944 	b.w	8005cf0 <__kernel_sin>
 8005a68:	4822      	ldr	r0, [pc, #136]	; (8005af4 <sin+0xac>)
 8005a6a:	4281      	cmp	r1, r0
 8005a6c:	dd09      	ble.n	8005a82 <sin+0x3a>
 8005a6e:	ee10 0a10 	vmov	r0, s0
 8005a72:	4619      	mov	r1, r3
 8005a74:	f7fa fc08 	bl	8000288 <__aeabi_dsub>
 8005a78:	ec41 0b10 	vmov	d0, r0, r1
 8005a7c:	b005      	add	sp, #20
 8005a7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005a82:	4668      	mov	r0, sp
 8005a84:	f000 fc00 	bl	8006288 <__ieee754_rem_pio2>
 8005a88:	f000 0003 	and.w	r0, r0, #3
 8005a8c:	2801      	cmp	r0, #1
 8005a8e:	d00c      	beq.n	8005aaa <sin+0x62>
 8005a90:	2802      	cmp	r0, #2
 8005a92:	d011      	beq.n	8005ab8 <sin+0x70>
 8005a94:	b9f0      	cbnz	r0, 8005ad4 <sin+0x8c>
 8005a96:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005a9a:	ed9d 0b00 	vldr	d0, [sp]
 8005a9e:	2001      	movs	r0, #1
 8005aa0:	f000 f926 	bl	8005cf0 <__kernel_sin>
 8005aa4:	ec51 0b10 	vmov	r0, r1, d0
 8005aa8:	e7e6      	b.n	8005a78 <sin+0x30>
 8005aaa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005aae:	ed9d 0b00 	vldr	d0, [sp]
 8005ab2:	f000 f855 	bl	8005b60 <__kernel_cos>
 8005ab6:	e7f5      	b.n	8005aa4 <sin+0x5c>
 8005ab8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005abc:	ed9d 0b00 	vldr	d0, [sp]
 8005ac0:	2001      	movs	r0, #1
 8005ac2:	f000 f915 	bl	8005cf0 <__kernel_sin>
 8005ac6:	ec53 2b10 	vmov	r2, r3, d0
 8005aca:	ee10 0a10 	vmov	r0, s0
 8005ace:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005ad2:	e7d1      	b.n	8005a78 <sin+0x30>
 8005ad4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005ad8:	ed9d 0b00 	vldr	d0, [sp]
 8005adc:	f000 f840 	bl	8005b60 <__kernel_cos>
 8005ae0:	e7f1      	b.n	8005ac6 <sin+0x7e>
 8005ae2:	bf00      	nop
 8005ae4:	f3af 8000 	nop.w
	...
 8005af0:	3fe921fb 	.word	0x3fe921fb
 8005af4:	7fefffff 	.word	0x7fefffff

08005af8 <tan>:
 8005af8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005afa:	ec53 2b10 	vmov	r2, r3, d0
 8005afe:	4816      	ldr	r0, [pc, #88]	; (8005b58 <tan+0x60>)
 8005b00:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005b04:	4281      	cmp	r1, r0
 8005b06:	dc07      	bgt.n	8005b18 <tan+0x20>
 8005b08:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8005b50 <tan+0x58>
 8005b0c:	2001      	movs	r0, #1
 8005b0e:	b005      	add	sp, #20
 8005b10:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b14:	f000 b9ac 	b.w	8005e70 <__kernel_tan>
 8005b18:	4810      	ldr	r0, [pc, #64]	; (8005b5c <tan+0x64>)
 8005b1a:	4281      	cmp	r1, r0
 8005b1c:	dd09      	ble.n	8005b32 <tan+0x3a>
 8005b1e:	ee10 0a10 	vmov	r0, s0
 8005b22:	4619      	mov	r1, r3
 8005b24:	f7fa fbb0 	bl	8000288 <__aeabi_dsub>
 8005b28:	ec41 0b10 	vmov	d0, r0, r1
 8005b2c:	b005      	add	sp, #20
 8005b2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005b32:	4668      	mov	r0, sp
 8005b34:	f000 fba8 	bl	8006288 <__ieee754_rem_pio2>
 8005b38:	0040      	lsls	r0, r0, #1
 8005b3a:	f000 0002 	and.w	r0, r0, #2
 8005b3e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005b42:	ed9d 0b00 	vldr	d0, [sp]
 8005b46:	f1c0 0001 	rsb	r0, r0, #1
 8005b4a:	f000 f991 	bl	8005e70 <__kernel_tan>
 8005b4e:	e7ed      	b.n	8005b2c <tan+0x34>
	...
 8005b58:	3fe921fb 	.word	0x3fe921fb
 8005b5c:	7fefffff 	.word	0x7fefffff

08005b60 <__kernel_cos>:
 8005b60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b64:	ec57 6b10 	vmov	r6, r7, d0
 8005b68:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005b6c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8005b70:	ed8d 1b00 	vstr	d1, [sp]
 8005b74:	da07      	bge.n	8005b86 <__kernel_cos+0x26>
 8005b76:	ee10 0a10 	vmov	r0, s0
 8005b7a:	4639      	mov	r1, r7
 8005b7c:	f7fa ffd6 	bl	8000b2c <__aeabi_d2iz>
 8005b80:	2800      	cmp	r0, #0
 8005b82:	f000 8088 	beq.w	8005c96 <__kernel_cos+0x136>
 8005b86:	4632      	mov	r2, r6
 8005b88:	463b      	mov	r3, r7
 8005b8a:	4630      	mov	r0, r6
 8005b8c:	4639      	mov	r1, r7
 8005b8e:	f7fa fd33 	bl	80005f8 <__aeabi_dmul>
 8005b92:	4b51      	ldr	r3, [pc, #324]	; (8005cd8 <__kernel_cos+0x178>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	4604      	mov	r4, r0
 8005b98:	460d      	mov	r5, r1
 8005b9a:	f7fa fd2d 	bl	80005f8 <__aeabi_dmul>
 8005b9e:	a340      	add	r3, pc, #256	; (adr r3, 8005ca0 <__kernel_cos+0x140>)
 8005ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba4:	4682      	mov	sl, r0
 8005ba6:	468b      	mov	fp, r1
 8005ba8:	4620      	mov	r0, r4
 8005baa:	4629      	mov	r1, r5
 8005bac:	f7fa fd24 	bl	80005f8 <__aeabi_dmul>
 8005bb0:	a33d      	add	r3, pc, #244	; (adr r3, 8005ca8 <__kernel_cos+0x148>)
 8005bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb6:	f7fa fb69 	bl	800028c <__adddf3>
 8005bba:	4622      	mov	r2, r4
 8005bbc:	462b      	mov	r3, r5
 8005bbe:	f7fa fd1b 	bl	80005f8 <__aeabi_dmul>
 8005bc2:	a33b      	add	r3, pc, #236	; (adr r3, 8005cb0 <__kernel_cos+0x150>)
 8005bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc8:	f7fa fb5e 	bl	8000288 <__aeabi_dsub>
 8005bcc:	4622      	mov	r2, r4
 8005bce:	462b      	mov	r3, r5
 8005bd0:	f7fa fd12 	bl	80005f8 <__aeabi_dmul>
 8005bd4:	a338      	add	r3, pc, #224	; (adr r3, 8005cb8 <__kernel_cos+0x158>)
 8005bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bda:	f7fa fb57 	bl	800028c <__adddf3>
 8005bde:	4622      	mov	r2, r4
 8005be0:	462b      	mov	r3, r5
 8005be2:	f7fa fd09 	bl	80005f8 <__aeabi_dmul>
 8005be6:	a336      	add	r3, pc, #216	; (adr r3, 8005cc0 <__kernel_cos+0x160>)
 8005be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bec:	f7fa fb4c 	bl	8000288 <__aeabi_dsub>
 8005bf0:	4622      	mov	r2, r4
 8005bf2:	462b      	mov	r3, r5
 8005bf4:	f7fa fd00 	bl	80005f8 <__aeabi_dmul>
 8005bf8:	a333      	add	r3, pc, #204	; (adr r3, 8005cc8 <__kernel_cos+0x168>)
 8005bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfe:	f7fa fb45 	bl	800028c <__adddf3>
 8005c02:	4622      	mov	r2, r4
 8005c04:	462b      	mov	r3, r5
 8005c06:	f7fa fcf7 	bl	80005f8 <__aeabi_dmul>
 8005c0a:	4622      	mov	r2, r4
 8005c0c:	462b      	mov	r3, r5
 8005c0e:	f7fa fcf3 	bl	80005f8 <__aeabi_dmul>
 8005c12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c16:	4604      	mov	r4, r0
 8005c18:	460d      	mov	r5, r1
 8005c1a:	4630      	mov	r0, r6
 8005c1c:	4639      	mov	r1, r7
 8005c1e:	f7fa fceb 	bl	80005f8 <__aeabi_dmul>
 8005c22:	460b      	mov	r3, r1
 8005c24:	4602      	mov	r2, r0
 8005c26:	4629      	mov	r1, r5
 8005c28:	4620      	mov	r0, r4
 8005c2a:	f7fa fb2d 	bl	8000288 <__aeabi_dsub>
 8005c2e:	4b2b      	ldr	r3, [pc, #172]	; (8005cdc <__kernel_cos+0x17c>)
 8005c30:	4598      	cmp	r8, r3
 8005c32:	4606      	mov	r6, r0
 8005c34:	460f      	mov	r7, r1
 8005c36:	dc10      	bgt.n	8005c5a <__kernel_cos+0xfa>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	4650      	mov	r0, sl
 8005c3e:	4659      	mov	r1, fp
 8005c40:	f7fa fb22 	bl	8000288 <__aeabi_dsub>
 8005c44:	460b      	mov	r3, r1
 8005c46:	4926      	ldr	r1, [pc, #152]	; (8005ce0 <__kernel_cos+0x180>)
 8005c48:	4602      	mov	r2, r0
 8005c4a:	2000      	movs	r0, #0
 8005c4c:	f7fa fb1c 	bl	8000288 <__aeabi_dsub>
 8005c50:	ec41 0b10 	vmov	d0, r0, r1
 8005c54:	b003      	add	sp, #12
 8005c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c5a:	4b22      	ldr	r3, [pc, #136]	; (8005ce4 <__kernel_cos+0x184>)
 8005c5c:	4920      	ldr	r1, [pc, #128]	; (8005ce0 <__kernel_cos+0x180>)
 8005c5e:	4598      	cmp	r8, r3
 8005c60:	bfcc      	ite	gt
 8005c62:	4d21      	ldrgt	r5, [pc, #132]	; (8005ce8 <__kernel_cos+0x188>)
 8005c64:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8005c68:	2400      	movs	r4, #0
 8005c6a:	4622      	mov	r2, r4
 8005c6c:	462b      	mov	r3, r5
 8005c6e:	2000      	movs	r0, #0
 8005c70:	f7fa fb0a 	bl	8000288 <__aeabi_dsub>
 8005c74:	4622      	mov	r2, r4
 8005c76:	4680      	mov	r8, r0
 8005c78:	4689      	mov	r9, r1
 8005c7a:	462b      	mov	r3, r5
 8005c7c:	4650      	mov	r0, sl
 8005c7e:	4659      	mov	r1, fp
 8005c80:	f7fa fb02 	bl	8000288 <__aeabi_dsub>
 8005c84:	4632      	mov	r2, r6
 8005c86:	463b      	mov	r3, r7
 8005c88:	f7fa fafe 	bl	8000288 <__aeabi_dsub>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4640      	mov	r0, r8
 8005c92:	4649      	mov	r1, r9
 8005c94:	e7da      	b.n	8005c4c <__kernel_cos+0xec>
 8005c96:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8005cd0 <__kernel_cos+0x170>
 8005c9a:	e7db      	b.n	8005c54 <__kernel_cos+0xf4>
 8005c9c:	f3af 8000 	nop.w
 8005ca0:	be8838d4 	.word	0xbe8838d4
 8005ca4:	bda8fae9 	.word	0xbda8fae9
 8005ca8:	bdb4b1c4 	.word	0xbdb4b1c4
 8005cac:	3e21ee9e 	.word	0x3e21ee9e
 8005cb0:	809c52ad 	.word	0x809c52ad
 8005cb4:	3e927e4f 	.word	0x3e927e4f
 8005cb8:	19cb1590 	.word	0x19cb1590
 8005cbc:	3efa01a0 	.word	0x3efa01a0
 8005cc0:	16c15177 	.word	0x16c15177
 8005cc4:	3f56c16c 	.word	0x3f56c16c
 8005cc8:	5555554c 	.word	0x5555554c
 8005ccc:	3fa55555 	.word	0x3fa55555
 8005cd0:	00000000 	.word	0x00000000
 8005cd4:	3ff00000 	.word	0x3ff00000
 8005cd8:	3fe00000 	.word	0x3fe00000
 8005cdc:	3fd33332 	.word	0x3fd33332
 8005ce0:	3ff00000 	.word	0x3ff00000
 8005ce4:	3fe90000 	.word	0x3fe90000
 8005ce8:	3fd20000 	.word	0x3fd20000
 8005cec:	00000000 	.word	0x00000000

08005cf0 <__kernel_sin>:
 8005cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf4:	ed2d 8b04 	vpush	{d8-d9}
 8005cf8:	eeb0 8a41 	vmov.f32	s16, s2
 8005cfc:	eef0 8a61 	vmov.f32	s17, s3
 8005d00:	ec55 4b10 	vmov	r4, r5, d0
 8005d04:	b083      	sub	sp, #12
 8005d06:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005d0a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005d0e:	9001      	str	r0, [sp, #4]
 8005d10:	da06      	bge.n	8005d20 <__kernel_sin+0x30>
 8005d12:	ee10 0a10 	vmov	r0, s0
 8005d16:	4629      	mov	r1, r5
 8005d18:	f7fa ff08 	bl	8000b2c <__aeabi_d2iz>
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	d051      	beq.n	8005dc4 <__kernel_sin+0xd4>
 8005d20:	4622      	mov	r2, r4
 8005d22:	462b      	mov	r3, r5
 8005d24:	4620      	mov	r0, r4
 8005d26:	4629      	mov	r1, r5
 8005d28:	f7fa fc66 	bl	80005f8 <__aeabi_dmul>
 8005d2c:	4682      	mov	sl, r0
 8005d2e:	468b      	mov	fp, r1
 8005d30:	4602      	mov	r2, r0
 8005d32:	460b      	mov	r3, r1
 8005d34:	4620      	mov	r0, r4
 8005d36:	4629      	mov	r1, r5
 8005d38:	f7fa fc5e 	bl	80005f8 <__aeabi_dmul>
 8005d3c:	a341      	add	r3, pc, #260	; (adr r3, 8005e44 <__kernel_sin+0x154>)
 8005d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d42:	4680      	mov	r8, r0
 8005d44:	4689      	mov	r9, r1
 8005d46:	4650      	mov	r0, sl
 8005d48:	4659      	mov	r1, fp
 8005d4a:	f7fa fc55 	bl	80005f8 <__aeabi_dmul>
 8005d4e:	a33f      	add	r3, pc, #252	; (adr r3, 8005e4c <__kernel_sin+0x15c>)
 8005d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d54:	f7fa fa98 	bl	8000288 <__aeabi_dsub>
 8005d58:	4652      	mov	r2, sl
 8005d5a:	465b      	mov	r3, fp
 8005d5c:	f7fa fc4c 	bl	80005f8 <__aeabi_dmul>
 8005d60:	a33c      	add	r3, pc, #240	; (adr r3, 8005e54 <__kernel_sin+0x164>)
 8005d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d66:	f7fa fa91 	bl	800028c <__adddf3>
 8005d6a:	4652      	mov	r2, sl
 8005d6c:	465b      	mov	r3, fp
 8005d6e:	f7fa fc43 	bl	80005f8 <__aeabi_dmul>
 8005d72:	a33a      	add	r3, pc, #232	; (adr r3, 8005e5c <__kernel_sin+0x16c>)
 8005d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d78:	f7fa fa86 	bl	8000288 <__aeabi_dsub>
 8005d7c:	4652      	mov	r2, sl
 8005d7e:	465b      	mov	r3, fp
 8005d80:	f7fa fc3a 	bl	80005f8 <__aeabi_dmul>
 8005d84:	a337      	add	r3, pc, #220	; (adr r3, 8005e64 <__kernel_sin+0x174>)
 8005d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8a:	f7fa fa7f 	bl	800028c <__adddf3>
 8005d8e:	9b01      	ldr	r3, [sp, #4]
 8005d90:	4606      	mov	r6, r0
 8005d92:	460f      	mov	r7, r1
 8005d94:	b9eb      	cbnz	r3, 8005dd2 <__kernel_sin+0xe2>
 8005d96:	4602      	mov	r2, r0
 8005d98:	460b      	mov	r3, r1
 8005d9a:	4650      	mov	r0, sl
 8005d9c:	4659      	mov	r1, fp
 8005d9e:	f7fa fc2b 	bl	80005f8 <__aeabi_dmul>
 8005da2:	a325      	add	r3, pc, #148	; (adr r3, 8005e38 <__kernel_sin+0x148>)
 8005da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da8:	f7fa fa6e 	bl	8000288 <__aeabi_dsub>
 8005dac:	4642      	mov	r2, r8
 8005dae:	464b      	mov	r3, r9
 8005db0:	f7fa fc22 	bl	80005f8 <__aeabi_dmul>
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	4620      	mov	r0, r4
 8005dba:	4629      	mov	r1, r5
 8005dbc:	f7fa fa66 	bl	800028c <__adddf3>
 8005dc0:	4604      	mov	r4, r0
 8005dc2:	460d      	mov	r5, r1
 8005dc4:	ec45 4b10 	vmov	d0, r4, r5
 8005dc8:	b003      	add	sp, #12
 8005dca:	ecbd 8b04 	vpop	{d8-d9}
 8005dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dd2:	4b1b      	ldr	r3, [pc, #108]	; (8005e40 <__kernel_sin+0x150>)
 8005dd4:	ec51 0b18 	vmov	r0, r1, d8
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f7fa fc0d 	bl	80005f8 <__aeabi_dmul>
 8005dde:	4632      	mov	r2, r6
 8005de0:	ec41 0b19 	vmov	d9, r0, r1
 8005de4:	463b      	mov	r3, r7
 8005de6:	4640      	mov	r0, r8
 8005de8:	4649      	mov	r1, r9
 8005dea:	f7fa fc05 	bl	80005f8 <__aeabi_dmul>
 8005dee:	4602      	mov	r2, r0
 8005df0:	460b      	mov	r3, r1
 8005df2:	ec51 0b19 	vmov	r0, r1, d9
 8005df6:	f7fa fa47 	bl	8000288 <__aeabi_dsub>
 8005dfa:	4652      	mov	r2, sl
 8005dfc:	465b      	mov	r3, fp
 8005dfe:	f7fa fbfb 	bl	80005f8 <__aeabi_dmul>
 8005e02:	ec53 2b18 	vmov	r2, r3, d8
 8005e06:	f7fa fa3f 	bl	8000288 <__aeabi_dsub>
 8005e0a:	a30b      	add	r3, pc, #44	; (adr r3, 8005e38 <__kernel_sin+0x148>)
 8005e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e10:	4606      	mov	r6, r0
 8005e12:	460f      	mov	r7, r1
 8005e14:	4640      	mov	r0, r8
 8005e16:	4649      	mov	r1, r9
 8005e18:	f7fa fbee 	bl	80005f8 <__aeabi_dmul>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	460b      	mov	r3, r1
 8005e20:	4630      	mov	r0, r6
 8005e22:	4639      	mov	r1, r7
 8005e24:	f7fa fa32 	bl	800028c <__adddf3>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	4629      	mov	r1, r5
 8005e30:	f7fa fa2a 	bl	8000288 <__aeabi_dsub>
 8005e34:	e7c4      	b.n	8005dc0 <__kernel_sin+0xd0>
 8005e36:	bf00      	nop
 8005e38:	55555549 	.word	0x55555549
 8005e3c:	3fc55555 	.word	0x3fc55555
 8005e40:	3fe00000 	.word	0x3fe00000
 8005e44:	5acfd57c 	.word	0x5acfd57c
 8005e48:	3de5d93a 	.word	0x3de5d93a
 8005e4c:	8a2b9ceb 	.word	0x8a2b9ceb
 8005e50:	3e5ae5e6 	.word	0x3e5ae5e6
 8005e54:	57b1fe7d 	.word	0x57b1fe7d
 8005e58:	3ec71de3 	.word	0x3ec71de3
 8005e5c:	19c161d5 	.word	0x19c161d5
 8005e60:	3f2a01a0 	.word	0x3f2a01a0
 8005e64:	1110f8a6 	.word	0x1110f8a6
 8005e68:	3f811111 	.word	0x3f811111
 8005e6c:	00000000 	.word	0x00000000

08005e70 <__kernel_tan>:
 8005e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e74:	ed2d 8b06 	vpush	{d8-d10}
 8005e78:	ec5b ab10 	vmov	sl, fp, d0
 8005e7c:	4be0      	ldr	r3, [pc, #896]	; (8006200 <__kernel_tan+0x390>)
 8005e7e:	b083      	sub	sp, #12
 8005e80:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8005e84:	429f      	cmp	r7, r3
 8005e86:	ec59 8b11 	vmov	r8, r9, d1
 8005e8a:	4606      	mov	r6, r0
 8005e8c:	f8cd b000 	str.w	fp, [sp]
 8005e90:	dc61      	bgt.n	8005f56 <__kernel_tan+0xe6>
 8005e92:	ee10 0a10 	vmov	r0, s0
 8005e96:	4659      	mov	r1, fp
 8005e98:	f7fa fe48 	bl	8000b2c <__aeabi_d2iz>
 8005e9c:	4605      	mov	r5, r0
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	f040 8083 	bne.w	8005faa <__kernel_tan+0x13a>
 8005ea4:	1c73      	adds	r3, r6, #1
 8005ea6:	4652      	mov	r2, sl
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	433b      	orrs	r3, r7
 8005eac:	d112      	bne.n	8005ed4 <__kernel_tan+0x64>
 8005eae:	ec4b ab10 	vmov	d0, sl, fp
 8005eb2:	f000 fbef 	bl	8006694 <fabs>
 8005eb6:	49d3      	ldr	r1, [pc, #844]	; (8006204 <__kernel_tan+0x394>)
 8005eb8:	ec53 2b10 	vmov	r2, r3, d0
 8005ebc:	2000      	movs	r0, #0
 8005ebe:	f7fa fcc5 	bl	800084c <__aeabi_ddiv>
 8005ec2:	4682      	mov	sl, r0
 8005ec4:	468b      	mov	fp, r1
 8005ec6:	ec4b ab10 	vmov	d0, sl, fp
 8005eca:	b003      	add	sp, #12
 8005ecc:	ecbd 8b06 	vpop	{d8-d10}
 8005ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ed4:	2e01      	cmp	r6, #1
 8005ed6:	d0f6      	beq.n	8005ec6 <__kernel_tan+0x56>
 8005ed8:	4642      	mov	r2, r8
 8005eda:	464b      	mov	r3, r9
 8005edc:	4650      	mov	r0, sl
 8005ede:	4659      	mov	r1, fp
 8005ee0:	f7fa f9d4 	bl	800028c <__adddf3>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	460f      	mov	r7, r1
 8005eea:	2000      	movs	r0, #0
 8005eec:	49c6      	ldr	r1, [pc, #792]	; (8006208 <__kernel_tan+0x398>)
 8005eee:	f7fa fcad 	bl	800084c <__aeabi_ddiv>
 8005ef2:	e9cd 0100 	strd	r0, r1, [sp]
 8005ef6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005efa:	462e      	mov	r6, r5
 8005efc:	4652      	mov	r2, sl
 8005efe:	462c      	mov	r4, r5
 8005f00:	4630      	mov	r0, r6
 8005f02:	461d      	mov	r5, r3
 8005f04:	4639      	mov	r1, r7
 8005f06:	465b      	mov	r3, fp
 8005f08:	f7fa f9be 	bl	8000288 <__aeabi_dsub>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	460b      	mov	r3, r1
 8005f10:	4640      	mov	r0, r8
 8005f12:	4649      	mov	r1, r9
 8005f14:	f7fa f9b8 	bl	8000288 <__aeabi_dsub>
 8005f18:	4632      	mov	r2, r6
 8005f1a:	462b      	mov	r3, r5
 8005f1c:	f7fa fb6c 	bl	80005f8 <__aeabi_dmul>
 8005f20:	4632      	mov	r2, r6
 8005f22:	4680      	mov	r8, r0
 8005f24:	4689      	mov	r9, r1
 8005f26:	462b      	mov	r3, r5
 8005f28:	4630      	mov	r0, r6
 8005f2a:	4639      	mov	r1, r7
 8005f2c:	f7fa fb64 	bl	80005f8 <__aeabi_dmul>
 8005f30:	4bb4      	ldr	r3, [pc, #720]	; (8006204 <__kernel_tan+0x394>)
 8005f32:	2200      	movs	r2, #0
 8005f34:	f7fa f9aa 	bl	800028c <__adddf3>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	4640      	mov	r0, r8
 8005f3e:	4649      	mov	r1, r9
 8005f40:	f7fa f9a4 	bl	800028c <__adddf3>
 8005f44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f48:	f7fa fb56 	bl	80005f8 <__aeabi_dmul>
 8005f4c:	4622      	mov	r2, r4
 8005f4e:	462b      	mov	r3, r5
 8005f50:	f7fa f99c 	bl	800028c <__adddf3>
 8005f54:	e7b5      	b.n	8005ec2 <__kernel_tan+0x52>
 8005f56:	4bad      	ldr	r3, [pc, #692]	; (800620c <__kernel_tan+0x39c>)
 8005f58:	429f      	cmp	r7, r3
 8005f5a:	dd26      	ble.n	8005faa <__kernel_tan+0x13a>
 8005f5c:	9b00      	ldr	r3, [sp, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	da09      	bge.n	8005f76 <__kernel_tan+0x106>
 8005f62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005f66:	469b      	mov	fp, r3
 8005f68:	ee10 aa10 	vmov	sl, s0
 8005f6c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005f70:	ee11 8a10 	vmov	r8, s2
 8005f74:	4699      	mov	r9, r3
 8005f76:	4652      	mov	r2, sl
 8005f78:	465b      	mov	r3, fp
 8005f7a:	a183      	add	r1, pc, #524	; (adr r1, 8006188 <__kernel_tan+0x318>)
 8005f7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f80:	f7fa f982 	bl	8000288 <__aeabi_dsub>
 8005f84:	4642      	mov	r2, r8
 8005f86:	464b      	mov	r3, r9
 8005f88:	4604      	mov	r4, r0
 8005f8a:	460d      	mov	r5, r1
 8005f8c:	a180      	add	r1, pc, #512	; (adr r1, 8006190 <__kernel_tan+0x320>)
 8005f8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f92:	f7fa f979 	bl	8000288 <__aeabi_dsub>
 8005f96:	4622      	mov	r2, r4
 8005f98:	462b      	mov	r3, r5
 8005f9a:	f7fa f977 	bl	800028c <__adddf3>
 8005f9e:	f04f 0800 	mov.w	r8, #0
 8005fa2:	4682      	mov	sl, r0
 8005fa4:	468b      	mov	fp, r1
 8005fa6:	f04f 0900 	mov.w	r9, #0
 8005faa:	4652      	mov	r2, sl
 8005fac:	465b      	mov	r3, fp
 8005fae:	4650      	mov	r0, sl
 8005fb0:	4659      	mov	r1, fp
 8005fb2:	f7fa fb21 	bl	80005f8 <__aeabi_dmul>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	460b      	mov	r3, r1
 8005fba:	ec43 2b18 	vmov	d8, r2, r3
 8005fbe:	f7fa fb1b 	bl	80005f8 <__aeabi_dmul>
 8005fc2:	ec53 2b18 	vmov	r2, r3, d8
 8005fc6:	4604      	mov	r4, r0
 8005fc8:	460d      	mov	r5, r1
 8005fca:	4650      	mov	r0, sl
 8005fcc:	4659      	mov	r1, fp
 8005fce:	f7fa fb13 	bl	80005f8 <__aeabi_dmul>
 8005fd2:	a371      	add	r3, pc, #452	; (adr r3, 8006198 <__kernel_tan+0x328>)
 8005fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd8:	ec41 0b19 	vmov	d9, r0, r1
 8005fdc:	4620      	mov	r0, r4
 8005fde:	4629      	mov	r1, r5
 8005fe0:	f7fa fb0a 	bl	80005f8 <__aeabi_dmul>
 8005fe4:	a36e      	add	r3, pc, #440	; (adr r3, 80061a0 <__kernel_tan+0x330>)
 8005fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fea:	f7fa f94f 	bl	800028c <__adddf3>
 8005fee:	4622      	mov	r2, r4
 8005ff0:	462b      	mov	r3, r5
 8005ff2:	f7fa fb01 	bl	80005f8 <__aeabi_dmul>
 8005ff6:	a36c      	add	r3, pc, #432	; (adr r3, 80061a8 <__kernel_tan+0x338>)
 8005ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffc:	f7fa f946 	bl	800028c <__adddf3>
 8006000:	4622      	mov	r2, r4
 8006002:	462b      	mov	r3, r5
 8006004:	f7fa faf8 	bl	80005f8 <__aeabi_dmul>
 8006008:	a369      	add	r3, pc, #420	; (adr r3, 80061b0 <__kernel_tan+0x340>)
 800600a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600e:	f7fa f93d 	bl	800028c <__adddf3>
 8006012:	4622      	mov	r2, r4
 8006014:	462b      	mov	r3, r5
 8006016:	f7fa faef 	bl	80005f8 <__aeabi_dmul>
 800601a:	a367      	add	r3, pc, #412	; (adr r3, 80061b8 <__kernel_tan+0x348>)
 800601c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006020:	f7fa f934 	bl	800028c <__adddf3>
 8006024:	4622      	mov	r2, r4
 8006026:	462b      	mov	r3, r5
 8006028:	f7fa fae6 	bl	80005f8 <__aeabi_dmul>
 800602c:	a364      	add	r3, pc, #400	; (adr r3, 80061c0 <__kernel_tan+0x350>)
 800602e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006032:	f7fa f92b 	bl	800028c <__adddf3>
 8006036:	ec53 2b18 	vmov	r2, r3, d8
 800603a:	f7fa fadd 	bl	80005f8 <__aeabi_dmul>
 800603e:	a362      	add	r3, pc, #392	; (adr r3, 80061c8 <__kernel_tan+0x358>)
 8006040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006044:	ec41 0b1a 	vmov	d10, r0, r1
 8006048:	4620      	mov	r0, r4
 800604a:	4629      	mov	r1, r5
 800604c:	f7fa fad4 	bl	80005f8 <__aeabi_dmul>
 8006050:	a35f      	add	r3, pc, #380	; (adr r3, 80061d0 <__kernel_tan+0x360>)
 8006052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006056:	f7fa f919 	bl	800028c <__adddf3>
 800605a:	4622      	mov	r2, r4
 800605c:	462b      	mov	r3, r5
 800605e:	f7fa facb 	bl	80005f8 <__aeabi_dmul>
 8006062:	a35d      	add	r3, pc, #372	; (adr r3, 80061d8 <__kernel_tan+0x368>)
 8006064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006068:	f7fa f910 	bl	800028c <__adddf3>
 800606c:	4622      	mov	r2, r4
 800606e:	462b      	mov	r3, r5
 8006070:	f7fa fac2 	bl	80005f8 <__aeabi_dmul>
 8006074:	a35a      	add	r3, pc, #360	; (adr r3, 80061e0 <__kernel_tan+0x370>)
 8006076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607a:	f7fa f907 	bl	800028c <__adddf3>
 800607e:	4622      	mov	r2, r4
 8006080:	462b      	mov	r3, r5
 8006082:	f7fa fab9 	bl	80005f8 <__aeabi_dmul>
 8006086:	a358      	add	r3, pc, #352	; (adr r3, 80061e8 <__kernel_tan+0x378>)
 8006088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608c:	f7fa f8fe 	bl	800028c <__adddf3>
 8006090:	4622      	mov	r2, r4
 8006092:	462b      	mov	r3, r5
 8006094:	f7fa fab0 	bl	80005f8 <__aeabi_dmul>
 8006098:	a355      	add	r3, pc, #340	; (adr r3, 80061f0 <__kernel_tan+0x380>)
 800609a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609e:	f7fa f8f5 	bl	800028c <__adddf3>
 80060a2:	4602      	mov	r2, r0
 80060a4:	460b      	mov	r3, r1
 80060a6:	ec51 0b1a 	vmov	r0, r1, d10
 80060aa:	f7fa f8ef 	bl	800028c <__adddf3>
 80060ae:	ec53 2b19 	vmov	r2, r3, d9
 80060b2:	f7fa faa1 	bl	80005f8 <__aeabi_dmul>
 80060b6:	4642      	mov	r2, r8
 80060b8:	464b      	mov	r3, r9
 80060ba:	f7fa f8e7 	bl	800028c <__adddf3>
 80060be:	ec53 2b18 	vmov	r2, r3, d8
 80060c2:	f7fa fa99 	bl	80005f8 <__aeabi_dmul>
 80060c6:	4642      	mov	r2, r8
 80060c8:	464b      	mov	r3, r9
 80060ca:	f7fa f8df 	bl	800028c <__adddf3>
 80060ce:	a34a      	add	r3, pc, #296	; (adr r3, 80061f8 <__kernel_tan+0x388>)
 80060d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d4:	4604      	mov	r4, r0
 80060d6:	460d      	mov	r5, r1
 80060d8:	ec51 0b19 	vmov	r0, r1, d9
 80060dc:	f7fa fa8c 	bl	80005f8 <__aeabi_dmul>
 80060e0:	4622      	mov	r2, r4
 80060e2:	462b      	mov	r3, r5
 80060e4:	f7fa f8d2 	bl	800028c <__adddf3>
 80060e8:	460b      	mov	r3, r1
 80060ea:	ec41 0b18 	vmov	d8, r0, r1
 80060ee:	4602      	mov	r2, r0
 80060f0:	4659      	mov	r1, fp
 80060f2:	4650      	mov	r0, sl
 80060f4:	f7fa f8ca 	bl	800028c <__adddf3>
 80060f8:	4b44      	ldr	r3, [pc, #272]	; (800620c <__kernel_tan+0x39c>)
 80060fa:	429f      	cmp	r7, r3
 80060fc:	4604      	mov	r4, r0
 80060fe:	460d      	mov	r5, r1
 8006100:	f340 8086 	ble.w	8006210 <__kernel_tan+0x3a0>
 8006104:	4630      	mov	r0, r6
 8006106:	f7fa fa0d 	bl	8000524 <__aeabi_i2d>
 800610a:	4622      	mov	r2, r4
 800610c:	4680      	mov	r8, r0
 800610e:	4689      	mov	r9, r1
 8006110:	462b      	mov	r3, r5
 8006112:	4620      	mov	r0, r4
 8006114:	4629      	mov	r1, r5
 8006116:	f7fa fa6f 	bl	80005f8 <__aeabi_dmul>
 800611a:	4642      	mov	r2, r8
 800611c:	4606      	mov	r6, r0
 800611e:	460f      	mov	r7, r1
 8006120:	464b      	mov	r3, r9
 8006122:	4620      	mov	r0, r4
 8006124:	4629      	mov	r1, r5
 8006126:	f7fa f8b1 	bl	800028c <__adddf3>
 800612a:	4602      	mov	r2, r0
 800612c:	460b      	mov	r3, r1
 800612e:	4630      	mov	r0, r6
 8006130:	4639      	mov	r1, r7
 8006132:	f7fa fb8b 	bl	800084c <__aeabi_ddiv>
 8006136:	ec53 2b18 	vmov	r2, r3, d8
 800613a:	f7fa f8a5 	bl	8000288 <__aeabi_dsub>
 800613e:	4602      	mov	r2, r0
 8006140:	460b      	mov	r3, r1
 8006142:	4650      	mov	r0, sl
 8006144:	4659      	mov	r1, fp
 8006146:	f7fa f89f 	bl	8000288 <__aeabi_dsub>
 800614a:	4602      	mov	r2, r0
 800614c:	460b      	mov	r3, r1
 800614e:	f7fa f89d 	bl	800028c <__adddf3>
 8006152:	4602      	mov	r2, r0
 8006154:	460b      	mov	r3, r1
 8006156:	4640      	mov	r0, r8
 8006158:	4649      	mov	r1, r9
 800615a:	f7fa f895 	bl	8000288 <__aeabi_dsub>
 800615e:	9b00      	ldr	r3, [sp, #0]
 8006160:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8006164:	f00a 0a02 	and.w	sl, sl, #2
 8006168:	4604      	mov	r4, r0
 800616a:	f1ca 0001 	rsb	r0, sl, #1
 800616e:	460d      	mov	r5, r1
 8006170:	f7fa f9d8 	bl	8000524 <__aeabi_i2d>
 8006174:	4602      	mov	r2, r0
 8006176:	460b      	mov	r3, r1
 8006178:	4620      	mov	r0, r4
 800617a:	4629      	mov	r1, r5
 800617c:	f7fa fa3c 	bl	80005f8 <__aeabi_dmul>
 8006180:	e69f      	b.n	8005ec2 <__kernel_tan+0x52>
 8006182:	bf00      	nop
 8006184:	f3af 8000 	nop.w
 8006188:	54442d18 	.word	0x54442d18
 800618c:	3fe921fb 	.word	0x3fe921fb
 8006190:	33145c07 	.word	0x33145c07
 8006194:	3c81a626 	.word	0x3c81a626
 8006198:	74bf7ad4 	.word	0x74bf7ad4
 800619c:	3efb2a70 	.word	0x3efb2a70
 80061a0:	32f0a7e9 	.word	0x32f0a7e9
 80061a4:	3f12b80f 	.word	0x3f12b80f
 80061a8:	1a8d1068 	.word	0x1a8d1068
 80061ac:	3f3026f7 	.word	0x3f3026f7
 80061b0:	fee08315 	.word	0xfee08315
 80061b4:	3f57dbc8 	.word	0x3f57dbc8
 80061b8:	e96e8493 	.word	0xe96e8493
 80061bc:	3f8226e3 	.word	0x3f8226e3
 80061c0:	1bb341fe 	.word	0x1bb341fe
 80061c4:	3faba1ba 	.word	0x3faba1ba
 80061c8:	db605373 	.word	0xdb605373
 80061cc:	bef375cb 	.word	0xbef375cb
 80061d0:	a03792a6 	.word	0xa03792a6
 80061d4:	3f147e88 	.word	0x3f147e88
 80061d8:	f2f26501 	.word	0xf2f26501
 80061dc:	3f4344d8 	.word	0x3f4344d8
 80061e0:	c9560328 	.word	0xc9560328
 80061e4:	3f6d6d22 	.word	0x3f6d6d22
 80061e8:	8406d637 	.word	0x8406d637
 80061ec:	3f9664f4 	.word	0x3f9664f4
 80061f0:	1110fe7a 	.word	0x1110fe7a
 80061f4:	3fc11111 	.word	0x3fc11111
 80061f8:	55555563 	.word	0x55555563
 80061fc:	3fd55555 	.word	0x3fd55555
 8006200:	3e2fffff 	.word	0x3e2fffff
 8006204:	3ff00000 	.word	0x3ff00000
 8006208:	bff00000 	.word	0xbff00000
 800620c:	3fe59427 	.word	0x3fe59427
 8006210:	2e01      	cmp	r6, #1
 8006212:	d02f      	beq.n	8006274 <__kernel_tan+0x404>
 8006214:	460f      	mov	r7, r1
 8006216:	4602      	mov	r2, r0
 8006218:	460b      	mov	r3, r1
 800621a:	4689      	mov	r9, r1
 800621c:	2000      	movs	r0, #0
 800621e:	4917      	ldr	r1, [pc, #92]	; (800627c <__kernel_tan+0x40c>)
 8006220:	f7fa fb14 	bl	800084c <__aeabi_ddiv>
 8006224:	2600      	movs	r6, #0
 8006226:	e9cd 0100 	strd	r0, r1, [sp]
 800622a:	4652      	mov	r2, sl
 800622c:	465b      	mov	r3, fp
 800622e:	4630      	mov	r0, r6
 8006230:	4639      	mov	r1, r7
 8006232:	f7fa f829 	bl	8000288 <__aeabi_dsub>
 8006236:	e9dd 4500 	ldrd	r4, r5, [sp]
 800623a:	4602      	mov	r2, r0
 800623c:	460b      	mov	r3, r1
 800623e:	ec51 0b18 	vmov	r0, r1, d8
 8006242:	f7fa f821 	bl	8000288 <__aeabi_dsub>
 8006246:	4632      	mov	r2, r6
 8006248:	462b      	mov	r3, r5
 800624a:	f7fa f9d5 	bl	80005f8 <__aeabi_dmul>
 800624e:	46b0      	mov	r8, r6
 8006250:	460f      	mov	r7, r1
 8006252:	4642      	mov	r2, r8
 8006254:	462b      	mov	r3, r5
 8006256:	4634      	mov	r4, r6
 8006258:	4649      	mov	r1, r9
 800625a:	4606      	mov	r6, r0
 800625c:	4640      	mov	r0, r8
 800625e:	f7fa f9cb 	bl	80005f8 <__aeabi_dmul>
 8006262:	4b07      	ldr	r3, [pc, #28]	; (8006280 <__kernel_tan+0x410>)
 8006264:	2200      	movs	r2, #0
 8006266:	f7fa f811 	bl	800028c <__adddf3>
 800626a:	4602      	mov	r2, r0
 800626c:	460b      	mov	r3, r1
 800626e:	4630      	mov	r0, r6
 8006270:	4639      	mov	r1, r7
 8006272:	e665      	b.n	8005f40 <__kernel_tan+0xd0>
 8006274:	4682      	mov	sl, r0
 8006276:	468b      	mov	fp, r1
 8006278:	e625      	b.n	8005ec6 <__kernel_tan+0x56>
 800627a:	bf00      	nop
 800627c:	bff00000 	.word	0xbff00000
 8006280:	3ff00000 	.word	0x3ff00000
 8006284:	00000000 	.word	0x00000000

08006288 <__ieee754_rem_pio2>:
 8006288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800628c:	ed2d 8b02 	vpush	{d8}
 8006290:	ec55 4b10 	vmov	r4, r5, d0
 8006294:	4bca      	ldr	r3, [pc, #808]	; (80065c0 <__ieee754_rem_pio2+0x338>)
 8006296:	b08b      	sub	sp, #44	; 0x2c
 8006298:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800629c:	4598      	cmp	r8, r3
 800629e:	4682      	mov	sl, r0
 80062a0:	9502      	str	r5, [sp, #8]
 80062a2:	dc08      	bgt.n	80062b6 <__ieee754_rem_pio2+0x2e>
 80062a4:	2200      	movs	r2, #0
 80062a6:	2300      	movs	r3, #0
 80062a8:	ed80 0b00 	vstr	d0, [r0]
 80062ac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80062b0:	f04f 0b00 	mov.w	fp, #0
 80062b4:	e028      	b.n	8006308 <__ieee754_rem_pio2+0x80>
 80062b6:	4bc3      	ldr	r3, [pc, #780]	; (80065c4 <__ieee754_rem_pio2+0x33c>)
 80062b8:	4598      	cmp	r8, r3
 80062ba:	dc78      	bgt.n	80063ae <__ieee754_rem_pio2+0x126>
 80062bc:	9b02      	ldr	r3, [sp, #8]
 80062be:	4ec2      	ldr	r6, [pc, #776]	; (80065c8 <__ieee754_rem_pio2+0x340>)
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	ee10 0a10 	vmov	r0, s0
 80062c6:	a3b0      	add	r3, pc, #704	; (adr r3, 8006588 <__ieee754_rem_pio2+0x300>)
 80062c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062cc:	4629      	mov	r1, r5
 80062ce:	dd39      	ble.n	8006344 <__ieee754_rem_pio2+0xbc>
 80062d0:	f7f9 ffda 	bl	8000288 <__aeabi_dsub>
 80062d4:	45b0      	cmp	r8, r6
 80062d6:	4604      	mov	r4, r0
 80062d8:	460d      	mov	r5, r1
 80062da:	d01b      	beq.n	8006314 <__ieee754_rem_pio2+0x8c>
 80062dc:	a3ac      	add	r3, pc, #688	; (adr r3, 8006590 <__ieee754_rem_pio2+0x308>)
 80062de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e2:	f7f9 ffd1 	bl	8000288 <__aeabi_dsub>
 80062e6:	4602      	mov	r2, r0
 80062e8:	460b      	mov	r3, r1
 80062ea:	e9ca 2300 	strd	r2, r3, [sl]
 80062ee:	4620      	mov	r0, r4
 80062f0:	4629      	mov	r1, r5
 80062f2:	f7f9 ffc9 	bl	8000288 <__aeabi_dsub>
 80062f6:	a3a6      	add	r3, pc, #664	; (adr r3, 8006590 <__ieee754_rem_pio2+0x308>)
 80062f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fc:	f7f9 ffc4 	bl	8000288 <__aeabi_dsub>
 8006300:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006304:	f04f 0b01 	mov.w	fp, #1
 8006308:	4658      	mov	r0, fp
 800630a:	b00b      	add	sp, #44	; 0x2c
 800630c:	ecbd 8b02 	vpop	{d8}
 8006310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006314:	a3a0      	add	r3, pc, #640	; (adr r3, 8006598 <__ieee754_rem_pio2+0x310>)
 8006316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631a:	f7f9 ffb5 	bl	8000288 <__aeabi_dsub>
 800631e:	a3a0      	add	r3, pc, #640	; (adr r3, 80065a0 <__ieee754_rem_pio2+0x318>)
 8006320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006324:	4604      	mov	r4, r0
 8006326:	460d      	mov	r5, r1
 8006328:	f7f9 ffae 	bl	8000288 <__aeabi_dsub>
 800632c:	4602      	mov	r2, r0
 800632e:	460b      	mov	r3, r1
 8006330:	e9ca 2300 	strd	r2, r3, [sl]
 8006334:	4620      	mov	r0, r4
 8006336:	4629      	mov	r1, r5
 8006338:	f7f9 ffa6 	bl	8000288 <__aeabi_dsub>
 800633c:	a398      	add	r3, pc, #608	; (adr r3, 80065a0 <__ieee754_rem_pio2+0x318>)
 800633e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006342:	e7db      	b.n	80062fc <__ieee754_rem_pio2+0x74>
 8006344:	f7f9 ffa2 	bl	800028c <__adddf3>
 8006348:	45b0      	cmp	r8, r6
 800634a:	4604      	mov	r4, r0
 800634c:	460d      	mov	r5, r1
 800634e:	d016      	beq.n	800637e <__ieee754_rem_pio2+0xf6>
 8006350:	a38f      	add	r3, pc, #572	; (adr r3, 8006590 <__ieee754_rem_pio2+0x308>)
 8006352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006356:	f7f9 ff99 	bl	800028c <__adddf3>
 800635a:	4602      	mov	r2, r0
 800635c:	460b      	mov	r3, r1
 800635e:	e9ca 2300 	strd	r2, r3, [sl]
 8006362:	4620      	mov	r0, r4
 8006364:	4629      	mov	r1, r5
 8006366:	f7f9 ff8f 	bl	8000288 <__aeabi_dsub>
 800636a:	a389      	add	r3, pc, #548	; (adr r3, 8006590 <__ieee754_rem_pio2+0x308>)
 800636c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006370:	f7f9 ff8c 	bl	800028c <__adddf3>
 8006374:	f04f 3bff 	mov.w	fp, #4294967295
 8006378:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800637c:	e7c4      	b.n	8006308 <__ieee754_rem_pio2+0x80>
 800637e:	a386      	add	r3, pc, #536	; (adr r3, 8006598 <__ieee754_rem_pio2+0x310>)
 8006380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006384:	f7f9 ff82 	bl	800028c <__adddf3>
 8006388:	a385      	add	r3, pc, #532	; (adr r3, 80065a0 <__ieee754_rem_pio2+0x318>)
 800638a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638e:	4604      	mov	r4, r0
 8006390:	460d      	mov	r5, r1
 8006392:	f7f9 ff7b 	bl	800028c <__adddf3>
 8006396:	4602      	mov	r2, r0
 8006398:	460b      	mov	r3, r1
 800639a:	e9ca 2300 	strd	r2, r3, [sl]
 800639e:	4620      	mov	r0, r4
 80063a0:	4629      	mov	r1, r5
 80063a2:	f7f9 ff71 	bl	8000288 <__aeabi_dsub>
 80063a6:	a37e      	add	r3, pc, #504	; (adr r3, 80065a0 <__ieee754_rem_pio2+0x318>)
 80063a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ac:	e7e0      	b.n	8006370 <__ieee754_rem_pio2+0xe8>
 80063ae:	4b87      	ldr	r3, [pc, #540]	; (80065cc <__ieee754_rem_pio2+0x344>)
 80063b0:	4598      	cmp	r8, r3
 80063b2:	f300 80d8 	bgt.w	8006566 <__ieee754_rem_pio2+0x2de>
 80063b6:	f000 f96d 	bl	8006694 <fabs>
 80063ba:	ec55 4b10 	vmov	r4, r5, d0
 80063be:	ee10 0a10 	vmov	r0, s0
 80063c2:	a379      	add	r3, pc, #484	; (adr r3, 80065a8 <__ieee754_rem_pio2+0x320>)
 80063c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c8:	4629      	mov	r1, r5
 80063ca:	f7fa f915 	bl	80005f8 <__aeabi_dmul>
 80063ce:	4b80      	ldr	r3, [pc, #512]	; (80065d0 <__ieee754_rem_pio2+0x348>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	f7f9 ff5b 	bl	800028c <__adddf3>
 80063d6:	f7fa fba9 	bl	8000b2c <__aeabi_d2iz>
 80063da:	4683      	mov	fp, r0
 80063dc:	f7fa f8a2 	bl	8000524 <__aeabi_i2d>
 80063e0:	4602      	mov	r2, r0
 80063e2:	460b      	mov	r3, r1
 80063e4:	ec43 2b18 	vmov	d8, r2, r3
 80063e8:	a367      	add	r3, pc, #412	; (adr r3, 8006588 <__ieee754_rem_pio2+0x300>)
 80063ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ee:	f7fa f903 	bl	80005f8 <__aeabi_dmul>
 80063f2:	4602      	mov	r2, r0
 80063f4:	460b      	mov	r3, r1
 80063f6:	4620      	mov	r0, r4
 80063f8:	4629      	mov	r1, r5
 80063fa:	f7f9 ff45 	bl	8000288 <__aeabi_dsub>
 80063fe:	a364      	add	r3, pc, #400	; (adr r3, 8006590 <__ieee754_rem_pio2+0x308>)
 8006400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006404:	4606      	mov	r6, r0
 8006406:	460f      	mov	r7, r1
 8006408:	ec51 0b18 	vmov	r0, r1, d8
 800640c:	f7fa f8f4 	bl	80005f8 <__aeabi_dmul>
 8006410:	f1bb 0f1f 	cmp.w	fp, #31
 8006414:	4604      	mov	r4, r0
 8006416:	460d      	mov	r5, r1
 8006418:	dc0d      	bgt.n	8006436 <__ieee754_rem_pio2+0x1ae>
 800641a:	4b6e      	ldr	r3, [pc, #440]	; (80065d4 <__ieee754_rem_pio2+0x34c>)
 800641c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006424:	4543      	cmp	r3, r8
 8006426:	d006      	beq.n	8006436 <__ieee754_rem_pio2+0x1ae>
 8006428:	4622      	mov	r2, r4
 800642a:	462b      	mov	r3, r5
 800642c:	4630      	mov	r0, r6
 800642e:	4639      	mov	r1, r7
 8006430:	f7f9 ff2a 	bl	8000288 <__aeabi_dsub>
 8006434:	e00e      	b.n	8006454 <__ieee754_rem_pio2+0x1cc>
 8006436:	462b      	mov	r3, r5
 8006438:	4622      	mov	r2, r4
 800643a:	4630      	mov	r0, r6
 800643c:	4639      	mov	r1, r7
 800643e:	f7f9 ff23 	bl	8000288 <__aeabi_dsub>
 8006442:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006446:	9303      	str	r3, [sp, #12]
 8006448:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800644c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8006450:	2b10      	cmp	r3, #16
 8006452:	dc02      	bgt.n	800645a <__ieee754_rem_pio2+0x1d2>
 8006454:	e9ca 0100 	strd	r0, r1, [sl]
 8006458:	e039      	b.n	80064ce <__ieee754_rem_pio2+0x246>
 800645a:	a34f      	add	r3, pc, #316	; (adr r3, 8006598 <__ieee754_rem_pio2+0x310>)
 800645c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006460:	ec51 0b18 	vmov	r0, r1, d8
 8006464:	f7fa f8c8 	bl	80005f8 <__aeabi_dmul>
 8006468:	4604      	mov	r4, r0
 800646a:	460d      	mov	r5, r1
 800646c:	4602      	mov	r2, r0
 800646e:	460b      	mov	r3, r1
 8006470:	4630      	mov	r0, r6
 8006472:	4639      	mov	r1, r7
 8006474:	f7f9 ff08 	bl	8000288 <__aeabi_dsub>
 8006478:	4602      	mov	r2, r0
 800647a:	460b      	mov	r3, r1
 800647c:	4680      	mov	r8, r0
 800647e:	4689      	mov	r9, r1
 8006480:	4630      	mov	r0, r6
 8006482:	4639      	mov	r1, r7
 8006484:	f7f9 ff00 	bl	8000288 <__aeabi_dsub>
 8006488:	4622      	mov	r2, r4
 800648a:	462b      	mov	r3, r5
 800648c:	f7f9 fefc 	bl	8000288 <__aeabi_dsub>
 8006490:	a343      	add	r3, pc, #268	; (adr r3, 80065a0 <__ieee754_rem_pio2+0x318>)
 8006492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006496:	4604      	mov	r4, r0
 8006498:	460d      	mov	r5, r1
 800649a:	ec51 0b18 	vmov	r0, r1, d8
 800649e:	f7fa f8ab 	bl	80005f8 <__aeabi_dmul>
 80064a2:	4622      	mov	r2, r4
 80064a4:	462b      	mov	r3, r5
 80064a6:	f7f9 feef 	bl	8000288 <__aeabi_dsub>
 80064aa:	4602      	mov	r2, r0
 80064ac:	460b      	mov	r3, r1
 80064ae:	4604      	mov	r4, r0
 80064b0:	460d      	mov	r5, r1
 80064b2:	4640      	mov	r0, r8
 80064b4:	4649      	mov	r1, r9
 80064b6:	f7f9 fee7 	bl	8000288 <__aeabi_dsub>
 80064ba:	9a03      	ldr	r2, [sp, #12]
 80064bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	2b31      	cmp	r3, #49	; 0x31
 80064c4:	dc24      	bgt.n	8006510 <__ieee754_rem_pio2+0x288>
 80064c6:	e9ca 0100 	strd	r0, r1, [sl]
 80064ca:	4646      	mov	r6, r8
 80064cc:	464f      	mov	r7, r9
 80064ce:	e9da 8900 	ldrd	r8, r9, [sl]
 80064d2:	4630      	mov	r0, r6
 80064d4:	4642      	mov	r2, r8
 80064d6:	464b      	mov	r3, r9
 80064d8:	4639      	mov	r1, r7
 80064da:	f7f9 fed5 	bl	8000288 <__aeabi_dsub>
 80064de:	462b      	mov	r3, r5
 80064e0:	4622      	mov	r2, r4
 80064e2:	f7f9 fed1 	bl	8000288 <__aeabi_dsub>
 80064e6:	9b02      	ldr	r3, [sp, #8]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80064ee:	f6bf af0b 	bge.w	8006308 <__ieee754_rem_pio2+0x80>
 80064f2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80064f6:	f8ca 3004 	str.w	r3, [sl, #4]
 80064fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80064fe:	f8ca 8000 	str.w	r8, [sl]
 8006502:	f8ca 0008 	str.w	r0, [sl, #8]
 8006506:	f8ca 300c 	str.w	r3, [sl, #12]
 800650a:	f1cb 0b00 	rsb	fp, fp, #0
 800650e:	e6fb      	b.n	8006308 <__ieee754_rem_pio2+0x80>
 8006510:	a327      	add	r3, pc, #156	; (adr r3, 80065b0 <__ieee754_rem_pio2+0x328>)
 8006512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006516:	ec51 0b18 	vmov	r0, r1, d8
 800651a:	f7fa f86d 	bl	80005f8 <__aeabi_dmul>
 800651e:	4604      	mov	r4, r0
 8006520:	460d      	mov	r5, r1
 8006522:	4602      	mov	r2, r0
 8006524:	460b      	mov	r3, r1
 8006526:	4640      	mov	r0, r8
 8006528:	4649      	mov	r1, r9
 800652a:	f7f9 fead 	bl	8000288 <__aeabi_dsub>
 800652e:	4602      	mov	r2, r0
 8006530:	460b      	mov	r3, r1
 8006532:	4606      	mov	r6, r0
 8006534:	460f      	mov	r7, r1
 8006536:	4640      	mov	r0, r8
 8006538:	4649      	mov	r1, r9
 800653a:	f7f9 fea5 	bl	8000288 <__aeabi_dsub>
 800653e:	4622      	mov	r2, r4
 8006540:	462b      	mov	r3, r5
 8006542:	f7f9 fea1 	bl	8000288 <__aeabi_dsub>
 8006546:	a31c      	add	r3, pc, #112	; (adr r3, 80065b8 <__ieee754_rem_pio2+0x330>)
 8006548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654c:	4604      	mov	r4, r0
 800654e:	460d      	mov	r5, r1
 8006550:	ec51 0b18 	vmov	r0, r1, d8
 8006554:	f7fa f850 	bl	80005f8 <__aeabi_dmul>
 8006558:	4622      	mov	r2, r4
 800655a:	462b      	mov	r3, r5
 800655c:	f7f9 fe94 	bl	8000288 <__aeabi_dsub>
 8006560:	4604      	mov	r4, r0
 8006562:	460d      	mov	r5, r1
 8006564:	e760      	b.n	8006428 <__ieee754_rem_pio2+0x1a0>
 8006566:	4b1c      	ldr	r3, [pc, #112]	; (80065d8 <__ieee754_rem_pio2+0x350>)
 8006568:	4598      	cmp	r8, r3
 800656a:	dd37      	ble.n	80065dc <__ieee754_rem_pio2+0x354>
 800656c:	ee10 2a10 	vmov	r2, s0
 8006570:	462b      	mov	r3, r5
 8006572:	4620      	mov	r0, r4
 8006574:	4629      	mov	r1, r5
 8006576:	f7f9 fe87 	bl	8000288 <__aeabi_dsub>
 800657a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800657e:	e9ca 0100 	strd	r0, r1, [sl]
 8006582:	e695      	b.n	80062b0 <__ieee754_rem_pio2+0x28>
 8006584:	f3af 8000 	nop.w
 8006588:	54400000 	.word	0x54400000
 800658c:	3ff921fb 	.word	0x3ff921fb
 8006590:	1a626331 	.word	0x1a626331
 8006594:	3dd0b461 	.word	0x3dd0b461
 8006598:	1a600000 	.word	0x1a600000
 800659c:	3dd0b461 	.word	0x3dd0b461
 80065a0:	2e037073 	.word	0x2e037073
 80065a4:	3ba3198a 	.word	0x3ba3198a
 80065a8:	6dc9c883 	.word	0x6dc9c883
 80065ac:	3fe45f30 	.word	0x3fe45f30
 80065b0:	2e000000 	.word	0x2e000000
 80065b4:	3ba3198a 	.word	0x3ba3198a
 80065b8:	252049c1 	.word	0x252049c1
 80065bc:	397b839a 	.word	0x397b839a
 80065c0:	3fe921fb 	.word	0x3fe921fb
 80065c4:	4002d97b 	.word	0x4002d97b
 80065c8:	3ff921fb 	.word	0x3ff921fb
 80065cc:	413921fb 	.word	0x413921fb
 80065d0:	3fe00000 	.word	0x3fe00000
 80065d4:	08021f64 	.word	0x08021f64
 80065d8:	7fefffff 	.word	0x7fefffff
 80065dc:	ea4f 5628 	mov.w	r6, r8, asr #20
 80065e0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80065e4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80065e8:	4620      	mov	r0, r4
 80065ea:	460d      	mov	r5, r1
 80065ec:	f7fa fa9e 	bl	8000b2c <__aeabi_d2iz>
 80065f0:	f7f9 ff98 	bl	8000524 <__aeabi_i2d>
 80065f4:	4602      	mov	r2, r0
 80065f6:	460b      	mov	r3, r1
 80065f8:	4620      	mov	r0, r4
 80065fa:	4629      	mov	r1, r5
 80065fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006600:	f7f9 fe42 	bl	8000288 <__aeabi_dsub>
 8006604:	4b21      	ldr	r3, [pc, #132]	; (800668c <__ieee754_rem_pio2+0x404>)
 8006606:	2200      	movs	r2, #0
 8006608:	f7f9 fff6 	bl	80005f8 <__aeabi_dmul>
 800660c:	460d      	mov	r5, r1
 800660e:	4604      	mov	r4, r0
 8006610:	f7fa fa8c 	bl	8000b2c <__aeabi_d2iz>
 8006614:	f7f9 ff86 	bl	8000524 <__aeabi_i2d>
 8006618:	4602      	mov	r2, r0
 800661a:	460b      	mov	r3, r1
 800661c:	4620      	mov	r0, r4
 800661e:	4629      	mov	r1, r5
 8006620:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006624:	f7f9 fe30 	bl	8000288 <__aeabi_dsub>
 8006628:	4b18      	ldr	r3, [pc, #96]	; (800668c <__ieee754_rem_pio2+0x404>)
 800662a:	2200      	movs	r2, #0
 800662c:	f7f9 ffe4 	bl	80005f8 <__aeabi_dmul>
 8006630:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006634:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8006638:	2703      	movs	r7, #3
 800663a:	2400      	movs	r4, #0
 800663c:	2500      	movs	r5, #0
 800663e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8006642:	4622      	mov	r2, r4
 8006644:	462b      	mov	r3, r5
 8006646:	46b9      	mov	r9, r7
 8006648:	3f01      	subs	r7, #1
 800664a:	f7fa fa3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800664e:	2800      	cmp	r0, #0
 8006650:	d1f5      	bne.n	800663e <__ieee754_rem_pio2+0x3b6>
 8006652:	4b0f      	ldr	r3, [pc, #60]	; (8006690 <__ieee754_rem_pio2+0x408>)
 8006654:	9301      	str	r3, [sp, #4]
 8006656:	2302      	movs	r3, #2
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	4632      	mov	r2, r6
 800665c:	464b      	mov	r3, r9
 800665e:	4651      	mov	r1, sl
 8006660:	a804      	add	r0, sp, #16
 8006662:	f000 f821 	bl	80066a8 <__kernel_rem_pio2>
 8006666:	9b02      	ldr	r3, [sp, #8]
 8006668:	2b00      	cmp	r3, #0
 800666a:	4683      	mov	fp, r0
 800666c:	f6bf ae4c 	bge.w	8006308 <__ieee754_rem_pio2+0x80>
 8006670:	e9da 2100 	ldrd	r2, r1, [sl]
 8006674:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006678:	e9ca 2300 	strd	r2, r3, [sl]
 800667c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8006680:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006684:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8006688:	e73f      	b.n	800650a <__ieee754_rem_pio2+0x282>
 800668a:	bf00      	nop
 800668c:	41700000 	.word	0x41700000
 8006690:	08021fe4 	.word	0x08021fe4

08006694 <fabs>:
 8006694:	ec51 0b10 	vmov	r0, r1, d0
 8006698:	ee10 2a10 	vmov	r2, s0
 800669c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80066a0:	ec43 2b10 	vmov	d0, r2, r3
 80066a4:	4770      	bx	lr
	...

080066a8 <__kernel_rem_pio2>:
 80066a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ac:	ed2d 8b02 	vpush	{d8}
 80066b0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80066b4:	f112 0f14 	cmn.w	r2, #20
 80066b8:	9306      	str	r3, [sp, #24]
 80066ba:	9104      	str	r1, [sp, #16]
 80066bc:	4bc2      	ldr	r3, [pc, #776]	; (80069c8 <__kernel_rem_pio2+0x320>)
 80066be:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80066c0:	9009      	str	r0, [sp, #36]	; 0x24
 80066c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	9b06      	ldr	r3, [sp, #24]
 80066ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80066ce:	bfa8      	it	ge
 80066d0:	1ed4      	subge	r4, r2, #3
 80066d2:	9305      	str	r3, [sp, #20]
 80066d4:	bfb2      	itee	lt
 80066d6:	2400      	movlt	r4, #0
 80066d8:	2318      	movge	r3, #24
 80066da:	fb94 f4f3 	sdivge	r4, r4, r3
 80066de:	f06f 0317 	mvn.w	r3, #23
 80066e2:	fb04 3303 	mla	r3, r4, r3, r3
 80066e6:	eb03 0a02 	add.w	sl, r3, r2
 80066ea:	9b00      	ldr	r3, [sp, #0]
 80066ec:	9a05      	ldr	r2, [sp, #20]
 80066ee:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80069b8 <__kernel_rem_pio2+0x310>
 80066f2:	eb03 0802 	add.w	r8, r3, r2
 80066f6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80066f8:	1aa7      	subs	r7, r4, r2
 80066fa:	ae20      	add	r6, sp, #128	; 0x80
 80066fc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006700:	2500      	movs	r5, #0
 8006702:	4545      	cmp	r5, r8
 8006704:	dd13      	ble.n	800672e <__kernel_rem_pio2+0x86>
 8006706:	9b06      	ldr	r3, [sp, #24]
 8006708:	aa20      	add	r2, sp, #128	; 0x80
 800670a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800670e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8006712:	f04f 0800 	mov.w	r8, #0
 8006716:	9b00      	ldr	r3, [sp, #0]
 8006718:	4598      	cmp	r8, r3
 800671a:	dc31      	bgt.n	8006780 <__kernel_rem_pio2+0xd8>
 800671c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80069b8 <__kernel_rem_pio2+0x310>
 8006720:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006724:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006728:	462f      	mov	r7, r5
 800672a:	2600      	movs	r6, #0
 800672c:	e01b      	b.n	8006766 <__kernel_rem_pio2+0xbe>
 800672e:	42ef      	cmn	r7, r5
 8006730:	d407      	bmi.n	8006742 <__kernel_rem_pio2+0x9a>
 8006732:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006736:	f7f9 fef5 	bl	8000524 <__aeabi_i2d>
 800673a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800673e:	3501      	adds	r5, #1
 8006740:	e7df      	b.n	8006702 <__kernel_rem_pio2+0x5a>
 8006742:	ec51 0b18 	vmov	r0, r1, d8
 8006746:	e7f8      	b.n	800673a <__kernel_rem_pio2+0x92>
 8006748:	e9d7 2300 	ldrd	r2, r3, [r7]
 800674c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006750:	f7f9 ff52 	bl	80005f8 <__aeabi_dmul>
 8006754:	4602      	mov	r2, r0
 8006756:	460b      	mov	r3, r1
 8006758:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800675c:	f7f9 fd96 	bl	800028c <__adddf3>
 8006760:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006764:	3601      	adds	r6, #1
 8006766:	9b05      	ldr	r3, [sp, #20]
 8006768:	429e      	cmp	r6, r3
 800676a:	f1a7 0708 	sub.w	r7, r7, #8
 800676e:	ddeb      	ble.n	8006748 <__kernel_rem_pio2+0xa0>
 8006770:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006774:	f108 0801 	add.w	r8, r8, #1
 8006778:	ecab 7b02 	vstmia	fp!, {d7}
 800677c:	3508      	adds	r5, #8
 800677e:	e7ca      	b.n	8006716 <__kernel_rem_pio2+0x6e>
 8006780:	9b00      	ldr	r3, [sp, #0]
 8006782:	aa0c      	add	r2, sp, #48	; 0x30
 8006784:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006788:	930b      	str	r3, [sp, #44]	; 0x2c
 800678a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800678c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006790:	9c00      	ldr	r4, [sp, #0]
 8006792:	930a      	str	r3, [sp, #40]	; 0x28
 8006794:	00e3      	lsls	r3, r4, #3
 8006796:	9308      	str	r3, [sp, #32]
 8006798:	ab98      	add	r3, sp, #608	; 0x260
 800679a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800679e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80067a2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80067a6:	ab70      	add	r3, sp, #448	; 0x1c0
 80067a8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80067ac:	46c3      	mov	fp, r8
 80067ae:	46a1      	mov	r9, r4
 80067b0:	f1b9 0f00 	cmp.w	r9, #0
 80067b4:	f1a5 0508 	sub.w	r5, r5, #8
 80067b8:	dc77      	bgt.n	80068aa <__kernel_rem_pio2+0x202>
 80067ba:	ec47 6b10 	vmov	d0, r6, r7
 80067be:	4650      	mov	r0, sl
 80067c0:	f000 fac2 	bl	8006d48 <scalbn>
 80067c4:	ec57 6b10 	vmov	r6, r7, d0
 80067c8:	2200      	movs	r2, #0
 80067ca:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80067ce:	ee10 0a10 	vmov	r0, s0
 80067d2:	4639      	mov	r1, r7
 80067d4:	f7f9 ff10 	bl	80005f8 <__aeabi_dmul>
 80067d8:	ec41 0b10 	vmov	d0, r0, r1
 80067dc:	f000 fb34 	bl	8006e48 <floor>
 80067e0:	4b7a      	ldr	r3, [pc, #488]	; (80069cc <__kernel_rem_pio2+0x324>)
 80067e2:	ec51 0b10 	vmov	r0, r1, d0
 80067e6:	2200      	movs	r2, #0
 80067e8:	f7f9 ff06 	bl	80005f8 <__aeabi_dmul>
 80067ec:	4602      	mov	r2, r0
 80067ee:	460b      	mov	r3, r1
 80067f0:	4630      	mov	r0, r6
 80067f2:	4639      	mov	r1, r7
 80067f4:	f7f9 fd48 	bl	8000288 <__aeabi_dsub>
 80067f8:	460f      	mov	r7, r1
 80067fa:	4606      	mov	r6, r0
 80067fc:	f7fa f996 	bl	8000b2c <__aeabi_d2iz>
 8006800:	9002      	str	r0, [sp, #8]
 8006802:	f7f9 fe8f 	bl	8000524 <__aeabi_i2d>
 8006806:	4602      	mov	r2, r0
 8006808:	460b      	mov	r3, r1
 800680a:	4630      	mov	r0, r6
 800680c:	4639      	mov	r1, r7
 800680e:	f7f9 fd3b 	bl	8000288 <__aeabi_dsub>
 8006812:	f1ba 0f00 	cmp.w	sl, #0
 8006816:	4606      	mov	r6, r0
 8006818:	460f      	mov	r7, r1
 800681a:	dd6d      	ble.n	80068f8 <__kernel_rem_pio2+0x250>
 800681c:	1e61      	subs	r1, r4, #1
 800681e:	ab0c      	add	r3, sp, #48	; 0x30
 8006820:	9d02      	ldr	r5, [sp, #8]
 8006822:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006826:	f1ca 0018 	rsb	r0, sl, #24
 800682a:	fa43 f200 	asr.w	r2, r3, r0
 800682e:	4415      	add	r5, r2
 8006830:	4082      	lsls	r2, r0
 8006832:	1a9b      	subs	r3, r3, r2
 8006834:	aa0c      	add	r2, sp, #48	; 0x30
 8006836:	9502      	str	r5, [sp, #8]
 8006838:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800683c:	f1ca 0217 	rsb	r2, sl, #23
 8006840:	fa43 fb02 	asr.w	fp, r3, r2
 8006844:	f1bb 0f00 	cmp.w	fp, #0
 8006848:	dd65      	ble.n	8006916 <__kernel_rem_pio2+0x26e>
 800684a:	9b02      	ldr	r3, [sp, #8]
 800684c:	2200      	movs	r2, #0
 800684e:	3301      	adds	r3, #1
 8006850:	9302      	str	r3, [sp, #8]
 8006852:	4615      	mov	r5, r2
 8006854:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006858:	4294      	cmp	r4, r2
 800685a:	f300 809f 	bgt.w	800699c <__kernel_rem_pio2+0x2f4>
 800685e:	f1ba 0f00 	cmp.w	sl, #0
 8006862:	dd07      	ble.n	8006874 <__kernel_rem_pio2+0x1cc>
 8006864:	f1ba 0f01 	cmp.w	sl, #1
 8006868:	f000 80c1 	beq.w	80069ee <__kernel_rem_pio2+0x346>
 800686c:	f1ba 0f02 	cmp.w	sl, #2
 8006870:	f000 80c7 	beq.w	8006a02 <__kernel_rem_pio2+0x35a>
 8006874:	f1bb 0f02 	cmp.w	fp, #2
 8006878:	d14d      	bne.n	8006916 <__kernel_rem_pio2+0x26e>
 800687a:	4632      	mov	r2, r6
 800687c:	463b      	mov	r3, r7
 800687e:	4954      	ldr	r1, [pc, #336]	; (80069d0 <__kernel_rem_pio2+0x328>)
 8006880:	2000      	movs	r0, #0
 8006882:	f7f9 fd01 	bl	8000288 <__aeabi_dsub>
 8006886:	4606      	mov	r6, r0
 8006888:	460f      	mov	r7, r1
 800688a:	2d00      	cmp	r5, #0
 800688c:	d043      	beq.n	8006916 <__kernel_rem_pio2+0x26e>
 800688e:	4650      	mov	r0, sl
 8006890:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80069c0 <__kernel_rem_pio2+0x318>
 8006894:	f000 fa58 	bl	8006d48 <scalbn>
 8006898:	4630      	mov	r0, r6
 800689a:	4639      	mov	r1, r7
 800689c:	ec53 2b10 	vmov	r2, r3, d0
 80068a0:	f7f9 fcf2 	bl	8000288 <__aeabi_dsub>
 80068a4:	4606      	mov	r6, r0
 80068a6:	460f      	mov	r7, r1
 80068a8:	e035      	b.n	8006916 <__kernel_rem_pio2+0x26e>
 80068aa:	4b4a      	ldr	r3, [pc, #296]	; (80069d4 <__kernel_rem_pio2+0x32c>)
 80068ac:	2200      	movs	r2, #0
 80068ae:	4630      	mov	r0, r6
 80068b0:	4639      	mov	r1, r7
 80068b2:	f7f9 fea1 	bl	80005f8 <__aeabi_dmul>
 80068b6:	f7fa f939 	bl	8000b2c <__aeabi_d2iz>
 80068ba:	f7f9 fe33 	bl	8000524 <__aeabi_i2d>
 80068be:	4602      	mov	r2, r0
 80068c0:	460b      	mov	r3, r1
 80068c2:	ec43 2b18 	vmov	d8, r2, r3
 80068c6:	4b44      	ldr	r3, [pc, #272]	; (80069d8 <__kernel_rem_pio2+0x330>)
 80068c8:	2200      	movs	r2, #0
 80068ca:	f7f9 fe95 	bl	80005f8 <__aeabi_dmul>
 80068ce:	4602      	mov	r2, r0
 80068d0:	460b      	mov	r3, r1
 80068d2:	4630      	mov	r0, r6
 80068d4:	4639      	mov	r1, r7
 80068d6:	f7f9 fcd7 	bl	8000288 <__aeabi_dsub>
 80068da:	f7fa f927 	bl	8000b2c <__aeabi_d2iz>
 80068de:	e9d5 2300 	ldrd	r2, r3, [r5]
 80068e2:	f84b 0b04 	str.w	r0, [fp], #4
 80068e6:	ec51 0b18 	vmov	r0, r1, d8
 80068ea:	f7f9 fccf 	bl	800028c <__adddf3>
 80068ee:	f109 39ff 	add.w	r9, r9, #4294967295
 80068f2:	4606      	mov	r6, r0
 80068f4:	460f      	mov	r7, r1
 80068f6:	e75b      	b.n	80067b0 <__kernel_rem_pio2+0x108>
 80068f8:	d106      	bne.n	8006908 <__kernel_rem_pio2+0x260>
 80068fa:	1e63      	subs	r3, r4, #1
 80068fc:	aa0c      	add	r2, sp, #48	; 0x30
 80068fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006902:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8006906:	e79d      	b.n	8006844 <__kernel_rem_pio2+0x19c>
 8006908:	4b34      	ldr	r3, [pc, #208]	; (80069dc <__kernel_rem_pio2+0x334>)
 800690a:	2200      	movs	r2, #0
 800690c:	f7fa f8fa 	bl	8000b04 <__aeabi_dcmpge>
 8006910:	2800      	cmp	r0, #0
 8006912:	d140      	bne.n	8006996 <__kernel_rem_pio2+0x2ee>
 8006914:	4683      	mov	fp, r0
 8006916:	2200      	movs	r2, #0
 8006918:	2300      	movs	r3, #0
 800691a:	4630      	mov	r0, r6
 800691c:	4639      	mov	r1, r7
 800691e:	f7fa f8d3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006922:	2800      	cmp	r0, #0
 8006924:	f000 80c1 	beq.w	8006aaa <__kernel_rem_pio2+0x402>
 8006928:	1e65      	subs	r5, r4, #1
 800692a:	462b      	mov	r3, r5
 800692c:	2200      	movs	r2, #0
 800692e:	9900      	ldr	r1, [sp, #0]
 8006930:	428b      	cmp	r3, r1
 8006932:	da6d      	bge.n	8006a10 <__kernel_rem_pio2+0x368>
 8006934:	2a00      	cmp	r2, #0
 8006936:	f000 808a 	beq.w	8006a4e <__kernel_rem_pio2+0x3a6>
 800693a:	ab0c      	add	r3, sp, #48	; 0x30
 800693c:	f1aa 0a18 	sub.w	sl, sl, #24
 8006940:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006944:	2b00      	cmp	r3, #0
 8006946:	f000 80ae 	beq.w	8006aa6 <__kernel_rem_pio2+0x3fe>
 800694a:	4650      	mov	r0, sl
 800694c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80069c0 <__kernel_rem_pio2+0x318>
 8006950:	f000 f9fa 	bl	8006d48 <scalbn>
 8006954:	1c6b      	adds	r3, r5, #1
 8006956:	00da      	lsls	r2, r3, #3
 8006958:	9205      	str	r2, [sp, #20]
 800695a:	ec57 6b10 	vmov	r6, r7, d0
 800695e:	aa70      	add	r2, sp, #448	; 0x1c0
 8006960:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80069d4 <__kernel_rem_pio2+0x32c>
 8006964:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8006968:	462c      	mov	r4, r5
 800696a:	f04f 0800 	mov.w	r8, #0
 800696e:	2c00      	cmp	r4, #0
 8006970:	f280 80d4 	bge.w	8006b1c <__kernel_rem_pio2+0x474>
 8006974:	462c      	mov	r4, r5
 8006976:	2c00      	cmp	r4, #0
 8006978:	f2c0 8102 	blt.w	8006b80 <__kernel_rem_pio2+0x4d8>
 800697c:	4b18      	ldr	r3, [pc, #96]	; (80069e0 <__kernel_rem_pio2+0x338>)
 800697e:	461e      	mov	r6, r3
 8006980:	ab70      	add	r3, sp, #448	; 0x1c0
 8006982:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8006986:	1b2b      	subs	r3, r5, r4
 8006988:	f04f 0900 	mov.w	r9, #0
 800698c:	f04f 0a00 	mov.w	sl, #0
 8006990:	2700      	movs	r7, #0
 8006992:	9306      	str	r3, [sp, #24]
 8006994:	e0e6      	b.n	8006b64 <__kernel_rem_pio2+0x4bc>
 8006996:	f04f 0b02 	mov.w	fp, #2
 800699a:	e756      	b.n	800684a <__kernel_rem_pio2+0x1a2>
 800699c:	f8d8 3000 	ldr.w	r3, [r8]
 80069a0:	bb05      	cbnz	r5, 80069e4 <__kernel_rem_pio2+0x33c>
 80069a2:	b123      	cbz	r3, 80069ae <__kernel_rem_pio2+0x306>
 80069a4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80069a8:	f8c8 3000 	str.w	r3, [r8]
 80069ac:	2301      	movs	r3, #1
 80069ae:	3201      	adds	r2, #1
 80069b0:	f108 0804 	add.w	r8, r8, #4
 80069b4:	461d      	mov	r5, r3
 80069b6:	e74f      	b.n	8006858 <__kernel_rem_pio2+0x1b0>
	...
 80069c4:	3ff00000 	.word	0x3ff00000
 80069c8:	08022130 	.word	0x08022130
 80069cc:	40200000 	.word	0x40200000
 80069d0:	3ff00000 	.word	0x3ff00000
 80069d4:	3e700000 	.word	0x3e700000
 80069d8:	41700000 	.word	0x41700000
 80069dc:	3fe00000 	.word	0x3fe00000
 80069e0:	080220f0 	.word	0x080220f0
 80069e4:	1acb      	subs	r3, r1, r3
 80069e6:	f8c8 3000 	str.w	r3, [r8]
 80069ea:	462b      	mov	r3, r5
 80069ec:	e7df      	b.n	80069ae <__kernel_rem_pio2+0x306>
 80069ee:	1e62      	subs	r2, r4, #1
 80069f0:	ab0c      	add	r3, sp, #48	; 0x30
 80069f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069f6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80069fa:	a90c      	add	r1, sp, #48	; 0x30
 80069fc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006a00:	e738      	b.n	8006874 <__kernel_rem_pio2+0x1cc>
 8006a02:	1e62      	subs	r2, r4, #1
 8006a04:	ab0c      	add	r3, sp, #48	; 0x30
 8006a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a0a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006a0e:	e7f4      	b.n	80069fa <__kernel_rem_pio2+0x352>
 8006a10:	a90c      	add	r1, sp, #48	; 0x30
 8006a12:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006a16:	3b01      	subs	r3, #1
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	e788      	b.n	800692e <__kernel_rem_pio2+0x286>
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006a22:	2900      	cmp	r1, #0
 8006a24:	d0fa      	beq.n	8006a1c <__kernel_rem_pio2+0x374>
 8006a26:	9a08      	ldr	r2, [sp, #32]
 8006a28:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8006a2c:	446a      	add	r2, sp
 8006a2e:	3a98      	subs	r2, #152	; 0x98
 8006a30:	9208      	str	r2, [sp, #32]
 8006a32:	9a06      	ldr	r2, [sp, #24]
 8006a34:	a920      	add	r1, sp, #128	; 0x80
 8006a36:	18a2      	adds	r2, r4, r2
 8006a38:	18e3      	adds	r3, r4, r3
 8006a3a:	f104 0801 	add.w	r8, r4, #1
 8006a3e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8006a42:	9302      	str	r3, [sp, #8]
 8006a44:	9b02      	ldr	r3, [sp, #8]
 8006a46:	4543      	cmp	r3, r8
 8006a48:	da04      	bge.n	8006a54 <__kernel_rem_pio2+0x3ac>
 8006a4a:	461c      	mov	r4, r3
 8006a4c:	e6a2      	b.n	8006794 <__kernel_rem_pio2+0xec>
 8006a4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a50:	2301      	movs	r3, #1
 8006a52:	e7e4      	b.n	8006a1e <__kernel_rem_pio2+0x376>
 8006a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a56:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006a5a:	f7f9 fd63 	bl	8000524 <__aeabi_i2d>
 8006a5e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8006a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a64:	46ab      	mov	fp, r5
 8006a66:	461c      	mov	r4, r3
 8006a68:	f04f 0900 	mov.w	r9, #0
 8006a6c:	2600      	movs	r6, #0
 8006a6e:	2700      	movs	r7, #0
 8006a70:	9b05      	ldr	r3, [sp, #20]
 8006a72:	4599      	cmp	r9, r3
 8006a74:	dd06      	ble.n	8006a84 <__kernel_rem_pio2+0x3dc>
 8006a76:	9b08      	ldr	r3, [sp, #32]
 8006a78:	e8e3 6702 	strd	r6, r7, [r3], #8
 8006a7c:	f108 0801 	add.w	r8, r8, #1
 8006a80:	9308      	str	r3, [sp, #32]
 8006a82:	e7df      	b.n	8006a44 <__kernel_rem_pio2+0x39c>
 8006a84:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006a88:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006a8c:	f7f9 fdb4 	bl	80005f8 <__aeabi_dmul>
 8006a90:	4602      	mov	r2, r0
 8006a92:	460b      	mov	r3, r1
 8006a94:	4630      	mov	r0, r6
 8006a96:	4639      	mov	r1, r7
 8006a98:	f7f9 fbf8 	bl	800028c <__adddf3>
 8006a9c:	f109 0901 	add.w	r9, r9, #1
 8006aa0:	4606      	mov	r6, r0
 8006aa2:	460f      	mov	r7, r1
 8006aa4:	e7e4      	b.n	8006a70 <__kernel_rem_pio2+0x3c8>
 8006aa6:	3d01      	subs	r5, #1
 8006aa8:	e747      	b.n	800693a <__kernel_rem_pio2+0x292>
 8006aaa:	ec47 6b10 	vmov	d0, r6, r7
 8006aae:	f1ca 0000 	rsb	r0, sl, #0
 8006ab2:	f000 f949 	bl	8006d48 <scalbn>
 8006ab6:	ec57 6b10 	vmov	r6, r7, d0
 8006aba:	4ba0      	ldr	r3, [pc, #640]	; (8006d3c <__kernel_rem_pio2+0x694>)
 8006abc:	ee10 0a10 	vmov	r0, s0
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	4639      	mov	r1, r7
 8006ac4:	f7fa f81e 	bl	8000b04 <__aeabi_dcmpge>
 8006ac8:	b1f8      	cbz	r0, 8006b0a <__kernel_rem_pio2+0x462>
 8006aca:	4b9d      	ldr	r3, [pc, #628]	; (8006d40 <__kernel_rem_pio2+0x698>)
 8006acc:	2200      	movs	r2, #0
 8006ace:	4630      	mov	r0, r6
 8006ad0:	4639      	mov	r1, r7
 8006ad2:	f7f9 fd91 	bl	80005f8 <__aeabi_dmul>
 8006ad6:	f7fa f829 	bl	8000b2c <__aeabi_d2iz>
 8006ada:	4680      	mov	r8, r0
 8006adc:	f7f9 fd22 	bl	8000524 <__aeabi_i2d>
 8006ae0:	4b96      	ldr	r3, [pc, #600]	; (8006d3c <__kernel_rem_pio2+0x694>)
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f7f9 fd88 	bl	80005f8 <__aeabi_dmul>
 8006ae8:	460b      	mov	r3, r1
 8006aea:	4602      	mov	r2, r0
 8006aec:	4639      	mov	r1, r7
 8006aee:	4630      	mov	r0, r6
 8006af0:	f7f9 fbca 	bl	8000288 <__aeabi_dsub>
 8006af4:	f7fa f81a 	bl	8000b2c <__aeabi_d2iz>
 8006af8:	1c65      	adds	r5, r4, #1
 8006afa:	ab0c      	add	r3, sp, #48	; 0x30
 8006afc:	f10a 0a18 	add.w	sl, sl, #24
 8006b00:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006b04:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006b08:	e71f      	b.n	800694a <__kernel_rem_pio2+0x2a2>
 8006b0a:	4630      	mov	r0, r6
 8006b0c:	4639      	mov	r1, r7
 8006b0e:	f7fa f80d 	bl	8000b2c <__aeabi_d2iz>
 8006b12:	ab0c      	add	r3, sp, #48	; 0x30
 8006b14:	4625      	mov	r5, r4
 8006b16:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006b1a:	e716      	b.n	800694a <__kernel_rem_pio2+0x2a2>
 8006b1c:	ab0c      	add	r3, sp, #48	; 0x30
 8006b1e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006b22:	f7f9 fcff 	bl	8000524 <__aeabi_i2d>
 8006b26:	4632      	mov	r2, r6
 8006b28:	463b      	mov	r3, r7
 8006b2a:	f7f9 fd65 	bl	80005f8 <__aeabi_dmul>
 8006b2e:	4642      	mov	r2, r8
 8006b30:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8006b34:	464b      	mov	r3, r9
 8006b36:	4630      	mov	r0, r6
 8006b38:	4639      	mov	r1, r7
 8006b3a:	f7f9 fd5d 	bl	80005f8 <__aeabi_dmul>
 8006b3e:	3c01      	subs	r4, #1
 8006b40:	4606      	mov	r6, r0
 8006b42:	460f      	mov	r7, r1
 8006b44:	e713      	b.n	800696e <__kernel_rem_pio2+0x2c6>
 8006b46:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8006b4a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8006b4e:	f7f9 fd53 	bl	80005f8 <__aeabi_dmul>
 8006b52:	4602      	mov	r2, r0
 8006b54:	460b      	mov	r3, r1
 8006b56:	4648      	mov	r0, r9
 8006b58:	4651      	mov	r1, sl
 8006b5a:	f7f9 fb97 	bl	800028c <__adddf3>
 8006b5e:	3701      	adds	r7, #1
 8006b60:	4681      	mov	r9, r0
 8006b62:	468a      	mov	sl, r1
 8006b64:	9b00      	ldr	r3, [sp, #0]
 8006b66:	429f      	cmp	r7, r3
 8006b68:	dc02      	bgt.n	8006b70 <__kernel_rem_pio2+0x4c8>
 8006b6a:	9b06      	ldr	r3, [sp, #24]
 8006b6c:	429f      	cmp	r7, r3
 8006b6e:	ddea      	ble.n	8006b46 <__kernel_rem_pio2+0x49e>
 8006b70:	9a06      	ldr	r2, [sp, #24]
 8006b72:	ab48      	add	r3, sp, #288	; 0x120
 8006b74:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8006b78:	e9c6 9a00 	strd	r9, sl, [r6]
 8006b7c:	3c01      	subs	r4, #1
 8006b7e:	e6fa      	b.n	8006976 <__kernel_rem_pio2+0x2ce>
 8006b80:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	dc0b      	bgt.n	8006b9e <__kernel_rem_pio2+0x4f6>
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	dc39      	bgt.n	8006bfe <__kernel_rem_pio2+0x556>
 8006b8a:	d05d      	beq.n	8006c48 <__kernel_rem_pio2+0x5a0>
 8006b8c:	9b02      	ldr	r3, [sp, #8]
 8006b8e:	f003 0007 	and.w	r0, r3, #7
 8006b92:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006b96:	ecbd 8b02 	vpop	{d8}
 8006b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b9e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006ba0:	2b03      	cmp	r3, #3
 8006ba2:	d1f3      	bne.n	8006b8c <__kernel_rem_pio2+0x4e4>
 8006ba4:	9b05      	ldr	r3, [sp, #20]
 8006ba6:	9500      	str	r5, [sp, #0]
 8006ba8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8006bac:	eb0d 0403 	add.w	r4, sp, r3
 8006bb0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8006bb4:	46a2      	mov	sl, r4
 8006bb6:	9b00      	ldr	r3, [sp, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f1aa 0a08 	sub.w	sl, sl, #8
 8006bbe:	dc69      	bgt.n	8006c94 <__kernel_rem_pio2+0x5ec>
 8006bc0:	46aa      	mov	sl, r5
 8006bc2:	f1ba 0f01 	cmp.w	sl, #1
 8006bc6:	f1a4 0408 	sub.w	r4, r4, #8
 8006bca:	f300 8083 	bgt.w	8006cd4 <__kernel_rem_pio2+0x62c>
 8006bce:	9c05      	ldr	r4, [sp, #20]
 8006bd0:	ab48      	add	r3, sp, #288	; 0x120
 8006bd2:	441c      	add	r4, r3
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	2d01      	cmp	r5, #1
 8006bda:	f300 809a 	bgt.w	8006d12 <__kernel_rem_pio2+0x66a>
 8006bde:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8006be2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8006be6:	f1bb 0f00 	cmp.w	fp, #0
 8006bea:	f040 8098 	bne.w	8006d1e <__kernel_rem_pio2+0x676>
 8006bee:	9b04      	ldr	r3, [sp, #16]
 8006bf0:	e9c3 7800 	strd	r7, r8, [r3]
 8006bf4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006bf8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006bfc:	e7c6      	b.n	8006b8c <__kernel_rem_pio2+0x4e4>
 8006bfe:	9e05      	ldr	r6, [sp, #20]
 8006c00:	ab48      	add	r3, sp, #288	; 0x120
 8006c02:	441e      	add	r6, r3
 8006c04:	462c      	mov	r4, r5
 8006c06:	2000      	movs	r0, #0
 8006c08:	2100      	movs	r1, #0
 8006c0a:	2c00      	cmp	r4, #0
 8006c0c:	da33      	bge.n	8006c76 <__kernel_rem_pio2+0x5ce>
 8006c0e:	f1bb 0f00 	cmp.w	fp, #0
 8006c12:	d036      	beq.n	8006c82 <__kernel_rem_pio2+0x5da>
 8006c14:	4602      	mov	r2, r0
 8006c16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c1a:	9c04      	ldr	r4, [sp, #16]
 8006c1c:	e9c4 2300 	strd	r2, r3, [r4]
 8006c20:	4602      	mov	r2, r0
 8006c22:	460b      	mov	r3, r1
 8006c24:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8006c28:	f7f9 fb2e 	bl	8000288 <__aeabi_dsub>
 8006c2c:	ae4a      	add	r6, sp, #296	; 0x128
 8006c2e:	2401      	movs	r4, #1
 8006c30:	42a5      	cmp	r5, r4
 8006c32:	da29      	bge.n	8006c88 <__kernel_rem_pio2+0x5e0>
 8006c34:	f1bb 0f00 	cmp.w	fp, #0
 8006c38:	d002      	beq.n	8006c40 <__kernel_rem_pio2+0x598>
 8006c3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c3e:	4619      	mov	r1, r3
 8006c40:	9b04      	ldr	r3, [sp, #16]
 8006c42:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006c46:	e7a1      	b.n	8006b8c <__kernel_rem_pio2+0x4e4>
 8006c48:	9c05      	ldr	r4, [sp, #20]
 8006c4a:	ab48      	add	r3, sp, #288	; 0x120
 8006c4c:	441c      	add	r4, r3
 8006c4e:	2000      	movs	r0, #0
 8006c50:	2100      	movs	r1, #0
 8006c52:	2d00      	cmp	r5, #0
 8006c54:	da09      	bge.n	8006c6a <__kernel_rem_pio2+0x5c2>
 8006c56:	f1bb 0f00 	cmp.w	fp, #0
 8006c5a:	d002      	beq.n	8006c62 <__kernel_rem_pio2+0x5ba>
 8006c5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c60:	4619      	mov	r1, r3
 8006c62:	9b04      	ldr	r3, [sp, #16]
 8006c64:	e9c3 0100 	strd	r0, r1, [r3]
 8006c68:	e790      	b.n	8006b8c <__kernel_rem_pio2+0x4e4>
 8006c6a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006c6e:	f7f9 fb0d 	bl	800028c <__adddf3>
 8006c72:	3d01      	subs	r5, #1
 8006c74:	e7ed      	b.n	8006c52 <__kernel_rem_pio2+0x5aa>
 8006c76:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8006c7a:	f7f9 fb07 	bl	800028c <__adddf3>
 8006c7e:	3c01      	subs	r4, #1
 8006c80:	e7c3      	b.n	8006c0a <__kernel_rem_pio2+0x562>
 8006c82:	4602      	mov	r2, r0
 8006c84:	460b      	mov	r3, r1
 8006c86:	e7c8      	b.n	8006c1a <__kernel_rem_pio2+0x572>
 8006c88:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8006c8c:	f7f9 fafe 	bl	800028c <__adddf3>
 8006c90:	3401      	adds	r4, #1
 8006c92:	e7cd      	b.n	8006c30 <__kernel_rem_pio2+0x588>
 8006c94:	e9da 8900 	ldrd	r8, r9, [sl]
 8006c98:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8006c9c:	9b00      	ldr	r3, [sp, #0]
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	4632      	mov	r2, r6
 8006ca4:	463b      	mov	r3, r7
 8006ca6:	4640      	mov	r0, r8
 8006ca8:	4649      	mov	r1, r9
 8006caa:	f7f9 faef 	bl	800028c <__adddf3>
 8006cae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	4640      	mov	r0, r8
 8006cb8:	4649      	mov	r1, r9
 8006cba:	f7f9 fae5 	bl	8000288 <__aeabi_dsub>
 8006cbe:	4632      	mov	r2, r6
 8006cc0:	463b      	mov	r3, r7
 8006cc2:	f7f9 fae3 	bl	800028c <__adddf3>
 8006cc6:	ed9d 7b06 	vldr	d7, [sp, #24]
 8006cca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006cce:	ed8a 7b00 	vstr	d7, [sl]
 8006cd2:	e770      	b.n	8006bb6 <__kernel_rem_pio2+0x50e>
 8006cd4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006cd8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8006cdc:	4640      	mov	r0, r8
 8006cde:	4632      	mov	r2, r6
 8006ce0:	463b      	mov	r3, r7
 8006ce2:	4649      	mov	r1, r9
 8006ce4:	f7f9 fad2 	bl	800028c <__adddf3>
 8006ce8:	e9cd 0100 	strd	r0, r1, [sp]
 8006cec:	4602      	mov	r2, r0
 8006cee:	460b      	mov	r3, r1
 8006cf0:	4640      	mov	r0, r8
 8006cf2:	4649      	mov	r1, r9
 8006cf4:	f7f9 fac8 	bl	8000288 <__aeabi_dsub>
 8006cf8:	4632      	mov	r2, r6
 8006cfa:	463b      	mov	r3, r7
 8006cfc:	f7f9 fac6 	bl	800028c <__adddf3>
 8006d00:	ed9d 7b00 	vldr	d7, [sp]
 8006d04:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006d08:	ed84 7b00 	vstr	d7, [r4]
 8006d0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d10:	e757      	b.n	8006bc2 <__kernel_rem_pio2+0x51a>
 8006d12:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006d16:	f7f9 fab9 	bl	800028c <__adddf3>
 8006d1a:	3d01      	subs	r5, #1
 8006d1c:	e75c      	b.n	8006bd8 <__kernel_rem_pio2+0x530>
 8006d1e:	9b04      	ldr	r3, [sp, #16]
 8006d20:	9a04      	ldr	r2, [sp, #16]
 8006d22:	601f      	str	r7, [r3, #0]
 8006d24:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8006d28:	605c      	str	r4, [r3, #4]
 8006d2a:	609d      	str	r5, [r3, #8]
 8006d2c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006d30:	60d3      	str	r3, [r2, #12]
 8006d32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d36:	6110      	str	r0, [r2, #16]
 8006d38:	6153      	str	r3, [r2, #20]
 8006d3a:	e727      	b.n	8006b8c <__kernel_rem_pio2+0x4e4>
 8006d3c:	41700000 	.word	0x41700000
 8006d40:	3e700000 	.word	0x3e700000
 8006d44:	00000000 	.word	0x00000000

08006d48 <scalbn>:
 8006d48:	b570      	push	{r4, r5, r6, lr}
 8006d4a:	ec55 4b10 	vmov	r4, r5, d0
 8006d4e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006d52:	4606      	mov	r6, r0
 8006d54:	462b      	mov	r3, r5
 8006d56:	b999      	cbnz	r1, 8006d80 <scalbn+0x38>
 8006d58:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006d5c:	4323      	orrs	r3, r4
 8006d5e:	d03f      	beq.n	8006de0 <scalbn+0x98>
 8006d60:	4b35      	ldr	r3, [pc, #212]	; (8006e38 <scalbn+0xf0>)
 8006d62:	4629      	mov	r1, r5
 8006d64:	ee10 0a10 	vmov	r0, s0
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f7f9 fc45 	bl	80005f8 <__aeabi_dmul>
 8006d6e:	4b33      	ldr	r3, [pc, #204]	; (8006e3c <scalbn+0xf4>)
 8006d70:	429e      	cmp	r6, r3
 8006d72:	4604      	mov	r4, r0
 8006d74:	460d      	mov	r5, r1
 8006d76:	da10      	bge.n	8006d9a <scalbn+0x52>
 8006d78:	a327      	add	r3, pc, #156	; (adr r3, 8006e18 <scalbn+0xd0>)
 8006d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7e:	e01f      	b.n	8006dc0 <scalbn+0x78>
 8006d80:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006d84:	4291      	cmp	r1, r2
 8006d86:	d10c      	bne.n	8006da2 <scalbn+0x5a>
 8006d88:	ee10 2a10 	vmov	r2, s0
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	4629      	mov	r1, r5
 8006d90:	f7f9 fa7c 	bl	800028c <__adddf3>
 8006d94:	4604      	mov	r4, r0
 8006d96:	460d      	mov	r5, r1
 8006d98:	e022      	b.n	8006de0 <scalbn+0x98>
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006da0:	3936      	subs	r1, #54	; 0x36
 8006da2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006da6:	4296      	cmp	r6, r2
 8006da8:	dd0d      	ble.n	8006dc6 <scalbn+0x7e>
 8006daa:	2d00      	cmp	r5, #0
 8006dac:	a11c      	add	r1, pc, #112	; (adr r1, 8006e20 <scalbn+0xd8>)
 8006dae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006db2:	da02      	bge.n	8006dba <scalbn+0x72>
 8006db4:	a11c      	add	r1, pc, #112	; (adr r1, 8006e28 <scalbn+0xe0>)
 8006db6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006dba:	a319      	add	r3, pc, #100	; (adr r3, 8006e20 <scalbn+0xd8>)
 8006dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc0:	f7f9 fc1a 	bl	80005f8 <__aeabi_dmul>
 8006dc4:	e7e6      	b.n	8006d94 <scalbn+0x4c>
 8006dc6:	1872      	adds	r2, r6, r1
 8006dc8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006dcc:	428a      	cmp	r2, r1
 8006dce:	dcec      	bgt.n	8006daa <scalbn+0x62>
 8006dd0:	2a00      	cmp	r2, #0
 8006dd2:	dd08      	ble.n	8006de6 <scalbn+0x9e>
 8006dd4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006dd8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006ddc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006de0:	ec45 4b10 	vmov	d0, r4, r5
 8006de4:	bd70      	pop	{r4, r5, r6, pc}
 8006de6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006dea:	da08      	bge.n	8006dfe <scalbn+0xb6>
 8006dec:	2d00      	cmp	r5, #0
 8006dee:	a10a      	add	r1, pc, #40	; (adr r1, 8006e18 <scalbn+0xd0>)
 8006df0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006df4:	dac0      	bge.n	8006d78 <scalbn+0x30>
 8006df6:	a10e      	add	r1, pc, #56	; (adr r1, 8006e30 <scalbn+0xe8>)
 8006df8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006dfc:	e7bc      	b.n	8006d78 <scalbn+0x30>
 8006dfe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006e02:	3236      	adds	r2, #54	; 0x36
 8006e04:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006e08:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	4b0c      	ldr	r3, [pc, #48]	; (8006e40 <scalbn+0xf8>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	e7d5      	b.n	8006dc0 <scalbn+0x78>
 8006e14:	f3af 8000 	nop.w
 8006e18:	c2f8f359 	.word	0xc2f8f359
 8006e1c:	01a56e1f 	.word	0x01a56e1f
 8006e20:	8800759c 	.word	0x8800759c
 8006e24:	7e37e43c 	.word	0x7e37e43c
 8006e28:	8800759c 	.word	0x8800759c
 8006e2c:	fe37e43c 	.word	0xfe37e43c
 8006e30:	c2f8f359 	.word	0xc2f8f359
 8006e34:	81a56e1f 	.word	0x81a56e1f
 8006e38:	43500000 	.word	0x43500000
 8006e3c:	ffff3cb0 	.word	0xffff3cb0
 8006e40:	3c900000 	.word	0x3c900000
 8006e44:	00000000 	.word	0x00000000

08006e48 <floor>:
 8006e48:	ec51 0b10 	vmov	r0, r1, d0
 8006e4c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e54:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8006e58:	2e13      	cmp	r6, #19
 8006e5a:	ee10 5a10 	vmov	r5, s0
 8006e5e:	ee10 8a10 	vmov	r8, s0
 8006e62:	460c      	mov	r4, r1
 8006e64:	dc31      	bgt.n	8006eca <floor+0x82>
 8006e66:	2e00      	cmp	r6, #0
 8006e68:	da14      	bge.n	8006e94 <floor+0x4c>
 8006e6a:	a333      	add	r3, pc, #204	; (adr r3, 8006f38 <floor+0xf0>)
 8006e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e70:	f7f9 fa0c 	bl	800028c <__adddf3>
 8006e74:	2200      	movs	r2, #0
 8006e76:	2300      	movs	r3, #0
 8006e78:	f7f9 fe4e 	bl	8000b18 <__aeabi_dcmpgt>
 8006e7c:	b138      	cbz	r0, 8006e8e <floor+0x46>
 8006e7e:	2c00      	cmp	r4, #0
 8006e80:	da53      	bge.n	8006f2a <floor+0xe2>
 8006e82:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8006e86:	4325      	orrs	r5, r4
 8006e88:	d052      	beq.n	8006f30 <floor+0xe8>
 8006e8a:	4c2d      	ldr	r4, [pc, #180]	; (8006f40 <floor+0xf8>)
 8006e8c:	2500      	movs	r5, #0
 8006e8e:	4621      	mov	r1, r4
 8006e90:	4628      	mov	r0, r5
 8006e92:	e024      	b.n	8006ede <floor+0x96>
 8006e94:	4f2b      	ldr	r7, [pc, #172]	; (8006f44 <floor+0xfc>)
 8006e96:	4137      	asrs	r7, r6
 8006e98:	ea01 0307 	and.w	r3, r1, r7
 8006e9c:	4303      	orrs	r3, r0
 8006e9e:	d01e      	beq.n	8006ede <floor+0x96>
 8006ea0:	a325      	add	r3, pc, #148	; (adr r3, 8006f38 <floor+0xf0>)
 8006ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea6:	f7f9 f9f1 	bl	800028c <__adddf3>
 8006eaa:	2200      	movs	r2, #0
 8006eac:	2300      	movs	r3, #0
 8006eae:	f7f9 fe33 	bl	8000b18 <__aeabi_dcmpgt>
 8006eb2:	2800      	cmp	r0, #0
 8006eb4:	d0eb      	beq.n	8006e8e <floor+0x46>
 8006eb6:	2c00      	cmp	r4, #0
 8006eb8:	bfbe      	ittt	lt
 8006eba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006ebe:	4133      	asrlt	r3, r6
 8006ec0:	18e4      	addlt	r4, r4, r3
 8006ec2:	ea24 0407 	bic.w	r4, r4, r7
 8006ec6:	2500      	movs	r5, #0
 8006ec8:	e7e1      	b.n	8006e8e <floor+0x46>
 8006eca:	2e33      	cmp	r6, #51	; 0x33
 8006ecc:	dd0b      	ble.n	8006ee6 <floor+0x9e>
 8006ece:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006ed2:	d104      	bne.n	8006ede <floor+0x96>
 8006ed4:	ee10 2a10 	vmov	r2, s0
 8006ed8:	460b      	mov	r3, r1
 8006eda:	f7f9 f9d7 	bl	800028c <__adddf3>
 8006ede:	ec41 0b10 	vmov	d0, r0, r1
 8006ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ee6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8006eea:	f04f 37ff 	mov.w	r7, #4294967295
 8006eee:	40df      	lsrs	r7, r3
 8006ef0:	4238      	tst	r0, r7
 8006ef2:	d0f4      	beq.n	8006ede <floor+0x96>
 8006ef4:	a310      	add	r3, pc, #64	; (adr r3, 8006f38 <floor+0xf0>)
 8006ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efa:	f7f9 f9c7 	bl	800028c <__adddf3>
 8006efe:	2200      	movs	r2, #0
 8006f00:	2300      	movs	r3, #0
 8006f02:	f7f9 fe09 	bl	8000b18 <__aeabi_dcmpgt>
 8006f06:	2800      	cmp	r0, #0
 8006f08:	d0c1      	beq.n	8006e8e <floor+0x46>
 8006f0a:	2c00      	cmp	r4, #0
 8006f0c:	da0a      	bge.n	8006f24 <floor+0xdc>
 8006f0e:	2e14      	cmp	r6, #20
 8006f10:	d101      	bne.n	8006f16 <floor+0xce>
 8006f12:	3401      	adds	r4, #1
 8006f14:	e006      	b.n	8006f24 <floor+0xdc>
 8006f16:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	40b3      	lsls	r3, r6
 8006f1e:	441d      	add	r5, r3
 8006f20:	45a8      	cmp	r8, r5
 8006f22:	d8f6      	bhi.n	8006f12 <floor+0xca>
 8006f24:	ea25 0507 	bic.w	r5, r5, r7
 8006f28:	e7b1      	b.n	8006e8e <floor+0x46>
 8006f2a:	2500      	movs	r5, #0
 8006f2c:	462c      	mov	r4, r5
 8006f2e:	e7ae      	b.n	8006e8e <floor+0x46>
 8006f30:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006f34:	e7ab      	b.n	8006e8e <floor+0x46>
 8006f36:	bf00      	nop
 8006f38:	8800759c 	.word	0x8800759c
 8006f3c:	7e37e43c 	.word	0x7e37e43c
 8006f40:	bff00000 	.word	0xbff00000
 8006f44:	000fffff 	.word	0x000fffff

08006f48 <_init>:
 8006f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f4a:	bf00      	nop
 8006f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f4e:	bc08      	pop	{r3}
 8006f50:	469e      	mov	lr, r3
 8006f52:	4770      	bx	lr

08006f54 <_fini>:
 8006f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f56:	bf00      	nop
 8006f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f5a:	bc08      	pop	{r3}
 8006f5c:	469e      	mov	lr, r3
 8006f5e:	4770      	bx	lr
